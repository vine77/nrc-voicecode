*** Problem with C indentation

2495,2497c2509,2511
<   2:    {
<   3: <CURSOR>   
<   4:    }
---
>   2: {
>   3: <CURSOR>
>   4: }
2507,2509c2521,2523
<   2:    {
<   3:    
<   4:    }
---
>   2: {
>   3: 
>   4: }

*** BUG: back indent always back indents to the very first column
6237,6240c6251,6254
<  19:       attrs)
<  20:       
<  21:    def spoken_form_regexp(self, spoken_form):
<  22:       <CURSOR>
---
>  19:                           attrs)
>  20: 
>  21: def spoken_form_regexp(self, spoken_form):
>  22:    <CURSOR>
6244,6254c6258,6261
< Associate 'R. E.' with symbol (Enter selection):
< 
<   '0': no association
<   '1': re
<   '2': Re (*new*)
<   '3': RE (*new*)
< 
< >  19:       attrs)
<  20:       
<  21:    def spoken_form_regexp(self, spoken_form):
<  22:       words = re.split(<CURSOR>)
---
>  19:                           attrs)
>  20: 
>  21: def spoken_form_regexp(self, spoken_form):
>  22:    words = re.split(<CURSOR>)
6258,6261c6265,6268
<  20:       
<  21:    def spoken_form_regexp(self, spoken_form):
<  22:       words = re.split('\s+', spoken_form)
<  23:       <CURSOR>
---
>  20: 
>  21: def spoken_form_regexp(self, spoken_form):
>  22:    words = re.split('\s+', spoken_form)
>  23:    <CURSOR>
6265,6268c6272,6275
<  21:    def spoken_form_regexp(self, spoken_form):
<  22:       words = re.split('\s+', spoken_form)
<  23:       regexp = ''
<  24:       <CURSOR>
---
>  21: def spoken_form_regexp(self, spoken_form):
>  22:    words = re.split('\s+', spoken_form)
>  23:    regexp = ''
>  24:    <CURSOR>
6272,6275c6279,6282
<  22:       words = re.split('\s+', spoken_form)
<  23:       regexp = ''
<  24:       for a_word in words:
<  25:          <CURSOR>
---
>  22:    words = re.split('\s+', spoken_form)
>  23:    regexp = ''
>  24:    for a_word in words:
>  25:       <CURSOR>
6279,6282c6286,6289
<  23:       regexp = ''
<  24:       for a_word in words:
<  25:          first = a_word[0]
<  26:          <CURSOR>
---
>  23:    regexp = ''
>  24:    for a_word in words:
>  25:       first = a_word[0]
>  26:       <CURSOR>
6286,6289c6293,6296
<  24:       for a_word in words:
<  25:          first = a_word[0]
<  26:          rest = a_word[1: ]
<  27:          <CURSOR>
---
>  24:    for a_word in words:
>  25:       first = a_word[0]
>  26:       rest = a_word[1: ]
>  27:       <CURSOR>
6293,6296c6300,6303
<  24:       for a_word in words:
<  25:          first = a_word[0]
<  26:          rest = a_word[1: ]
<  27:          regexp_this_word = '<CURSOR>'
---
>  24:    for a_word in words:
>  25:       first = a_word[0]
>  26:       rest = a_word[1: ]
>  27:       regexp_this_word = '<CURSOR>'
6300,6303c6307,6310
<  24:       for a_word in words:
<  25:          first = a_word[0]
<  26:          rest = a_word[1: ]
<  27:          regexp_this_word = '[' + string.lower(first<CURSOR>)
---
>  24:    for a_word in words:
>  25:       first = a_word[0]
>  26:       rest = a_word[1: ]
>  27:       regexp_this_word = '[' + string.lower(first<CURSOR>)
6307,6310c6314,6317
<  25:          first = a_word[0]
<  26:          rest = a_word[1: ]
<  27:          regexp_this_word = '[' + string.lower(first) + string.upper(first)
<  28:          <CURSOR>
---
>  25:       first = a_word[0]
>  26:       rest = a_word[1: ]
>  27:       regexp_this_word = '[' + string.lower(first) + string.upper(first)
>  28:       <CURSOR>
6314,6317c6321,6324
<  26:          rest = a_word[1: ]
<  27:          regexp_this_word = '[' + string.lower(first) + string.upper(first)
<  28:          if not regexp == '':
<  29:             <CURSOR>
---
>  26:       rest = a_word[1: ]
>  27:       regexp_this_word = '[' + string.lower(first) + string.upper(first)
>  28:       if not regexp == '':
>  29:          <CURSOR>
6321,6324c6328,6331
<  27:          regexp_this_word = '[' + string.lower(first) + string.upper(first)
<  28:          if not regexp == '':
<  29:             regexp = regexp + '\s*'
<  30:             <CURSOR>
---
>  27:       regexp_this_word = '[' + string.lower(first) + string.upper(first)
>  28:       if not regexp == '':
>  29:          regexp = regexp + '\s*'
>  30:          <CURSOR>
6328,6331c6335,6338
<  28:          if not regexp == '':
<  29:             regexp = regexp + '\s*'
<  30:             regexp = regexp + regexp_this_word
<  31:             <CURSOR>
---
>  28:       if not regexp == '':
>  29:          regexp = regexp + '\s*'
>  30:          regexp = regexp + regexp_this_word
>  31:          <CURSOR>
6335,6338c6342,6345
<  28:          if not regexp == '':
<  29:             regexp = regexp + '\s*'
<  30:             regexp = regexp + regexp_this_word
<  31:          <CURSOR>
---
>  28:       if not regexp == '':
>  29:          regexp = regexp + '\s*'
>  30:          regexp = regexp + regexp_this_word
>  31: <CURSOR>      
6342,6345c6349,6352
<  29:             regexp = regexp + '\s*'
<  30:             regexp = regexp + regexp_this_word
<  31:          return regexp
<  32:          <CURSOR>
---
>  29:          regexp = regexp + '\s*'
>  30:          regexp = regexp + regexp_this_word
>  31: return regexp
>  32: <CURSOR>
6366,6369c6373,6376
< >  30:             regexp = regexp + regexp_this_word
<  31:          return regexp
<  32:          if not this_word:
<  33:             this_word = 'hello<CURSOR>'
---
> >  30:          regexp = regexp + regexp_this_word
>  31: return regexp
>  32: if not this_word:
>  33:    this_word = 'hello<CURSOR>'
6380,6383c6387,6390
< >  32:          if not this_word:
<  33:             this_word = 'hello'
<  34:          elif this_word == hi: 
<  35:             <CURSOR>
---
> >  32: if not this_word:
>  33:    this_word = 'hello'
>  34: elif this_word == hi:
>  35:    <CURSOR>
6394,6397c6401,6404
< >  34:          elif this_word == hi: 
<  35:             this_word = greetings
<  36:          else:
<  37:             <CURSOR>
---
> >  34: elif this_word == hi:
>  35:    this_word = greetings
>  36: else:
>  37:    <CURSOR>
6408,6411c6415,6418
< >  35:             this_word = greetings
<  36:          else:
<  37:             this_word = 'done'
<  38:             <CURSOR>
---
> >  35:    this_word = greetings
>  36: else:
>  37:    this_word = 'done'
>  38:    <CURSOR>
6425,6428c6432,6435
< >  36:          else:
<  37:             this_word = 'done'
<  38:             try:
<  39:                some_function(<CURSOR>)
---
> >  36: else:
>  37:    this_word = 'done'
>  38:    try:
>  39:       some_function(<CURSOR>)
6439,6442c6446,6449
< >  38:             try:
<  39:                some_function()
<  40:             except : 
<  41:                print 'error<CURSOR>'
---
> >  38:    try:
>  39:       some_function()
>  40: except :
>  41:    print 'error<CURSOR>'
6456,6459c6463,6466
< >  40:             except : 
<  41:                print 'error'
<  42:             finally:
<  43:                print 'all_right<CURSOR>'
---
> >  40: except :
>  41:    print 'error'
>  42: finally:
>  43:    print 'all_right<CURSOR>'
6844c6851
<  15:       <CURSOR>)
---
>  15:                           <CURSOR>)
6851c6858
<  15:       {'on_application': on_application, <CURSOR>})
---
>  15:                           {'on_application': on_application, <CURSOR>})
6867,6868c6874,6875
<  15:       {'on_application': on_application, 'known_symbols': symbol_dictionary.symbol_dictionary(), \
<  16:       <CURSOR>})
---
>  15:                           {'on_application': on_application, 'known_symbols': symbol_dictionary.symbol_dictionary(), \
>  16:                            <CURSOR>})
6883,6885c6890,6892
<  15:       {'on_application': on_application, 'known_symbols': symbol_dictionary.symbol_dictionary(), \
<  16:       'language_specific_aliases': {}, \
<  17:       <CURSOR>})
---
>  15:                           {'on_application': on_application, 'known_symbols': symbol_dictionary.symbol_dictionary(), \
>  16:                            'language_specific_aliases': {}, \
>  17:                            <CURSOR>})
6899,6902c6906,6909
< >  15:       {'on_application': on_application, 'known_symbols': symbol_dictionary.symbol_dictionary(), \
<  16:       'language_specific_aliases': {}, \
<  17:       'last_loaded_language': none, \
<  18:       <CURSOR>})
---
> >  15:                           {'on_application': on_application, 'known_symbols': symbol_dictionary.symbol_dictionary(), \
>  16:                            'language_specific_aliases': {}, \
>  17:                            'last_loaded_language': none, \
>  18:                            <CURSOR>})
6906,6909c6913,6916
<  16:       'language_specific_aliases': {}, \
<  17:       'last_loaded_language': none, \
<  18:       'symbol_dictionary_pickle_file': symbol_dictionary_pickle_file}, \
<  19:       <CURSOR>)
---
>  16:                            'language_specific_aliases': {}, \
>  17:                            'last_loaded_language': none, \
>  18:                            'symbol_dictionary_pickle_file': symbol_dictionary_pickle_file}, \
>  19:                           <CURSOR>)
6913,6915c6920,6922
<  18:       'symbol_dictionary_pickle_file': symbol_dictionary_pickle_file}, \
<  19:       attributes)
<  20:       
---
>  18:                            'symbol_dictionary_pickle_file': symbol_dictionary_pickle_file}, \
>  19:                           attributes)
>  20: 
6920,6923c6927,6930
<  18:       'symbol_dictionary_pickle_file': symbol_dictionary_pickle_file}, \
<  19:       attributes)
<  20:       
<  21:    <CURSOR>
---
>  18:                            'symbol_dictionary_pickle_file': symbol_dictionary_pickle_file}, \
>  19:                           attributes)
>  20: 
>  21: <CURSOR>   
6947,6950c6954,6957
< >  19:       attributes)
<  20:       
<  21:    def spoken_form_regular_expression(self, spoken_form):
<  22:       <CURSOR>
---
> >  19:                           attributes)
>  20: 
>  21: def spoken_form_regular_expression(self, spoken_form):
>  22:    <CURSOR>
6975,6978c6982,6985
< >  19:       attributes)
<  20:       
<  21:    def spoken_form_regular_expression(self, spoken_form):
<  22:       words = re.split(<CURSOR>)
---
> >  19:                           attributes)
>  20: 
>  21: def spoken_form_regular_expression(self, spoken_form):
>  22:    words = re.split(<CURSOR>)
6982,6985c6989,6992
<  20:       
<  21:    def spoken_form_regular_expression(self, spoken_form):
<  22:       words = re.split('\s+', spoken_form)
<  23:       <CURSOR>
---
>  20: 
>  21: def spoken_form_regular_expression(self, spoken_form):
>  22:    words = re.split('\s+', spoken_form)
>  23:    <CURSOR>
7000,7003c7007,7010
< >  21:    def spoken_form_regular_expression(self, spoken_form):
<  22:       words = re.split('\s+', spoken_form)
<  23:       re = ''
<  24:       <CURSOR>
---
> >  21: def spoken_form_regular_expression(self, spoken_form):
>  22:    words = re.split('\s+', spoken_form)
>  23:    re = ''
>  24:    <CURSOR>
7017,7020c7024,7027
< >  22:       words = re.split('\s+', spoken_form)
<  23:       re = ''
<  24:       for a_word in words:
<  25:          <CURSOR>
---
> >  22:    words = re.split('\s+', spoken_form)
>  23:    re = ''
>  24:    for a_word in words:
>  25:       <CURSOR>
7031,7034c7038,7041
< >  23:       re = ''
<  24:       for a_word in words:
<  25:          first = a_word[0]
<  26:          <CURSOR>
---
> >  23:    re = ''
>  24:    for a_word in words:
>  25:       first = a_word[0]
>  26:       <CURSOR>
7046,7049c7053,7056
< >  24:       for a_word in words:
<  25:          first = a_word[0]
<  26:          re = a_word[1: ]
<  27:          <CURSOR>
---
> >  24:    for a_word in words:
>  25:       first = a_word[0]
>  26:       re = a_word[1: ]
>  27:       <CURSOR>
7063,7066c7070,7073
< >  24:       for a_word in words:
<  25:          first = a_word[0]
<  26:          re = a_word[1: ]
<  27:          regular_expression_this_word = '<CURSOR>'
---
> >  24:    for a_word in words:
>  25:       first = a_word[0]
>  26:       re = a_word[1: ]
>  27:       regular_expression_this_word = '<CURSOR>'
7077,7080c7084,7087
< >  24:       for a_word in words:
<  25:          first = a_word[0]
<  26:          re = a_word[1: ]
<  27:          regular_expression_this_word = '[' + string.lower(first<CURSOR>)
---
> >  24:    for a_word in words:
>  25:       first = a_word[0]
>  26:       re = a_word[1: ]
>  27:       regular_expression_this_word = '[' + string.lower(first<CURSOR>)
7091,7094c7098,7101
< >  25:          first = a_word[0]
<  26:          re = a_word[1: ]
<  27:          regular_expression_this_word = '[' + string.lower(first) + string.upper(first)
<  28:          <CURSOR>
---
> >  25:       first = a_word[0]
>  26:       re = a_word[1: ]
>  27:       regular_expression_this_word = '[' + string.lower(first) + string.upper(first)
>  28:       <CURSOR>
7109,7112c7116,7119
< >  26:          re = a_word[1: ]
<  27:          regular_expression_this_word = '[' + string.lower(first) + string.upper(first)
<  28:          if not re == '':
<  29:             <CURSOR>
---
> >  26:       re = a_word[1: ]
>  27:       regular_expression_this_word = '[' + string.lower(first) + string.upper(first)
>  28:       if not re == '':
>  29:          <CURSOR>
7138,7141c7145,7148
< >  27:          regular_expression_this_word = '[' + string.lower(first) + string.upper(first)
<  28:          if not re == '':
<  29:             re = re + '\s*'
<  30:             <CURSOR>
---
> >  27:       regular_expression_this_word = '[' + string.lower(first) + string.upper(first)
>  28:       if not re == '':
>  29:          re = re + '\s*'
>  30:          <CURSOR>
7167,7170c7174,7177
< >  28:          if not re == '':
<  29:             re = re + '\s*'
<  30:             re = re + regular_expression_this_word
<  31:             <CURSOR>
---
> >  28:       if not re == '':
>  29:          re = re + '\s*'
>  30:          re = re + regular_expression_this_word
>  31:          <CURSOR>
7174,7177c7181,7184
<  28:          if not re == '':
<  29:             re = re + '\s*'
<  30:             re = re + regular_expression_this_word
<  31:          <CURSOR>
---
>  28:       if not re == '':
>  29:          re = re + '\s*'
>  30:          re = re + regular_expression_this_word
>  31: <CURSOR>      
7192,7195c7199,7202
< >  29:             re = re + '\s*'
<  30:             re = re + regular_expression_this_word
<  31:          return re
<  32:          <CURSOR>
---
> >  29:          re = re + '\s*'
>  30:          re = re + regular_expression_this_word
>  31: return re
>  32: <CURSOR>
7216,7219c7223,7226
< >  30:             re = re + regular_expression_this_word
<  31:          return re
<  32:          if not this_word:
<  33:             this_word = 'hello<CURSOR>'
---
> >  30:          re = re + regular_expression_this_word
>  31: return re
>  32: if not this_word:
>  33:    this_word = 'hello<CURSOR>'
7230,7233c7237,7240
< >  32:          if not this_word:
<  33:             this_word = 'hello'
<  34:          elif this_word == hi: 
<  35:             <CURSOR>
---
> >  32: if not this_word:
>  33:    this_word = 'hello'
>  34: elif this_word == hi:
>  35:    <CURSOR>
7244,7247c7251,7254
< >  34:          elif this_word == hi: 
<  35:             this_word = greetings
<  36:          else:
<  37:             <CURSOR>
---
> >  34: elif this_word == hi:
>  35:    this_word = greetings
>  36: else:
>  37:    <CURSOR>
7258,7261c7265,7268
< >  35:             this_word = greetings
<  36:          else:
<  37:             this_word = 'done'
<  38:             <CURSOR>
---
> >  35:    this_word = greetings
>  36: else:
>  37:    this_word = 'done'
>  38:    <CURSOR>
7275,7278c7282,7285
< >  36:          else:
<  37:             this_word = 'done'
<  38:             try:
<  39:                some_function(<CURSOR>)
---
> >  36: else:
>  37:    this_word = 'done'
>  38:    try:
>  39:       some_function(<CURSOR>)
7289,7292c7296,7299
< >  38:             try:
<  39:                some_function()
<  40:             except : 
<  41:                print 'error<CURSOR>'
---
> >  38:    try:
>  39:       some_function()
>  40: except :
>  41:    print 'error<CURSOR>'
7306,7309c7313,7316
< >  40:             except : 
<  41:                print 'error'
<  42:             finally:
<  43:                print 'all_right<CURSOR>'
---
> >  40: except :
>  41:    print 'error'
>  42: finally:
>  43:    print 'all_right<CURSOR>'
7332c7339
< >>> Testing console command: compile_symbols([r'H:\Projects\VoiceCode\VCode\Data\TestData\small_buff.c'])
---
> >>> Testing console command: compile_symbols([r'C:\Eclipse\workspace\VCode\Data\TestData\small_buff.c'])
7417c7424
< >>> Testing console command: open_file(r'H:\Projects\VoiceCode\VCode\Data\TestData\large_buff.py')
---
> >>> Testing console command: open_file(r'C:\Eclipse\workspace\VCode\Data\TestData\large_buff.py')
9416c9423
<   1: nothing left<CURSOR>
---
>   1: #othing left<CURSOR> This is a small test buffer for Python
9418c9425,9446
< *** End of source buffer ***
---
> 
> *******************************************************************************
> * Name        : temp
> * Description : temporary test
> *******************************************************************************
> 
> Compiling symbols for file '%VCODE_HOME%\Config\py_std_sym.py'
> Compiling symbols for file '%VCODE_HOME%\Config\py_std_sym.py'
> *** Start of source buffer ***
>   1: <CURSOR>/* This is a small test buffer for C */
>   2: 
>   3: 
>   4: void move(float x, y)
> 
> 
> >>> Testing console command: goto_line(1)
> 
> *** Start of source buffer ***
>   1: <CURSOR>/* This is a small test buffer for C */
>   2: 
>   3: 
>   4: void move(float x, y)
9423c9451
< Test suite completed in:  1461.62 secs
---
> Test suite completed in:  712.164000034 secs
9424a9453,9454
> Message loop ended, cleaning up
> cleanup method is  <method OwnerObject.cleanup of ExtLoopWin32NewMediator instance at bb9e28>
9425a9456
> ExtLoopWin32.run returning
