*******************************************************************************
* Name        : CmdInterp
* Description : self-test for CmdInterp.py
*******************************************************************************



>>> Testing command interpreter



>>> Interpreting 'for loop index loop body' in a C buffer

>>> Current buffer is:

*** Start of source buffer ***
  1: /* This is a small test buffer for C */
  2: 
  3: <CURSOR>
  4: void move(float x, y)
  5: {
  6:   move_horiz(x);
  7:   move_vert(y)
  8:   horiz_pos = 0;
  9:   this_sym_is_unres = 0;
 10:   this_sym_is_unres_too = 0;
 11:   this_sym_has_an_other_abbrev = 0;
 12:   f_name;
 13:   f_name2();
 14:   API_function(1);
 15:   API_function(2);
 16: }
 17: 

*** End of source buffer ***








Associate ' index' with symbol (Enter selection):

  '0': no association
  '1': index (*new*)
  '2': Index (*new*)
  '3': INDEX (*new*)

> 
>>> Buffer is now:
*** Start of source buffer ***
  1: /* This is a small test buffer for C */
  2: 
  3:    for (index=0;  <= ; ++)
  4:    {
  5: <CURSOR>   
  5:    }
  6:    
  7: void move(float x, y)
  8: {
  9:   move_horiz(x);
 10:   move_vert(y)
 11:   horiz_pos = 0;
 12:   this_sym_is_unres = 0;
 13:   this_sym_is_unres_too = 0;
 14:   this_sym_has_an_other_abbrev = 0;
 15:   f_name;
 16:   f_name2();
 17:   API_function(1);
 18:   API_function(2);
 19: }
 20: 

*** End of source buffer ***

>>> Interpreting 'for loop index loop body' in a Python buffer

>>> Current buffer is:

*** Start of source buffer ***
  1: # This is a small test buffer for Python
  2: 
  3: 
  4: <CURSOR>
  5: class AClass(ASuper):
  6:     """This is a dummy class"""
  7:     
  8:     def a_method(self, x):
  9:         print '... and this is a dummy class'
 10: 

*** End of source buffer ***



>>> Buffer is now:
*** Start of source buffer ***
  1: # This is a small test buffer for Python
  2: 
  3: 
  4:    for index:
  5:    
  6: <CURSOR>class AClass(ASuper):
  6:     """This is a dummy class"""
  7:     
  8:     def a_method(self, x):
  9:         print '... and this is a dummy class'
 10: 

*** End of source buffer ***


*******************************************************************************
* Name        : EdSim
* Description : self-test for EdSim.py
*******************************************************************************

>>> Testing EdSim.py


>>> Opening a buffer
*** Start of source buffer ***
<CURSOR>/* This is a small test buffer for C */
  0: 
  1: 
  2: void move(float x, y)
  3: {
  4:   move_horiz(x);
  5:   move_vert(y)
  6:   horiz_pos = 0;
  7:   this_sym_is_unres = 0;
  8:   this_sym_is_unres_too = 0;
  9:   this_sym_has_an_other_abbrev = 0;
 10:   f_name;
 11:   f_name2();
 12:   API_function(1);
 13:   API_function(2);
 14: }
 15: 

*** End of source buffer ***


>>> Moving to position 5
*** Start of source buffer ***
  1: /* Th<CURSOR>is is a small test buffer for C */
  1: 
  2: 
  3: void move(float x, y)
  4: {
  5:   move_horiz(x);
  6:   move_vert(y)
  7:   horiz_pos = 0;
  8:   this_sym_is_unres = 0;
  9:   this_sym_is_unres_too = 0;
 10:   this_sym_has_an_other_abbrev = 0;
 11:   f_name;
 12:   f_name2();
 13:   API_function(1);
 14:   API_function(2);
 15: }
 16: 

*** End of source buffer ***


>>> Testing breadcrumbs

>>> Dropping one here
*** Start of source buffer ***
  1: /* Th<CURSOR>is is a small test buffer for C */
  1: 
  2: 
  3: void move(float x, y)
  4: {
  5:   move_horiz(x);
  6:   move_vert(y)
  7:   horiz_pos = 0;
  8:   this_sym_is_unres = 0;
  9:   this_sym_is_unres_too = 0;
 10:   this_sym_has_an_other_abbrev = 0;
 11:   f_name;
 12:   f_name2();
 13:   API_function(1);
 14:   API_function(2);
 15: }
 16: 

*** End of source buffer ***

>>> Dropping one here
*** Start of source buffer ***
  1: /* This is<CURSOR> a small test buffer for C */
  1: 
  2: 
  3: void move(float x, y)
  4: {
  5:   move_horiz(x);
  6:   move_vert(y)
  7:   horiz_pos = 0;
  8:   this_sym_is_unres = 0;
  9:   this_sym_is_unres_too = 0;
 10:   this_sym_has_an_other_abbrev = 0;
 11:   f_name;
 12:   f_name2();
 13:   API_function(1);
 14:   API_function(2);
 15: }
 16: 

*** End of source buffer ***

>>> Popping 2 crumbs -> end up here:
*** Start of source buffer ***
  1: /* Th<CURSOR>is is a small test buffer for C */
  1: 
  2: 
  3: void move(float x, y)
  4: {
  5:   move_horiz(x);
  6:   move_vert(y)
  7:   horiz_pos = 0;
  8:   this_sym_is_unres = 0;
  9:   this_sym_is_unres_too = 0;
 10:   this_sym_has_an_other_abbrev = 0;
 11:   f_name;
 12:   f_name2();
 13:   API_function(1);
 14:   API_function(2);
 15: }
 16: 

*** End of source buffer ***

>>> Dropping one here
*** Start of source buffer ***
  1: /* Th<CURSOR>is is a small test buffer for C */
  1: 
  2: 
  3: void move(float x, y)
  4: {
  5:   move_horiz(x);
  6:   move_vert(y)
  7:   horiz_pos = 0;
  8:   this_sym_is_unres = 0;
  9:   this_sym_is_unres_too = 0;
 10:   this_sym_has_an_other_abbrev = 0;
 11:   f_name;
 12:   f_name2();
 13:   API_function(1);
 14:   API_function(2);
 15: }
 16: 

*** End of source buffer ***

>>> Dropping one here
*** Start of source buffer ***
  1: /* This is<CURSOR> a small test buffer for C */
  1: 
  2: 
  3: void move(float x, y)
  4: {
  5:   move_horiz(x);
  6:   move_vert(y)
  7:   horiz_pos = 0;
  8:   this_sym_is_unres = 0;
  9:   this_sym_is_unres_too = 0;
 10:   this_sym_has_an_other_abbrev = 0;
 11:   f_name;
 12:   f_name2();
 13:   API_function(1);
 14:   API_function(2);
 15: }
 16: 

*** End of source buffer ***
*** Start of source buffer ***
  1: /* This is a small t<CURSOR>est buffer for C */
  1: 
  2: 
  3: void move(float x, y)
  4: {
  5:   move_horiz(x);
  6:   move_vert(y)
  7:   horiz_pos = 0;
  8:   this_sym_is_unres = 0;
  9:   this_sym_is_unres_too = 0;
 10:   this_sym_has_an_other_abbrev = 0;
 11:   f_name;
 12:   f_name2();
 13:   API_function(1);
 14:   API_function(2);
 15: }
 16: 

*** End of source buffer ***

>>> Popping 1 crumb -> end up here...
*** Start of source buffer ***
  1: /* This is<CURSOR> a small test buffer for C */
  1: 
  2: 
  3: void move(float x, y)
  4: {
  5:   move_horiz(x);
  6:   move_vert(y)
  7:   horiz_pos = 0;
  8:   this_sym_is_unres = 0;
  9:   this_sym_is_unres_too = 0;
 10:   this_sym_has_an_other_abbrev = 0;
 11:   f_name;
 12:   f_name2();
 13:   API_function(1);
 14:   API_function(2);
 15: }
 16: 

*** End of source buffer ***


>>> Testing code indentation. Inserting for loop.








*** Start of source buffer ***
  1: /* This is a small test buffer for C */
  2: 
  3: 
  4:    for (ii=0; ii <= maxValue; ii++)
  5:    {
  6:    <CURSOR>
  7:    }
  8:    void move(float x, y)
  9: {
 10:   move_horiz(x);
 11:   move_vert(y)
 12:   horiz_pos = 0;
 13:   this_sym_is_unres = 0;
 14:   this_sym_is_unres_too = 0;
 15:   this_sym_has_an_other_abbrev = 0;
 16:   f_name;
 17:   f_name2();
 18:   API_function(1);
 19:   API_function(2);
 20: }
 21: 

*** End of source buffer ***


*******************************************************************************
* Name        : Object
* Description : self-test for Object.py
*******************************************************************************

Testing exceptions for get/set


Trying to get the value of attribute 'name', $PY_DEBUG_OBJECT=None
   -> Caught NO AttributeError exception. obj.name=Alain, x=Alain


Trying to set the value of attribute 'name', $PY_DEBUG_OBJECT=None
   -> Caught NO AttributeError exception. obj.name=999, x=0


Trying to get the value of attribute 'nonexistant', $PY_DEBUG_OBJECT=None
   -> Caught AttributeError exception: '[{'args': ('nonexistant',)}]'


Trying to set the value of attribute 'nonexistant', $PY_DEBUG_OBJECT=None
   -> Caught NO AttributeError exception. obj.nonexistant=999, x=0

Testing inheritance of constructor arguments
   Employee1(name='Alain', salary='not enough') -> {'salary': 'not enough', 'name': 'Alain', 'citizenship': None}

Omitting an inherited compulsory argument
   Employee1(salary='not enough') -> Test OK. Correct exception was raised: 'Bad call to __main__.Person1.__init__.
Called with arguments: {}
Did you forget to specify the value of a compulsory  argument inherited from __main__.Person1.__init__?'

Redefining default value of *citizenship*
   MyPerson(name='Alain') -> result={'marital_status': None, 'name': 'Alain', 'citizenship': 'Canadian eh?'}

Overriding redefined default value of *citizenship*
   MyPerson(name='Alain', citizenship='US citizen') -> result={'marital_status': None, 'name': 'Alain', 'citizenship': 'US citizen'}

Enforcing 'Canadian eh?' as the value of *citizenship*
   Canadian(name='Alain') -> result={'name': 'Alain', 'citizenship': 'Canadian eh?'}

Trying to change enforced value 'Canadian eh?' of *citizenship*
   Canadian(citizenship='US') -> Test OK. EnforcedConstrArg was correctly raised: 'The value of argument citizenship in <class __main__.Canadian at 850860>.__init__ is enforced at 'Canadian eh?', and cannot be changed.'

Person2.__init__ received init_file=C:/temp.txt
Class with private *init_file* attribute*
   Person2(init_file='C:/temp.txt') -> result={'name': None, 'citizenship': None}

Subclassing from non-standard class AnimatedCharacter.*
   AnimatedPerson(name='Alain', animation_file='C:/People/Alain.dat') -> result={'name': 'Alain', 'frames_per_sec': 40, 'animation_file': 'C:/People/Alain.dat', 'citizenship': None}


*******************************************************************************
* Name        : SymDict
* Description : self-test for SymDict.py
*******************************************************************************

*** Compiling symbols from file: D:\VoiceCode\VCode.vg3_trans\Data\TestData\small_buff.c ***


Parsed symbols are: 
API_function: ['api function']
f_name: ['f name']
f_name2: ['f name 2']
float: ['float']
horiz_pos: ['horiz pos', 'horiz position', 'horiz positionning', 'horizontal pos', 'horizontal position', 'horizontal positionning', 'horizontally pos', 'horizontally position', 'horizontally positionning']
move: ['move']
move_horiz: ['move horiz', 'move horizontal', 'move horizontally']
move_vert: ['move vert', 'move vertical', 'move vertically']
this_sym_has_an_other_abbrev: ['this sym has an other abbrev']
this_sym_is_unres: ['this sym is unres']
this_sym_is_unres_too: ['this sym is unres too']
void: ['void']
x: ['x']
y: ['y']
_cached_symbols_as_one_string is:
    void  move  float  x  y  move_horiz  move_vert  horiz_pos  this_sym_is_unres  this_sym_is_unres_too  this_sym_has_an_other_abbrev  f_name  f_name2  API_function 
Unresolved abbreviations are:
'abbrev': appears in ['this_sym_has_an_other_abbrev']
'f': appears in ['f_name', 'f_name2']
'unres': appears in ['this_sym_is_unres', 'this_sym_is_unres_too']
'x': appears in ['x']
'y': appears in ['y']

*** End of compilation test ***

*** Compiling symbols from file: D:\VoiceCode\VCode.vg3_trans\Data\TestData\large_buff.py ***


Parsed symbols are: 
AttributeError: ['attribute error']
LargeNonObject: ['large non object']
LargeObject: ['large object']
Object: ['object']
SmallNonObject: ['small non object']
SmallObject: ['small object']
__bases__: ['bases']
__dict__: ['dict', 'dictionary']
__init__: ['init', 'initial', 'initialize']
__name__: ['name']
a_base: ['a base']
add_test: ['add test']
age: ['age']
an_attr_def: ['an attr def', 'an attr definition', 'an attr default', 'an attr define', 'an attr defined', 'an attr deaf', 'an attribute def', 'an attribute definition', 'an attribute default', 'an attribute define', 'an attribute defined', 'an attribute deaf']
an_attr_init: ['an attr init', 'an attr initial', 'an attr initialize', 'an attribute init', 'an attribute initial', 'an attribute initialize']
and: ['and']
attrs: ['attributes']
attrs_superclasses: ['attributes superclasses']
attrs_this_class: ['attributes this class']
autoTst: ['auto tst']
auto_test: ['auto test']
class: ['class']
code: ['code']
code_file: ['code file']
deep_construct: ['deep construct']
def: ['def', 'definition', 'default', 'define', 'defined', 'deaf']
else: ['else']
environ: ['environ', 'environment']
exc: ['exc', 'exception']
except: ['except']
exceptions: ['exceptions']
exclude_bases: ['exclude bases']
exec: ['exec']
execfile: ['execfile']
expandvars: ['expandvars']
for: ['for']
has_key: ['has key']
her_age: ['her age']
if: ['if']
import: ['import']
in: ['in']
index: ['index']
init_attrs: ['init attributes', 'initial attributes', 'initialize attributes']
items: ['items']
name: ['name']
not: ['not']
num_times: ['num times']
obj: ['obj']
operation: ['operation']
os: ['os', 'operating system', 'o. s.']
pass: ['pass']
posixpath: ['posixpath']
profConstrLargeNonObj: ['prof constr large non obj', 'profile constr large non obj', 'profiling constr large non obj', 'professional constr large non obj']
profConstrLargeObj: ['prof constr large obj', 'profile constr large obj', 'profiling constr large obj', 'professional constr large obj']
profConstrSmallNonObj: ['prof constr small non obj', 'profile constr small non obj', 'profiling constr small non obj', 'professional constr small non obj']
profConstrSmallObj: ['prof constr small obj', 'profile constr small obj', 'profiling constr small obj', 'professional constr small obj']
profGetLargeNonObj: ['prof get large non obj', 'profile get large non obj', 'profiling get large non obj', 'professional get large non obj']
profGetLargeObj: ['prof get large obj', 'profile get large obj', 'profiling get large obj', 'professional get large obj']
profGetSmallNonObj: ['prof get small non obj', 'profile get small non obj', 'profiling get small non obj', 'professional get small non obj']
profGetSmallObj: ['prof get small obj', 'profile get small obj', 'profiling get small obj', 'professional get small obj']
profObject: ['prof object', 'profile object', 'profiling object', 'professional object']
profSetLargeNonObj: ['prof set large non obj', 'profile set large non obj', 'profiling set large non obj', 'professional set large non obj']
profSetLargeObj: ['prof set large obj', 'profile set large obj', 'profiling set large obj', 'professional set large obj']
profSetSmallNonObj: ['prof set small non obj', 'profile set small non obj', 'profiling set small non obj', 'professional set small non obj']
profSetSmallObj: ['prof set small obj', 'profile set small obj', 'profiling set small obj', 'professional set small obj']
prof_test: ['prof test', 'profile test', 'profiling test', 'professional test']
profile: ['profile']
range: ['range']
run: ['run']
self: ['self']
self_test: ['self test']
sep: ['sep']
setattr: ['setattr']
stdout: ['stdout']
str: ['str']
sys: ['sys', 'system']
this_class: ['this class']
try: ['try']
try_attribute: ['try attribute']
write: ['write']
x: ['x']
_cached_symbols_as_one_string is:
    autoTst  import  auto_test  exceptions  os  posixpath  profile  sys  class  Object  if  environ  has_key  and  code_file  expandvars  sep  execfile  def  __init__  self  pass  deep_construct  this_class  attrs_this_class  attrs_superclasses  exclude_bases  for  a_base  in  __bases__  not  an_attr_def  items  __dict__  init_attrs  attrs  an_attr_init  setattr  SmallObject  name  age  LargeObject  SmallNonObject  LargeNonObject  profConstrSmallObj  num_times  index  range  obj  profConstrLargeObj  profConstrSmallNonObj  profConstrLargeNonObj  profGetSmallObj  her_age  profGetLargeObj  profGetSmallNonObj  profGetLargeNonObj  profSetSmallObj  profSetLargeObj  profSetSmallNonObj  profSetLargeNonObj  profObject  try_attribute  operation  stdout  write  code  else  x  try  exec  except  AttributeError  exc  str  prof_test  run  self_test  add_test  __name__ 
Unresolved abbreviations are:
'abbrev': appears in ['this_sym_has_an_other_abbrev']
'constr': appears in ['profConstrLargeNonObj', 'profConstrSmallObj', 'profConstrLargeObj', 'profConstrSmallNonObj']
'execfile': appears in ['execfile']
'expandvars': appears in ['expandvars']
'f': appears in ['f_name', 'f_name2']
'obj': appears in ['profConstrLargeObj', 'profSetLargeNonObj', 'profGetLargeNonObj', 'profGetLargeObj', 'profConstrSmallObj', 'profSetLargeObj', 'profGetSmallNonObj', 'obj', 'profConstrLargeNonObj', 'profSetSmallObj', 'profSetSmallNonObj', 'profConstrSmallNonObj', 'profGetSmallObj']
'posixpath': appears in ['posixpath']
'sep': appears in ['sep']
'setattr': appears in ['setattr']
'stdout': appears in ['stdout']
'str': appears in ['str']
'superclasses': appears in ['attrs_superclasses']
'tst': appears in ['autoTst']
'unres': appears in ['this_sym_is_unres', 'this_sym_is_unres_too']
'x': appears in ['x']
'y': appears in ['y']

*** End of compilation test ***

*** Pseudo symbol match test***
   Source files are: ['D:\\VoiceCode\\VCode.vg3_trans\\Data\\TestData\\large_buff.py']
   Symbols are: ['set attribute', 'expand variables', 'execute file', 'profile Constructor Large Object', 'profile construct large object', 'auto test']


'set attribute' matches: [setattr, set_attribute, SetAttribute, setAttribute, SET_ATTRIBUTE, setattribute, SETATTRIBUTE, ]
'expand variables' matches: [expandvars, expand_variables, ExpandVariables, expandVariables, EXPAND_VARIABLES, expandvariables, EXPANDVARIABLES, ]
'execute file' matches: [execfile, execute_file, ExecuteFile, executeFile, EXECUTE_FILE, executefile, EXECUTEFILE, ]
'profile Constructor Large Object' matches: [profConstrLargeObj, profile_Constructor_Large_Object, ProfileConstructorLargeObject, profileConstructorLargeObject, PROFILE_CONSTRUCTOR_LARGE_OBJECT, profileconstructorlargeobject, PROFILECONSTRUCTORLARGEOBJECT, ]
'profile construct large object' matches: [profConstrLargeObj, profile_construct_large_object, ProfileConstructLargeObject, profileConstructLargeObject, PROFILE_CONSTRUCT_LARGE_OBJECT, profileconstructlargeobject, PROFILECONSTRUCTLARGEOBJECT, ]
'auto test' matches: [auto_test, autoTst, AutoTest, autoTest, AUTO_TEST, autotest, AUTOTEST, ]

*** End of Pseudo Symbol Match test ***


*** Accept symbol match test. source='D:\VoiceCode\VCode.vg3_trans\Data\TestData\small_buff.c' ***
Parsed symbols are: 
API_function: ['api function']
f_name: ['f name']
f_name2: ['f name 2']
float: ['float']
horiz_pos: ['horiz pos', 'horiz position', 'horiz positionning', 'horizontal pos', 'horizontal position', 'horizontal positionning', 'horizontally pos', 'horizontally position', 'horizontally positionning']
move: ['move']
move_horiz: ['move horiz', 'move horizontal', 'move horizontally']
move_vert: ['move vert', 'move vertical', 'move vertically']
this_sym_has_an_other_abbrev: ['this sym has an other abbrev']
this_sym_is_unres: ['this sym is unres']
this_sym_is_unres_too: ['this sym is unres too']
void: ['void']
x: ['x']
y: ['y']
_cached_symbols_as_one_string is:
    void  move  float  x  y  move_horiz  move_vert  horiz_pos  this_sym_is_unres  this_sym_is_unres_too  this_sym_has_an_other_abbrev  f_name  f_name2  API_function 


Unresolved abbreviations are:
'abbrev': appears in ['this_sym_has_an_other_abbrev']
'constr': appears in ['profConstrLargeNonObj', 'profConstrSmallObj', 'profConstrLargeObj', 'profConstrSmallNonObj']
'execfile': appears in ['execfile']
'expandvars': appears in ['expandvars']
'f': appears in ['f_name', 'f_name2']
'obj': appears in ['profConstrLargeObj', 'profSetLargeNonObj', 'profGetLargeNonObj', 'profGetLargeObj', 'profConstrSmallObj', 'profSetLargeObj', 'profGetSmallNonObj', 'obj', 'profConstrLargeNonObj', 'profSetSmallObj', 'profSetSmallNonObj', 'profConstrSmallNonObj', 'profGetSmallObj']
'posixpath': appears in ['posixpath']
'sep': appears in ['sep']
'setattr': appears in ['setattr']
'stdout': appears in ['stdout']
'str': appears in ['str']
'superclasses': appears in ['attrs_superclasses']
'tst': appears in ['autoTst']
'unres': appears in ['this_sym_is_unres', 'this_sym_is_unres_too']
'x': appears in ['x']
'y': appears in ['y']


Accepting: 'this symbol is unresolved' -> 'this_sym_is_unres', 


After accepting those symbols, known symbols are:

API_function: ['api function']
f_name: ['f name']
f_name2: ['f name 2']
float: ['float']
horiz_pos: ['horiz pos', 'horiz position', 'horiz positionning', 'horizontal pos', 'horizontal position', 'horizontal positionning', 'horizontally pos', 'horizontally position', 'horizontally positionning']
move: ['move']
move_horiz: ['move horiz', 'move horizontal', 'move horizontally']
move_vert: ['move vert', 'move vertical', 'move vertically']
this_sym_has_an_other_abbrev: ['this sym has an other abbrev']
this_sym_is_unres: ['this sym is unres', 'this sym is unresolved', 'this symbol is unres', 'this symbol is unresolved']
this_sym_is_unres_too: ['this sym is unres too', 'this sym is unresolved too', 'this symbol is unres too', 'this symbol is unresolved too']
void: ['void']
x: ['x']
y: ['y']
_cached_symbols_as_one_string is:
    void  move  float  x  y  move_horiz  move_vert  horiz_pos  this_sym_is_unres  this_sym_is_unres_too  this_sym_has_an_other_abbrev  f_name  f_name2  API_function 


Unresolved abbreviations are:
'abbrev': appears in ['this_sym_has_an_other_abbrev']
'constr': appears in ['profConstrLargeNonObj', 'profConstrSmallObj', 'profConstrLargeObj', 'profConstrSmallNonObj']
'execfile': appears in ['execfile']
'expandvars': appears in ['expandvars']
'f': appears in ['f_name', 'f_name2']
'obj': appears in ['profConstrLargeObj', 'profSetLargeNonObj', 'profGetLargeNonObj', 'profGetLargeObj', 'profConstrSmallObj', 'profSetLargeObj', 'profGetSmallNonObj', 'obj', 'profConstrLargeNonObj', 'profSetSmallObj', 'profSetSmallNonObj', 'profConstrSmallNonObj', 'profGetSmallObj']
'posixpath': appears in ['posixpath']
'sep': appears in ['sep']
'setattr': appears in ['setattr']
'stdout': appears in ['stdout']
'str': appears in ['str']
'superclasses': appears in ['attrs_superclasses']
'tst': appears in ['autoTst']
'x': appears in ['x']
'y': appears in ['y']

*** End of accept symbol match test ***



*******************************************************************************
* Name        : automatic_abbreviations
* Description : testing automatic creation of abbreviations
*******************************************************************************



>>> Testing console command: open_file('D:/blah.c')

WARNING: source file 'D:/blah.c' doesn't exist.
*** Start of source buffer ***
<CURSOR>
*** End of source buffer ***


>>> Testing console command: compile_symbols(['D:\VoiceCode\VCode.vg3_trans\Data\TestData\small_buff.c'])

Compiling symbols for file 'D:\VoiceCode\VCode.vg3_trans\Data\TestData\small_buff.c'
>>> Known symbols are: 
API_function: ['api function']
f_name: ['f name']
f_name2: ['f name 2']
float: ['float']
horiz_pos: ['horiz pos', 'horiz position', 'horiz positionning', 'horizontal pos', 'horizontal position', 'horizontal positionning', 'horizontally pos', 'horizontally position', 'horizontally positionning']
move: ['move']
move_horiz: ['move horiz', 'move horizontal', 'move horizontally']
move_vert: ['move vert', 'move vertical', 'move vertically']
this_sym_has_an_other_abbrev: ['this sym has an other abbrev']
this_sym_is_unres: ['this sym is unres']
this_sym_is_unres_too: ['this sym is unres too']
void: ['void']
x: ['x']
y: ['y']
_cached_symbols_as_one_string is:
    void  move  float  x  y  move_horiz  move_vert  horiz_pos  this_sym_is_unres  this_sym_is_unres_too  this_sym_has_an_other_abbrev  f_name  f_name2  API_function 


>>> Testing console command: print_abbreviations(1)

List of abbreviations

'arg' expands to ['argument']
'attr' expands to ['attribute']
'buff' expands to ['buffer']
'cmd' expands to ['command']
'cond' expands to ['condition']
'cont' expands to ['control']
'cpp' expands to ['c. plus plus']
'curr' expands to ['current']
'def' expands to ['definition', 'default', 'define', 'defined', 'deaf']
'dict' expands to ['dictionary']
'environ' expands to ['environment']
'exc' expands to ['exception']
'gen' expands to ['general', 'generic']
'getattr' expands to ['get attribute']
'horiz' expands to ['horizontal', 'horizontally']
'inc' expands to ['increment', 'include']
'init' expands to ['initial', 'initialize']
'interp' expands to ['interpreter']
'mtime' expands to ['m. time']
'os' expands to ['operating system', 'o. s.']
'pos' expands to ['position', 'positionning']
'prof' expands to ['profile', 'profiling', 'professional']
'py' expands to ['python']
'regexp' expands to ['regular expression']
'st' expands to ['standard']
'sys' expands to ['system']
'undef' expands to ['undefined']
'vc' expands to ['voice code']
'vert' expands to ['vertical', 'vertically']


List of unresolved abbreviations

'f': appears in ['f_name', 'f_name2']
'unres': appears in ['this_sym_is_unres', 'this_sym_is_unres_too']
'abbrev': appears in ['this_sym_has_an_other_abbrev']
'x': appears in ['x']
'y': appears in ['y']


>>> Testing console command: say('this symbol is unresolved comma', user_input='1\n')

Associate 'this symbol is unresolved' with symbol (Enter selection):

  '0': no association
  '1': this_sym_is_unres
  '2': this_symbol_is_unresolved (*new*)
  '3': ThisSymbolIsUnresolved (*new*)
  '4': thisSymbolIsUnresolved (*new*)
  '5': THIS_SYMBOL_IS_UNRESOLVED (*new*)
  '6': thissymbolisunresolved (*new*)
  '7': THISSYMBOLISUNRESOLVED (*new*)

> *** Start of source buffer ***
  1:    this_sym_is_unres, <CURSOR>
*** End of source buffer ***


>>> Testing console command: print_abbreviations(1)

List of abbreviations

'arg' expands to ['argument']
'attr' expands to ['attribute']
'buff' expands to ['buffer']
'cmd' expands to ['command']
'cond' expands to ['condition']
'cont' expands to ['control']
'cpp' expands to ['c. plus plus']
'curr' expands to ['current']
'def' expands to ['definition', 'default', 'define', 'defined', 'deaf']
'dict' expands to ['dictionary']
'environ' expands to ['environment']
'exc' expands to ['exception']
'gen' expands to ['general', 'generic']
'getattr' expands to ['get attribute']
'horiz' expands to ['horizontal', 'horizontally']
'inc' expands to ['increment', 'include']
'init' expands to ['initial', 'initialize']
'interp' expands to ['interpreter']
'mtime' expands to ['m. time']
'os' expands to ['operating system', 'o. s.']
'pos' expands to ['position', 'positionning']
'prof' expands to ['profile', 'profiling', 'professional']
'py' expands to ['python']
'regexp' expands to ['regular expression']
'st' expands to ['standard']
'sym' expands to ['symbol']
'sys' expands to ['system']
'undef' expands to ['undefined']
'unres' expands to ['unresolved']
'vc' expands to ['voice code']
'vert' expands to ['vertical', 'vertically']


List of unresolved abbreviations

'f': appears in ['f_name', 'f_name2']
'abbrev': appears in ['this_sym_has_an_other_abbrev']
'x': appears in ['x']
'y': appears in ['y']


>>> Testing console command: say('this symbol is unresolved too comma')

*** Start of source buffer ***
  1:    this_sym_is_unres, this_sym_is_unres_too, <CURSOR>
*** End of source buffer ***


>>> Testing console command: print_abbreviations(1)

List of abbreviations

'arg' expands to ['argument']
'attr' expands to ['attribute']
'buff' expands to ['buffer']
'cmd' expands to ['command']
'cond' expands to ['condition']
'cont' expands to ['control']
'cpp' expands to ['c. plus plus']
'curr' expands to ['current']
'def' expands to ['definition', 'default', 'define', 'defined', 'deaf']
'dict' expands to ['dictionary']
'environ' expands to ['environment']
'exc' expands to ['exception']
'gen' expands to ['general', 'generic']
'getattr' expands to ['get attribute']
'horiz' expands to ['horizontal', 'horizontally']
'inc' expands to ['increment', 'include']
'init' expands to ['initial', 'initialize']
'interp' expands to ['interpreter']
'mtime' expands to ['m. time']
'os' expands to ['operating system', 'o. s.']
'pos' expands to ['position', 'positionning']
'prof' expands to ['profile', 'profiling', 'professional']
'py' expands to ['python']
'regexp' expands to ['regular expression']
'st' expands to ['standard']
'sym' expands to ['symbol']
'sys' expands to ['system']
'undef' expands to ['undefined']
'unres' expands to ['unresolved']
'vc' expands to ['voice code']
'vert' expands to ['vertical', 'vertically']


List of unresolved abbreviations

'f': appears in ['f_name', 'f_name2']
'abbrev': appears in ['this_sym_has_an_other_abbrev']
'x': appears in ['x']
'y': appears in ['y']


>>> Testing console command: say('file name comma', user_input='1\n')

Associate 'file name' with symbol (Enter selection):

  '0': no association
  '1': f_name
  '2': file_name (*new*)
  '3': FileName (*new*)
  '4': fileName (*new*)
  '5': FILE_NAME (*new*)
  '6': filename (*new*)
  '7': FILENAME (*new*)

> WARNING: abbreviation 'f' not added (length < 2)
*** Start of source buffer ***
  1:    this_sym_is_unres, this_sym_is_unres_too, f_name, <CURSOR>
*** End of source buffer ***


>>> Testing console command: print_abbreviations(1)

List of abbreviations

'arg' expands to ['argument']
'attr' expands to ['attribute']
'buff' expands to ['buffer']
'cmd' expands to ['command']
'cond' expands to ['condition']
'cont' expands to ['control']
'cpp' expands to ['c. plus plus']
'curr' expands to ['current']
'def' expands to ['definition', 'default', 'define', 'defined', 'deaf']
'dict' expands to ['dictionary']
'environ' expands to ['environment']
'exc' expands to ['exception']
'gen' expands to ['general', 'generic']
'getattr' expands to ['get attribute']
'horiz' expands to ['horizontal', 'horizontally']
'inc' expands to ['increment', 'include']
'init' expands to ['initial', 'initialize']
'interp' expands to ['interpreter']
'mtime' expands to ['m. time']
'os' expands to ['operating system', 'o. s.']
'pos' expands to ['position', 'positionning']
'prof' expands to ['profile', 'profiling', 'professional']
'py' expands to ['python']
'regexp' expands to ['regular expression']
'st' expands to ['standard']
'sym' expands to ['symbol']
'sys' expands to ['system']
'undef' expands to ['undefined']
'unres' expands to ['unresolved']
'vc' expands to ['voice code']
'vert' expands to ['vertical', 'vertically']


List of unresolved abbreviations

'f': appears in ['f_name', 'f_name2']
'abbrev': appears in ['this_sym_has_an_other_abbrev']
'x': appears in ['x']
'y': appears in ['y']


>>> Testing console command: say('application programming interface function comma', user_input='1\n')

Associate 'application programming interface function' with symbol (Enter selection):

  '0': no association
  '1': API_function
  '2': application_programming_interface_function (*new*)
  '3': ApplicationProgrammingInterfaceFunction (*new*)
  '4': applicationProgrammingInterfaceFunction (*new*)
  '5': APPLICATION_PROGRAMMING_INTERFACE_FUNCTION (*new*)
  '6': applicationprogramminginterfacefunction (*new*)
  '7': APPLICATIONPROGRAMMINGINTERFACEFUNCTION (*new*)

> *** Start of source buffer ***
  1:    this_sym_is_unres, this_sym_is_unres_too, f_name, API_function, <CURSOR>
*** End of source buffer ***


>>> Testing console command: print_abbreviations(1)

List of abbreviations

'a p i' expands to ['application programming interface']
'arg' expands to ['argument']
'attr' expands to ['attribute']
'buff' expands to ['buffer']
'cmd' expands to ['command']
'cond' expands to ['condition']
'cont' expands to ['control']
'cpp' expands to ['c. plus plus']
'curr' expands to ['current']
'def' expands to ['definition', 'default', 'define', 'defined', 'deaf']
'dict' expands to ['dictionary']
'environ' expands to ['environment']
'exc' expands to ['exception']
'gen' expands to ['general', 'generic']
'getattr' expands to ['get attribute']
'horiz' expands to ['horizontal', 'horizontally']
'inc' expands to ['increment', 'include']
'init' expands to ['initial', 'initialize']
'interp' expands to ['interpreter']
'mtime' expands to ['m. time']
'os' expands to ['operating system', 'o. s.']
'pos' expands to ['position', 'positionning']
'prof' expands to ['profile', 'profiling', 'professional']
'py' expands to ['python']
'regexp' expands to ['regular expression']
'st' expands to ['standard']
'sym' expands to ['symbol']
'sys' expands to ['system']
'undef' expands to ['undefined']
'unres' expands to ['unresolved']
'vc' expands to ['voice code']
'vert' expands to ['vertical', 'vertically']


List of unresolved abbreviations

'f': appears in ['f_name', 'f_name2']
'abbrev': appears in ['this_sym_has_an_other_abbrev']
'x': appears in ['x']
'y': appears in ['y']


*******************************************************************************
* Name        : mediator_console
* Description : testing mediator console commands
*******************************************************************************



>>> Testing console command: clear_symbols()    



>>> Testing console command: open_file('D:/blah.c')

WARNING: source file 'D:/blah.c' doesn't exist.
*** Start of source buffer ***
<CURSOR>
*** End of source buffer ***


>>> Testing console command: compile_symbols(['D:\VoiceCode\VCode.vg3_trans\Data\TestData\small_buff.c'])

Compiling symbols for file 'D:\VoiceCode\VCode.vg3_trans\Data\TestData\small_buff.c'
>>> Known symbols are: 
API_function: ['api function']
f_name: ['f name']
f_name2: ['f name 2']
float: ['float']
horiz_pos: ['horiz pos', 'horiz position', 'horiz positionning', 'horizontal pos', 'horizontal position', 'horizontal positionning', 'horizontally pos', 'horizontally position', 'horizontally positionning']
move: ['move']
move_horiz: ['move horiz', 'move horizontal', 'move horizontally']
move_vert: ['move vert', 'move vertical', 'move vertically']
this_sym_has_an_other_abbrev: ['this sym has an other abbrev']
this_sym_is_unres: ['this sym is unres']
this_sym_is_unres_too: ['this sym is unres too']
void: ['void']
x: ['x']
y: ['y']
_cached_symbols_as_one_string is:
    void  move  float  x  y  move_horiz  move_vert  horiz_pos  this_sym_is_unres  this_sym_is_unres_too  this_sym_has_an_other_abbrev  f_name  f_name2  API_function 


>>> Testing console command: say('for loop horizontal position loop body')









*** Start of source buffer ***
  1:    for (horiz_pos=0;  <= ; ++)
  2:    {
  3: <CURSOR>   
  3:    }
  4:    

*** End of source buffer ***


>>> Testing console command: say_select(['select', 'horiz_pos\horizontal position', '=\equals'])

*** Start of source buffer ***
  1:    for (<SEL_START>horiz_pos=
<SEL_END>0;  <= ; ++)
  2:    {
  3:    
  4:    }
  5:    

*** End of source buffer ***


*******************************************************************************
* Name        : persistence
* Description : testing persistence between VoiceCode sessions
*******************************************************************************



>>> Starting mediator with persistence
Error reading <SymDict.SymDict instance at 86d6f0> from file 'D:\VoiceCode\VCode.vg3_trans\Data\Tmp\tmp_symdict.pkl'
[Errno 2] No such file or directory: 'D:\\VoiceCode\\VCode.vg3_trans\\Data\\Tmp\\tmp_symdict.pkl'


>>> Testing console command: compile_symbols(['D:\VoiceCode\VCode.vg3_trans\Data\TestData\small_buff.c'])

Compiling symbols for file 'D:\VoiceCode\VCode.vg3_trans\Data\TestData\small_buff.c'
>>> Known symbols are: 
API_function: ['api function']
f_name: ['f name']
f_name2: ['f name 2']
float: ['float']
horiz_pos: ['horiz pos', 'horiz position', 'horiz positionning', 'horizontal pos', 'horizontal position', 'horizontal positionning', 'horizontally pos', 'horizontally position', 'horizontally positionning']
move: ['move']
move_horiz: ['move horiz', 'move horizontal', 'move horizontally']
move_vert: ['move vert', 'move vertical', 'move vertically']
this_sym_has_an_other_abbrev: ['this sym has an other abbrev']
this_sym_is_unres: ['this sym is unres']
this_sym_is_unres_too: ['this sym is unres too']
void: ['void']
x: ['x']
y: ['y']
_cached_symbols_as_one_string is:
    void  move  float  x  y  move_horiz  move_vert  horiz_pos  this_sym_is_unres  this_sym_is_unres_too  this_sym_has_an_other_abbrev  f_name  f_name2  API_function 


>>> Restarting mediator with persistence. Compiled symbols should still be in the dictionary.



>>> Testing console command: quit()



>>> Testing console command: print_symbols()

API_function: ['api function']
f_name: ['f name']
f_name2: ['f name 2']
float: ['float']
horiz_pos: ['horiz pos', 'horiz position', 'horiz positionning', 'horizontal pos', 'horizontal position', 'horizontal positionning', 'horizontally pos', 'horizontally position', 'horizontally positionning']
move: ['move']
move_horiz: ['move horiz', 'move horizontal', 'move horizontally']
move_vert: ['move vert', 'move vertical', 'move vertically']
this_sym_has_an_other_abbrev: ['this sym has an other abbrev']
this_sym_is_unres: ['this sym is unres']
this_sym_is_unres_too: ['this sym is unres too']
void: ['void']
x: ['x']
y: ['y']
_cached_symbols_as_one_string is:
    void  move  float  x  y  move_horiz  move_vert  horiz_pos  this_sym_is_unres  this_sym_is_unres_too  this_sym_has_an_other_abbrev  f_name  f_name2  API_function 


>>> Restarting mediator WITHOUT persistence. There should be NO symbols in the dictionary.



>>> Testing console command: quit()



>>> Testing console command: print_symbols()

_cached_symbols_as_one_string is:
   
