creating wxMediator
Loading test definitions...
Configuring the mediator...
Compiling symbols for file '%VCODE_HOME%\Data\TestData\test_py_std_sym.py'
Finished wxMediator init...
Starting server threads...
Starting foreground tests...


*******************************************************************************
* Name        : emacs_split_window
* Description : Testing dictation into Emacs with two buffers displayed in same window.
*******************************************************************************

Got command: open_file(%VCODE_HOME%\Data\TestData\foreground.py,)
*** Start of source buffer ***
  1: <CURSOR>#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#
  2: # WARNING: the mediator is now running foreground tests, which may
  3: # change the contents of the foreground window.  Unless you want your
  4: # own files corrupted, this editor window MUST remain in the foreground 
Got command: say(['dictated', 'in', 'foreground', 'buffer'],0
,0,0,)
Heard dictated in foreground buffer
*** Start of source buffer ***
  1: dictated_in_foreground_buffer<CURSOR>#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#
  2: # WARNING: the mediator is now running foreground tests, which may
  3: # change the contents of the foreground window.  Unless you want your
  4: # own files corrupted, this editor window MUST remain in the foreground 
Got simulated kbd event: type_text({Esc}xsplit-window-vertically{Enter},)
Got simulated kbd event: type_text({Esc}xother-window{Enter},)
Got command: open_file(buf2.py,)
WARNING: source file 'buf2.py' doesn't exist.
*** Start of source buffer ***
  1: <CURSOR>

*** End of source buffer ***
Got command: say(['dictated', 'in', 'buffer', 'two'],0
,0,0,)
Heard dictated in buffer two
*** Start of source buffer ***
  1: dictated_in_buffer2<CURSOR>

*** End of source buffer ***
Got command: say(['dictated', 'in', 'buffer', 'two'],0
,0,0,)
Heard dictated in buffer two
*** Start of source buffer ***
  1: dictated_in_buffer2dictated_in_buffer2<CURSOR>

*** End of source buffer ***
Got simulated kbd event: type_text({Esc}xdelete-other-window{Enter},)


*******************************************************************************
* Name        : mixed_mode_editing
* Description : Testing mixed mode (kbd + voice) editing
*******************************************************************************

Got command: open_file(%VCODE_HOME%\Data\TestData\foreground.py,)
*** Start of source buffer ***
  1: <CURSOR>#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#
  2: # WARNING: the mediator is now running foreground tests, which may
  3: # change the contents of the foreground window.  Unless you want your
  4: # own files corrupted, this editor window MUST remain in the foreground 
  6: # is safe for you to proceed with your work.
  7: #-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#
  8: 
  9: <CURSOR># This is a small buffer for testing editing of Python code
 10: 
 11: class AClass(ASuper):
 12:     """This is a dummy class"""
Got command: goto(472,)
  6: # is safe for you to proceed with your work.
  7: #-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#
  8: 
  9: #<CURSOR> This is a small buffer for testing editing of Python code
 10: 
 11: class AClass(ASuper):
 12:     """This is a dummy class"""
Got simulated kbd event: move_cursor_by_kbd(Right,10,)
Got command: say(['hello'],0
,0,0,)
Heard hello
  6: # is safe for you to proceed with your work.
  7: #-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#
  8: 
  9: # This is ahello<CURSOR> small buffer for testing editing of Python code
 10: 
 11: class AClass(ASuper):
 12:     """This is a dummy class"""
  6: # is safe for you to proceed with your work.
  7: #-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#
  8: 
  9: <CURSOR># This is ahello small buffer for testing editing of Python code
 10: 
 11: class AClass(ASuper):
 12:     """This is a dummy class"""
Got command: goto(472,)
  6: # is safe for you to proceed with your work.
  7: #-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#
  8: 
  9: #<CURSOR> This is ahello small buffer for testing editing of Python code
 10: 
 11: class AClass(ASuper):
 12:     """This is a dummy class"""
Got simulated kbd event: set_selection_by_kbd(Right,10,)
Got command: say(['hello'],0
,0,0,)
Heard hello
  6: # is safe for you to proceed with your work.
  7: #-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#
  8: 
  9: #hello<CURSOR>hello small buffer for testing editing of Python code
 10: 
 11: class AClass(ASuper):
 12:     """This is a dummy class"""
Got command: goto_line(10,)
  7: #-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#
  8: 
  9: #hellohello small buffer for testing editing of Python code
 10: <CURSOR>
 11: class AClass(ASuper):
 12:     """This is a dummy class"""
 13:     
Got simulated kbd event: type_text(, hi,)
Got simulated kbd event: move_cursor_by_kbd(Left,5,)
Got command: say(['next', 'comma'],None,0,0,)
Heard next comma
  7: #-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#
  8: 
  9: #hellohello small buffer for testing editing of Python code
 10: , <CURSOR>hi
 11: class AClass(ASuper):
 12:     """This is a dummy class"""
 13:     
Got command: goto_line(10,)
  7: #-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#
  8: 
  9: #hellohello small buffer for testing editing of Python code
 10: <CURSOR>, hi
 11: class AClass(ASuper):
 12:     """This is a dummy class"""
 13:     
Got simulated kbd event: type_text( hello ,)
Got command: say(['select', 'hello'],0
,1,0,)
Heard select hello
  7: #-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#
  8: 
  9: #hellohello small buffer for testing editing of Python code
 10:  <SEL_START>hello<SEL_END> , hi
 11: class AClass(ASuper):
 12:     """This is a dummy class"""
 13:     


*******************************************************************************
* Name        : text_mode
* Description : Test dictation of normal text.
*******************************************************************************

*** Start of source buffer ***
  1: <CURSOR>#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#
  2: # WARNING: the mediator is now running foreground tests, which may
  3: # change the contents of the foreground window.  Unless you want your
  4: # own files corrupted, this editor window MUST remain in the foreground 
  7: #-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#
  8: 
  9: # This is a small buffer for testing editing of Python code
 10: <CURSOR>
 11: class AClass(ASuper):
 12:     """This is a dummy class"""
 13:     
Heard print quotes
  7: #-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#
  8: 
  9: # This is a small buffer for testing editing of Python code
 10: print "<CURSOR>"
 11: class AClass(ASuper):
 12:     """This is a dummy class"""
 13:     
  7: #-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#
  8: 
  9: # This is a small buffer for testing editing of Python code
 10: print "<CURSOR>"
 11: class AClass(ASuper):
 12:     """This is a dummy class"""
 13:     
Setting VCode in text mode.
Got command: say(['text', 'mode', 'on'],1
1
1
,1,0,)
Got command: say(['this', 'should', 'be', 'typed', 'as', 'normal', 'text'],1
1
,1,0,)
  7: #-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#
  8: 
  9: # This is a small buffer for testing editing of Python code
 10: print "this should be typed as normal text<CURSOR>"
 11: class AClass(ASuper):
 12:     """This is a dummy class"""
 13:     
Setting VCode in code dictation mode.
Got command: say(['text', 'mode', 'off'],1
1
1
,1,0,)
Heard jump out
  7: #-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#
  8: 
  9: # This is a small buffer for testing editing of Python code
 10: print "this should be typed as normal text"<CURSOR>
 11: class AClass(ASuper):
 12:     """This is a dummy class"""
 13:     
Got command: say(['new', 'statement', 'print'],None,0,0,)
Heard new statement print
  8: 
  9: # This is a small buffer for testing editing of Python code
 10: print "this should be typed as normal text"
 11: print <CURSOR>
 12: class AClass(ASuper):
 13:     """This is a dummy class"""
 14:     
Got command: say(['this', 'should', 'be', 'typed', 'as', 'a', 'variable', 'name'],1
1
1
,1,0,)
Heard this should be typed as a variable name
  8: 
  9: # This is a small buffer for testing editing of Python code
 10: print "this should be typed as normal text"
 11: print this_should_be_typed_as_a_variable_name<CURSOR>
 12: class AClass(ASuper):
 13:     """This is a dummy class"""
 14:     
  8: 
  9: # This is a small buffer for testing editing of Python code
 10: print "this should be typed as normal text"
 11: print this_should_be_typed_as_a_variable_name<CURSOR>
 12: class AClass(ASuper):
 13:     """This is a dummy class"""
 14:     
Heard new statement print quotes
  9: # This is a small buffer for testing editing of Python code
 10: print "this should be typed as normal text"
 11: print this_should_be_typed_as_a_variable_name
 12: print "<CURSOR>"
 13: class AClass(ASuper):
 14:     """This is a dummy class"""
 15:     
  9: # This is a small buffer for testing editing of Python code
 10: print "this should be typed as normal text"
 11: print this_should_be_typed_as_a_variable_name
 12: print "<CURSOR>"
 13: class AClass(ASuper):
 14:     """This is a dummy class"""
 15:     
Setting VCode in text mode using alternative spoken form.
Got command: say(['text', 'mode', 'on'],1
1
1
,1,0,)
Got command: say(['this', 'should', 'be', 'typed', 'as', 'normal', 'text'],1
1
,1,0,)
  9: # This is a small buffer for testing editing of Python code
 10: print "this should be typed as normal text"
 11: print this_should_be_typed_as_a_variable_name
 12: print "this should be typed as normal text<CURSOR>"
 13: class AClass(ASuper):
 14:     """This is a dummy class"""
 15:     
Setting VCode in code dictation mode using alternative spoken form.
Got command: say(['alternative', 'test', 'text', 'mode', 'off'],1
1
1
,1,0,)
Heard jump out
  9: # This is a small buffer for testing editing of Python code
 10: print "this should be typed as normal text"
 11: print this_should_be_typed_as_a_variable_name
 12: print "this should be typed as normal text"<CURSOR>
 13: class AClass(ASuper):
 14:     """This is a dummy class"""
 15:     
Got command: say(['new', 'statement', 'print'],None,0,0,)
Heard new statement print
 10: print "this should be typed as normal text"
 11: print this_should_be_typed_as_a_variable_name
 12: print "this should be typed as normal text"
 13: print <CURSOR>
 14: class AClass(ASuper):
 15:     """This is a dummy class"""
 16:     
Got command: say(['this', 'should', 'be', 'typed', 'as', 'a', 'variable', 'name'],1
1
1
,1,0,)
Heard this should be typed as a variable name
 10: print "this should be typed as normal text"
 11: print this_should_be_typed_as_a_variable_name
 12: print "this should be typed as normal text"
 13: print this_should_be_typed_as_a_variable_name<CURSOR>
 14: class AClass(ASuper):
 15:     """This is a dummy class"""
 16:     
 10: print "this should be typed as normal text"
 11: print this_should_be_typed_as_a_variable_name
 12: print "this should be typed as normal text"
 13: print this_should_be_typed_as_a_variable_name<CURSOR>
 14: class AClass(ASuper):
 15:     """This is a dummy class"""
 16:     
Finished foreground tests...
Starting background tests...


*******************************************************************************
* Name        : CmdInterp
* Description : self-test for CmdInterp.py
*******************************************************************************

EdSim instance EdSim(0) connected


>>> Testing command interpreter



>>> Interpreting in a C buffer

>>> Current buffer is:

*** Start of source buffer ***
  1: /* This is a small test buffer for C */
  2: 
  3: <CURSOR>
  4: void move(float x, y)
  5: {
  6:   move_horiz(x);
>>> Interpreting: ['for loop', 'loop body']
>>> Interpreting: ['for', 'loop', 'loop', 'body']

>>> Buffer is now:
  4: {
  5: for (=0;  <= ; ++)
  6: {
  7: <CURSOR>   
  8: }
  9:    
 10: }

>>> Interpreting in a Python buffer

>>> Current buffer is:

*** Start of source buffer ***
  1: # This is a small test buffer for Python
  2: 
  3: 
  4: <CURSOR>
  5: class AClass(ASuper):
  6:     """This is a dummy class"""
  7:     
>>> Interpreting: ['for loop', 'loop body']

>>> Buffer is now:
  2: 
  3: 
  4: for :
  5:    <CURSOR>
  6: class AClass(ASuper):
  7:     """This is a dummy class"""
  8:     


*******************************************************************************
* Name        : EdSim
* Description : self-test for EdSim.py
*******************************************************************************

>>> Testing EdSim.py


>>> Opening a buffer
*** Start of source buffer ***
  1: <CURSOR>/* This is a small test buffer for C */
  2: 
  3: 
  4: void move(float x, y)


>>> Moving to position 5
*** Start of source buffer ***
  1: /* Th<CURSOR>is is a small test buffer for C */
  2: 
  3: 
  4: void move(float x, y)


>>> Testing breadcrumbs

>>> Dropping one here
*** Start of source buffer ***
  1: /* Th<CURSOR>is is a small test buffer for C */
  2: 
  3: 
  4: void move(float x, y)

>>> Dropping one here
*** Start of source buffer ***
  1: /* This is<CURSOR> a small test buffer for C */
  2: 
  3: 
  4: void move(float x, y)

>>> Popping 2 crumbs -> end up here:
*** Start of source buffer ***
  1: /* Th<CURSOR>is is a small test buffer for C */
  2: 
  3: 
  4: void move(float x, y)

>>> Dropping one here
*** Start of source buffer ***
  1: /* Th<CURSOR>is is a small test buffer for C */
  2: 
  3: 
  4: void move(float x, y)

>>> Dropping one here
*** Start of source buffer ***
  1: /* This is<CURSOR> a small test buffer for C */
  2: 
  3: 
  4: void move(float x, y)
*** Start of source buffer ***
  1: /* This is a small t<CURSOR>est buffer for C */
  2: 
  3: 
  4: void move(float x, y)

>>> Popping 1 crumb -> end up here...
*** Start of source buffer ***
  1: /* This is<CURSOR> a small test buffer for C */
  2: 
  3: 
  4: void move(float x, y)


>>> Testing code indentation. Inserting for loop.
  3: 
  4: for (ii=0; ii <= maxValue; ii++)
  5: {
  6: <CURSOR>
  7: }
  8: void move(float x, y)
  9: {


*******************************************************************************
* Name        : EdSim_alloc_cleanup
* Description : Testing EdSim allocation and cleanup.
*******************************************************************************


*** testing cleanup with single buffer EdSim

EdSim.__init__
SourceBuff.__init__: 
EdSim instance EdSim(0) connected
SourceBuff.remove_other_references: 
SourceBuff.__del__: 
SourceBuff.__init__: %VCODE_HOME%\Data\TestData\small_buff.c


>>> Testing command interpreter



>>> Interpreting in a C buffer

>>> Current buffer is:

*** Start of source buffer ***
  1: /* This is a small test buffer for C */
  2: 
  3: <CURSOR>
  4: void move(float x, y)
  5: {
  6:   move_horiz(x);
>>> Interpreting: ['for loop', 'loop body']
>>> Interpreting: ['for', 'loop', 'loop', 'body']

>>> Buffer is now:
  4: {
  5: for (=0;  <= ; ++)
  6: {
  7: <CURSOR>   
  8: }
  9:    
 10: }
SourceBuff.remove_other_references: %VCODE_HOME%\Data\TestData\small_buff.c
SourceBuff.__del__: %VCODE_HOME%\Data\TestData\small_buff.c
SourceBuff.__init__: %VCODE_HOME%\Data\TestData\small_buff.py

>>> Interpreting in a Python buffer

>>> Current buffer is:

*** Start of source buffer ***
  1: # This is a small test buffer for Python
  2: 
  3: 
  4: <CURSOR>
  5: class AClass(ASuper):
  6:     """This is a dummy class"""
  7:     
>>> Interpreting: ['for loop', 'loop body']

>>> Buffer is now:
  2: 
  3: 
  4: for :
  5:    <CURSOR>
  6: class AClass(ASuper):
  7:     """This is a dummy class"""
  8:     
EdSim.remove_other_references
SourceBuff.remove_other_references: %VCODE_HOME%\Data\TestData\small_buff.py
SourceBuff.__del__: %VCODE_HOME%\Data\TestData\small_buff.py
EdSim.__del__

*** testing cleanup with multi-buffer EdSim

EdSim.__init__
SourceBuff.__init__: 
EdSim instance EdSim(0) connected
SourceBuff.__init__: %VCODE_HOME%\Data\TestData\small_buff.c


>>> Testing command interpreter



>>> Interpreting in a C buffer

>>> Current buffer is:

*** Start of source buffer ***
  1: /* This is a small test buffer for C */
  2: 
  3: <CURSOR>
  4: void move(float x, y)
  5: {
  6:   move_horiz(x);
>>> Interpreting: ['for loop', 'loop body']
>>> Interpreting: ['for', 'loop', 'loop', 'body']

>>> Buffer is now:
  4: {
  5: for (=0;  <= ; ++)
  6: {
  7: <CURSOR>   
  8: }
  9:    
 10: }
SourceBuff.__init__: %VCODE_HOME%\Data\TestData\small_buff.py

>>> Interpreting in a Python buffer

>>> Current buffer is:

*** Start of source buffer ***
  1: # This is a small test buffer for Python
  2: 
  3: 
  4: <CURSOR>
  5: class AClass(ASuper):
  6:     """This is a dummy class"""
  7:     
>>> Interpreting: ['for loop', 'loop body']

>>> Buffer is now:
  2: 
  3: 
  4: for :
  5:    <CURSOR>
  6: class AClass(ASuper):
  7:     """This is a dummy class"""
  8:     
EdSim.remove_other_references
SourceBuff.remove_other_references: 
SourceBuff.__del__: 
SourceBuff.remove_other_references: %VCODE_HOME%\Data\TestData\small_buff.c
SourceBuff.__del__: %VCODE_HOME%\Data\TestData\small_buff.c
SourceBuff.remove_other_references: %VCODE_HOME%\Data\TestData\small_buff.py
SourceBuff.__del__: %VCODE_HOME%\Data\TestData\small_buff.py
EdSim.__del__


*******************************************************************************
* Name        : Object
* Description : self-test for Object.py
*******************************************************************************

Testing exceptions for get/set


Trying to get the value of attribute 'name', $PY_DEBUG_OBJECT=None
   -> Caught NO AttributeError exception. obj.name=Alain, x=Alain


Trying to set the value of attribute 'name', $PY_DEBUG_OBJECT=None
   -> Caught NO AttributeError exception. obj.name=999, x=0


Trying to get the value of attribute 'nonexistant', $PY_DEBUG_OBJECT=None
   -> Caught AttributeError exception: '[{'args': ("SmallObject instance has no attribute 'nonexistant'",)}]'


Trying to set the value of attribute 'nonexistant', $PY_DEBUG_OBJECT=None
   -> Caught NO AttributeError exception. obj.nonexistant=999, x=0

Testing inheritance of constructor arguments
   Employee1(name='Alain', salary='not enough') -> {'salary': 'not enough', 'name': 'Alain', 'citizenship': None}


Redefining default value of *citizenship*
   MyPerson(name='Alain') -> result={'salary': 'not enough', 'name': 'Alain', 'citizenship': None}

Overriding redefined default value of *citizenship*
   MyPerson(name='Alain', citizenship='US citizen') -> result={'marital_status': None, 'name': 'Alain', 'citizenship': 'US citizen'}

Enforcing 'Canadian eh?' as the value of *citizenship*
   Canadian(name='Alain') -> result={'name': 'Alain', 'citizenship': 'Canadian eh?'}

Trying to change enforced value 'Canadian eh?' of *citizenship*
   Canadian(citizenship='US') -> Test OK. EnforcedConstrArg was correctly raised: 'The value of argument citizenship in <class __builtin__.Canadian at 0x01EBFF80>.__init__ is enforced at 'Canadian eh?', and cannot be changed.'

Person2.__init__ received init_file=C:/temp.txt
Class with private *init_file* attribute*
   Person2(init_file='C:/temp.txt') -> result={'name': None, 'citizenship': None}

Subclassing from non-standard class AnimatedCharacter.*
   AnimatedPerson(name='Alain', animation_file='C:/People/Alain.dat') -> result={'animation_file': 'C:/People/Alain.dat', 'frames_per_sec': 40, 'name': 'Alain', 'citizenship': None}


*******************************************************************************
* Name        : SymDict
* Description : self-test for SymDict.py
*******************************************************************************

EdSim instance EdSim(0) connected
*** Compiling symbols from file: %VCODE_HOME%\Data\TestData\small_buff.c ***
Compiling symbols for file '%VCODE_HOME%\Data\TestData\test_py_std_sym.py'


Parsed symbols are: 
API_function: ['A. P. I. function', 'API function']
THIS_SYMBOL_WAS_PARSED_FROM_test_py_std_sym: ['this symbol was parsed from test P. Y. standard sym', 'this symbol was parsed from test P. Y. standard symbol', 'this symbol was parsed from test P. Y. std sym', 'this symbol was parsed from test P. Y. std symbol', 'this symbol was parsed from test pie standard sym', 'this symbol was parsed from test pie standard symbol', 'this symbol was parsed from test pie std sym', 'this symbol was parsed from test pie std symbol', 'this symbol was parsed from test py standard sym', 'this symbol was parsed from test py standard symbol', 'this symbol was parsed from test py std sym', 'this symbol was parsed from test py std symbol', 'this symbol was parsed from test python standard sym', 'this symbol was parsed from test python standard symbol', 'this symbol was parsed from test python std sym', 'this symbol was parsed from test python std symbol']
f_name: ['F. name']
f_name2: ['F. name 2']
float: ['float']
horiz_pos: ['horiz pos', 'horiz position', 'horiz positioning', 'horizontal pos', 'horizontal position', 'horizontal positioning', 'horizontally pos', 'horizontally position', 'horizontally positioning']
move: ['move']
move_horiz: ['move horiz', 'move horizontal', 'move horizontally']
move_vert: ['move vert', 'move vertical', 'move vertically']
this_sym_has_an_other_abbrev: ['this sym has an other abbrev', 'this symbol has an other abbrev']
this_sym_is_unres: ['this sym is unres', 'this symbol is unres']
this_sym_is_unres_too: ['this sym is unres too', 'this symbol is unres too']
void: ['void']
x: ['X.']
y: ['Y.']
_cached_symbols_as_one_string[a] is:
    API_function 
_cached_symbols_as_one_string[f] is:
    float  f_name  f_name2 
_cached_symbols_as_one_string[h] is:
    horiz_pos 
_cached_symbols_as_one_string[m] is:
    move  move_horiz  move_vert 
_cached_symbols_as_one_string[t] is:
    THIS_SYMBOL_WAS_PARSED_FROM_test_py_std_sym  this_sym_is_unres  this_sym_is_unres_too  this_sym_has_an_other_abbrev 
_cached_symbols_as_one_string[v] is:
    void 
_cached_symbols_as_one_string[x] is:
    x 
_cached_symbols_as_one_string[y] is:
    y 
Unresolved abbreviations are:
'abbrev': appears in ['this_sym_has_an_other_abbrev']
'f': appears in ['f_name', 'f_name2']
'unres': appears in ['this_sym_is_unres', 'this_sym_is_unres_too']
'x': appears in ['x']
'y': appears in ['y']

*** End of compilation test ***

*** Compiling symbols from file: %VCODE_HOME%\Data\TestData\large_buff.py ***
Compiling symbols for file '%VCODE_HOME%\Data\TestData\test_py_std_sym.py'


Parsed symbols are: 
AttributeError: ['attribute error']
LargeNonObject: ['large non-object']
LargeObject: ['large object']
Object: ['object']
SmallNonObject: ['small non-object']
SmallObject: ['small object']
THIS_SYMBOL_WAS_PARSED_FROM_test_py_std_sym: ['this symbol was parsed from test P. Y. standard sym', 'this symbol was parsed from test P. Y. standard symbol', 'this symbol was parsed from test P. Y. std sym', 'this symbol was parsed from test P. Y. std symbol', 'this symbol was parsed from test pie standard sym', 'this symbol was parsed from test pie standard symbol', 'this symbol was parsed from test pie std sym', 'this symbol was parsed from test pie std symbol', 'this symbol was parsed from test py standard sym', 'this symbol was parsed from test py standard symbol', 'this symbol was parsed from test py std sym', 'this symbol was parsed from test py std symbol', 'this symbol was parsed from test python standard sym', 'this symbol was parsed from test python standard symbol', 'this symbol was parsed from test python std sym', 'this symbol was parsed from test python std symbol']
__bases__: ['bases']
__dict__: ['dict', 'dictionary']
__init__: ['init', 'initial', 'initialize']
__name__: ['name']
a_base: ['A. base', 'a base']
add_test: ['add test']
age: ['age']
an_attr_def: ['an attr deaf', 'an attr def', 'an attr default', 'an attr define', 'an attr defined', 'an attr definition', 'an attribute deaf', 'an attribute def', 'an attribute default', 'an attribute define', 'an attribute defined', 'an attribute definition']
an_attr_init: ['an attr init', 'an attr initial', 'an attr initialize', 'an attribute init', 'an attribute initial', 'an attribute initialize']
and: ['and']
attrs: ['attributes']
attrs_superclasses: ['attributes superclasses']
attrs_this_class: ['attributes this class']
autoTst: ['auto test', 'auto tst']
auto_test: ['auto test']
class: ['class']
code: ['code']
code_file: ['code file']
deep_construct: ['deep construct']
def: ['deaf', 'def', 'default', 'define', 'defined', 'definition']
else: ['else']
environ: ['environ', 'environment']
exc: ['exc', 'exception']
except: ['except']
exceptions: ['exceptions']
exclude_bases: ['exclude bases']
exec: ['exec', 'executable', 'execute']
execfile: ['execfile']
expandvars: ['expandvars']
for: ['for']
has_key: ['has key']
her_age: ['her age']
if: ['if']
import: ['import']
in: ['in']
index: ['index']
init_attrs: ['init attributes', 'initial attributes', 'initialize attributes']
items: ['items']
name: ['name']
not: ['not']
num_times: ['num times', 'number times']
obj: ['obj', 'object']
operation: ['operation']
os: ['O. S.', 'operating system', 'os']
pass: ['pass']
posixpath: ['posixpath']
profConstrLargeNonObj: ['prof constr large non-obj', 'prof constr large non-object', 'professional constr large non-obj', 'professional constr large non-object', 'profile constr large non-obj', 'profile constr large non-object', 'profiling constr large non-obj', 'profiling constr large non-object']
profConstrLargeObj: ['prof constr large obj', 'prof constr large object', 'professional constr large obj', 'professional constr large object', 'profile constr large obj', 'profile constr large object', 'profiling constr large obj', 'profiling constr large object']
profConstrSmallNonObj: ['prof constr small non-obj', 'prof constr small non-object', 'professional constr small non-obj', 'professional constr small non-object', 'profile constr small non-obj', 'profile constr small non-object', 'profiling constr small non-obj', 'profiling constr small non-object']
profConstrSmallObj: ['prof constr small obj', 'prof constr small object', 'professional constr small obj', 'professional constr small object', 'profile constr small obj', 'profile constr small object', 'profiling constr small obj', 'profiling constr small object']
profGetLargeNonObj: ['prof get large non-obj', 'prof get large non-object', 'professional get large non-obj', 'professional get large non-object', 'profile get large non-obj', 'profile get large non-object', 'profiling get large non-obj', 'profiling get large non-object']
profGetLargeObj: ['prof get large obj', 'prof get large object', 'professional get large obj', 'professional get large object', 'profile get large obj', 'profile get large object', 'profiling get large obj', 'profiling get large object']
profGetSmallNonObj: ['prof get small non-obj', 'prof get small non-object', 'professional get small non-obj', 'professional get small non-object', 'profile get small non-obj', 'profile get small non-object', 'profiling get small non-obj', 'profiling get small non-object']
profGetSmallObj: ['prof get small obj', 'prof get small object', 'professional get small obj', 'professional get small object', 'profile get small obj', 'profile get small object', 'profiling get small obj', 'profiling get small object']
profObject: ['prof object', 'professional object', 'profile object', 'profiling object']
profSetLargeNonObj: ['prof set large non-obj', 'prof set large non-object', 'professional set large non-obj', 'professional set large non-object', 'profile set large non-obj', 'profile set large non-object', 'profiling set large non-obj', 'profiling set large non-object']
profSetLargeObj: ['prof set large obj', 'prof set large object', 'professional set large obj', 'professional set large object', 'profile set large obj', 'profile set large object', 'profiling set large obj', 'profiling set large object']
profSetSmallNonObj: ['prof set small non-obj', 'prof set small non-object', 'professional set small non-obj', 'professional set small non-object', 'profile set small non-obj', 'profile set small non-object', 'profiling set small non-obj', 'profiling set small non-object']
profSetSmallObj: ['prof set small obj', 'prof set small object', 'professional set small obj', 'professional set small object', 'profile set small obj', 'profile set small object', 'profiling set small obj', 'profiling set small object']
prof_test: ['prof test', 'professional test', 'profile test', 'profiling test']
profile: ['profile']
range: ['range']
run: ['run']
self: ['self']
self_test: ['self test']
sep: ['sep', 'separator']
setattr: ['setattr']
stdout: ['stdout']
str: ['str', 'string']
sys: ['sys', 'system']
this_class: ['this class']
try: ['try']
try_attribute: ['try attribute']
write: ['write']
x: ['X.']
_cached_symbols_as_one_string[a] is:
    autoTst  auto_test  and  attrs_this_class  attrs_superclasses  a_base  an_attr_def  attrs  an_attr_init  age  AttributeError  add_test 
_cached_symbols_as_one_string[b] is:
    __bases__ 
_cached_symbols_as_one_string[c] is:
    class  code_file  code 
_cached_symbols_as_one_string[d] is:
    def  deep_construct  __dict__ 
_cached_symbols_as_one_string[e] is:
    exceptions  environ  expandvars  execfile  exclude_bases  else  exec  except  exc 
_cached_symbols_as_one_string[f] is:
    for 
_cached_symbols_as_one_string[h] is:
    has_key  her_age 
_cached_symbols_as_one_string[i] is:
    import  if  __init__  in  items  init_attrs  index 
_cached_symbols_as_one_string[l] is:
    LargeObject  LargeNonObject 
_cached_symbols_as_one_string[n] is:
    not  name  num_times  __name__ 
_cached_symbols_as_one_string[o] is:
    os  Object  obj  operation 
_cached_symbols_as_one_string[p] is:
    posixpath  profile  pass  profConstrSmallObj  profConstrLargeObj  profConstrSmallNonObj  profConstrLargeNonObj  profGetSmallObj  profGetLargeObj  profGetSmallNonObj  profGetLargeNonObj  profSetSmallObj  profSetLargeObj  profSetSmallNonObj  profSetLargeNonObj  profObject  prof_test 
_cached_symbols_as_one_string[r] is:
    range  run 
_cached_symbols_as_one_string[s] is:
    sys  sep  self  setattr  SmallObject  SmallNonObject  stdout  str  self_test 
_cached_symbols_as_one_string[t] is:
    THIS_SYMBOL_WAS_PARSED_FROM_test_py_std_sym  this_class  try_attribute  try 
_cached_symbols_as_one_string[w] is:
    write 
_cached_symbols_as_one_string[x] is:
    x 
Unresolved abbreviations are:
'constr': appears in ['profConstrLargeNonObj', 'profConstrLargeObj', 'profConstrSmallNonObj', 'profConstrSmallObj']
'execfile': appears in ['execfile']
'expandvars': appears in ['expandvars']
'posixpath': appears in ['posixpath']
'setattr': appears in ['setattr']
'stdout': appears in ['stdout']
'x': appears in ['x']

*** End of compilation test ***

*** Pseudo symbol match test***
   Source files are: ['%VCODE_HOME%\\Data\\TestData\\large_buff.py']
   Symbols are: ['set attribute', 'expand variables', 'execute file', 'profile Constructor Large Object', 'profile construct large object', 'auto test']


Compiling symbols for file '%VCODE_HOME%\Data\TestData\test_py_std_sym.py'
'set attribute' matches: [setattr, ]
'expand variables' matches: [expandvars, ]
'execute file' matches: [execfile, ]
'profile Constructor Large Object' matches: [profConstrLargeObj, ]
'profile construct large object' matches: [profConstrLargeObj, ]
'auto test' matches: [auto_test, autoTst, ]

*** End of Pseudo Symbol Match test ***


*** Accept symbol match test. source='%VCODE_HOME%\Data\TestData\small_buff.c' ***
Compiling symbols for file '%VCODE_HOME%\Data\TestData\test_py_std_sym.py'
Parsed symbols are: 
API_function: ['A. P. I. function', 'API function']
THIS_SYMBOL_WAS_PARSED_FROM_test_py_std_sym: ['this symbol was parsed from test P. Y. standard sym', 'this symbol was parsed from test P. Y. standard symbol', 'this symbol was parsed from test P. Y. std sym', 'this symbol was parsed from test P. Y. std symbol', 'this symbol was parsed from test pie standard sym', 'this symbol was parsed from test pie standard symbol', 'this symbol was parsed from test pie std sym', 'this symbol was parsed from test pie std symbol', 'this symbol was parsed from test py standard sym', 'this symbol was parsed from test py standard symbol', 'this symbol was parsed from test py std sym', 'this symbol was parsed from test py std symbol', 'this symbol was parsed from test python standard sym', 'this symbol was parsed from test python standard symbol', 'this symbol was parsed from test python std sym', 'this symbol was parsed from test python std symbol']
f_name: ['F. name']
f_name2: ['F. name 2']
float: ['float']
horiz_pos: ['horiz pos', 'horiz position', 'horiz positioning', 'horizontal pos', 'horizontal position', 'horizontal positioning', 'horizontally pos', 'horizontally position', 'horizontally positioning']
move: ['move']
move_horiz: ['move horiz', 'move horizontal', 'move horizontally']
move_vert: ['move vert', 'move vertical', 'move vertically']
this_sym_has_an_other_abbrev: ['this sym has an other abbrev', 'this symbol has an other abbrev']
this_sym_is_unres: ['this sym is unres', 'this symbol is unres']
this_sym_is_unres_too: ['this sym is unres too', 'this symbol is unres too']
void: ['void']
x: ['X.']
y: ['Y.']
_cached_symbols_as_one_string[a] is:
    API_function 
_cached_symbols_as_one_string[f] is:
    float  f_name  f_name2 
_cached_symbols_as_one_string[h] is:
    horiz_pos 
_cached_symbols_as_one_string[m] is:
    move  move_horiz  move_vert 
_cached_symbols_as_one_string[t] is:
    THIS_SYMBOL_WAS_PARSED_FROM_test_py_std_sym  this_sym_is_unres  this_sym_is_unres_too  this_sym_has_an_other_abbrev 
_cached_symbols_as_one_string[v] is:
    void 
_cached_symbols_as_one_string[x] is:
    x 
_cached_symbols_as_one_string[y] is:
    y 


Unresolved abbreviations are:
'abbrev': appears in ['this_sym_has_an_other_abbrev']
'f': appears in ['f_name2', 'f_name']
'unres': appears in ['this_sym_is_unres', 'this_sym_is_unres_too']
'x': appears in ['x']
'y': appears in ['y']


Accepting: 'this symbol is unresolved' -> 'this_sym_is_unres', 


After accepting those symbols, known symbols are:

API_function: ['A. P. I. function', 'API function']
THIS_SYMBOL_WAS_PARSED_FROM_test_py_std_sym: ['this symbol was parsed from test P. Y. standard sym', 'this symbol was parsed from test P. Y. standard symbol', 'this symbol was parsed from test P. Y. std sym', 'this symbol was parsed from test P. Y. std symbol', 'this symbol was parsed from test pie standard sym', 'this symbol was parsed from test pie standard symbol', 'this symbol was parsed from test pie std sym', 'this symbol was parsed from test pie std symbol', 'this symbol was parsed from test py standard sym', 'this symbol was parsed from test py standard symbol', 'this symbol was parsed from test py std sym', 'this symbol was parsed from test py std symbol', 'this symbol was parsed from test python standard sym', 'this symbol was parsed from test python standard symbol', 'this symbol was parsed from test python std sym', 'this symbol was parsed from test python std symbol']
f_name: ['F. name']
f_name2: ['F. name 2']
float: ['float']
horiz_pos: ['horiz pos', 'horiz position', 'horiz positioning', 'horizontal pos', 'horizontal position', 'horizontal positioning', 'horizontally pos', 'horizontally position', 'horizontally positioning']
move: ['move']
move_horiz: ['move horiz', 'move horizontal', 'move horizontally']
move_vert: ['move vert', 'move vertical', 'move vertically']
this_sym_has_an_other_abbrev: ['this sym has an other abbrev', 'this symbol has an other abbrev']
this_sym_is_unres: ['this sym is unres', 'this sym is unresolved', 'this symbol is unres', 'this symbol is unresolved']
this_sym_is_unres_too: ['this sym is unres too', 'this sym is unresolved too', 'this symbol is unres too', 'this symbol is unresolved too']
void: ['void']
x: ['X.']
y: ['Y.']
_cached_symbols_as_one_string[a] is:
    API_function 
_cached_symbols_as_one_string[f] is:
    float  f_name  f_name2 
_cached_symbols_as_one_string[h] is:
    horiz_pos 
_cached_symbols_as_one_string[m] is:
    move  move_horiz  move_vert 
_cached_symbols_as_one_string[t] is:
    THIS_SYMBOL_WAS_PARSED_FROM_test_py_std_sym  this_sym_is_unres  this_sym_is_unres_too  this_sym_has_an_other_abbrev 
_cached_symbols_as_one_string[v] is:
    void 
_cached_symbols_as_one_string[x] is:
    x 
_cached_symbols_as_one_string[y] is:
    y 


Unresolved abbreviations are:
'abbrev': appears in ['this_sym_has_an_other_abbrev']
'f': appears in ['f_name2', 'f_name']
'x': appears in ['x']
'y': appears in ['y']

*** End of accept symbol match test ***



*******************************************************************************
* Name        : SymDict_storage
* Description : testing storage and version updating system for SymDict
*******************************************************************************

Exporting abbreviations from an empty SymDict, so
the following export file should be empty (except for
one blank line)
-----------------------------------------

-----------------------------------------

Compiling symbols for file '%VCODE_HOME%\Data\TestData\selected_py_sym.py'

saving modified SymDict
attempting to recover symbols and abbreviations with
bad persistent SymDict
finishing configuration of the recovered SymDict
Compiling symbols for file '%VCODE_HOME%\Data\TestData\selected_py_sym.py'
comparing modified persistent dictionary with the recovered one
no differences found

version number unchanged

comparing symdict.dict created from scratch with
the reference dictionary current_symdict.dict
no differences found

initializing SymDict from dictionary

initialization from dictionary was successful
Abbreviation file was unchanged, as expected
initializing fresh SymDict from dictionary

initialization from dictionary was successful
Fresh abbreviation file matches current one, as expected


*******************************************************************************
* Name        : am_dictionaries
* Description : Testing AppMgr dictionary management.
*******************************************************************************

new instance of emacs 1

state {
application:  emacs
instance:  emacs(0)
known windows []
} state

new window 14
SelectWinGramDummy for buffer None, window 14
init
new window 20
SelectWinGramDummy for buffer None, window 20
init

state {
application:  emacs
instance:  emacs(0)
window 14
window 20
known windows [14, 20]
} state

new instance of emacs 2
with window 10
SelectWinGramDummy for buffer None, window 10
init

state {
application:  emacs
instance:  emacs(0)
window 14
window 20
instance:  emacs(1)
window 10
known windows [10, 14, 20]
} state

new instance of Vim 3
delete window 20
SelectWinGramDummy for buffer None, window 20
deactivating
SelectWinGramDummy for buffer None, window 20
del

state {
application:  Vim
instance:  Vim(0)
application:  emacs
instance:  emacs(0)
window 14
instance:  emacs(1)
window 10
known windows [10, 14]
} state

delete instance emacs(1)
SelectWinGramDummy for buffer None, window 10
deactivating
SelectWinGramDummy for buffer None, window 10
del
new instance of emacs 4
with window 7
SelectWinGramDummy for buffer None, window 7
init

state {
application:  Vim
instance:  Vim(0)
application:  emacs
instance:  emacs(0)
window 14
instance:  emacs(2)
window 7
known windows [7, 14]
} state

delete instance emacs(0)
SelectWinGramDummy for buffer None, window 14
deactivating
SelectWinGramDummy for buffer None, window 14
del

state {
application:  Vim
instance:  Vim(0)
application:  emacs
instance:  emacs(2)
window 7
known windows [7]
} state

delete instance Vim(0)
delete instance emacs(2)
SelectWinGramDummy for buffer None, window 7
deactivating
SelectWinGramDummy for buffer None, window 7
del

state {
application:  Vim
application:  emacs
known windows []
} state

new instance of emacs 5
with window 94
SelectWinGramDummy for buffer None, window 94
init
new instance of emacs 6
with window 94
SelectWinGramDummy for buffer None, window 94
init

state {
application:  Vim
application:  emacs
instance:  emacs(3)
window 94
instance:  emacs(4)
window 94
known windows [94]
} state

SelectWinGramDummy for buffer None, window 94
deactivating
SelectWinGramDummy for buffer None, window 94
del

state {
application:  Vim
application:  emacs
instance:  emacs(3)
instance:  emacs(4)
window 94
known windows [94]
} state


state {
application:  Vim
application:  emacs
instance:  emacs(4)
window 94
known windows [94]
} state

SelectWinGramDummy for buffer None, window 94
deactivating
SelectWinGramDummy for buffer None, window 94
del

state {
application:  Vim
application:  emacs
known windows []
} state



*******************************************************************************
* Name        : automatic_abbreviations
* Description : testing automatic creation of abbreviations
*******************************************************************************



>>> Testing console command: open_file('blah.c')

WARNING: source file 'blah.c' doesn't exist.
*** Start of source buffer ***
  1: <CURSOR>

*** End of source buffer ***
'N:\\DavidFox\\Code\\VoiceCode\\VCode\\Data\\TestData'


>>> Testing console command: compile_symbols([r'N:\DavidFox\Code\VoiceCode\VCode\Data\TestData\small_buff.c'])

Compiling symbols for file '%VCODE_HOME%\Data\TestData\small_buff.c'
>>> Known symbols are: 
API_function: ['A. P. I. function', 'API function']
THIS_SYMBOL_WAS_PARSED_FROM_test_py_std_sym: ['this symbol was parsed from test P. Y. standard sym', 'this symbol was parsed from test P. Y. standard symbol', 'this symbol was parsed from test P. Y. std sym', 'this symbol was parsed from test P. Y. std symbol', 'this symbol was parsed from test pie standard sym', 'this symbol was parsed from test pie standard symbol', 'this symbol was parsed from test pie std sym', 'this symbol was parsed from test pie std symbol', 'this symbol was parsed from test py standard sym', 'this symbol was parsed from test py standard symbol', 'this symbol was parsed from test py std sym', 'this symbol was parsed from test py std symbol', 'this symbol was parsed from test python standard sym', 'this symbol was parsed from test python standard symbol', 'this symbol was parsed from test python std sym', 'this symbol was parsed from test python std symbol']
__abs__: ['abs', 'underscore abs', 'underscore absolute', 'underscore absolute value']
abs: ['abs', 'absolute', 'absolute value']
abspath: ['abs path', 'absolute path', 'abspath']
accept: ['accept']
accept2dyear: ['accept 2 dyear', 'accept two D. year']
access: ['access']
acos: ['A. cos', 'acos', 'arc cos', 'arc cosine']
acosh: ['A. cos H.', 'acosh', 'arc cos H.', 'arc cosine H.', 'hyperbolic arc cosine']
acquire: ['acquire']
f_name: ['F. name']
f_name2: ['F. name 2']
float: ['float']
horiz_pos: ['horiz pos', 'horiz position', 'horiz positioning', 'horizontal pos', 'horizontal position', 'horizontal positioning', 'horizontally pos', 'horizontally position', 'horizontally positioning']
move: ['move']
move_horiz: ['move horiz', 'move horizontal', 'move horizontally']
move_vert: ['move vert', 'move vertical', 'move vertically']
this_sym_has_an_other_abbrev: ['this sym has an other abbrev', 'this symbol has an other abbrev']
this_sym_is_unres: ['this sym is unres', 'this symbol is unres']
this_sym_is_unres_too: ['this sym is unres too', 'this symbol is unres too']
void: ['void']
x: ['X.']
y: ['Y.']
_cached_symbols_as_one_string[a] is:
    access  abs  acosh  acos  abspath  acquire  accept2dyear  accept  __abs__  API_function 
_cached_symbols_as_one_string[f] is:
    float  f_name  f_name2 
_cached_symbols_as_one_string[h] is:
    horiz_pos 
_cached_symbols_as_one_string[m] is:
    move  move_horiz  move_vert 
_cached_symbols_as_one_string[t] is:
    THIS_SYMBOL_WAS_PARSED_FROM_test_py_std_sym  this_sym_is_unres  this_sym_is_unres_too  this_sym_has_an_other_abbrev 
_cached_symbols_as_one_string[v] is:
    void 
_cached_symbols_as_one_string[x] is:
    x 
_cached_symbols_as_one_string[y] is:
    y 


>>> Testing console command: print_abbreviations(1)

List of abbreviations

'abs' expands to ['absolute']
'addr' expands to ['address']
'alnum' expands to ['alpha numeric']
'alt' expands to ['alternate', 'alternative']
'arg' expands to ['argument']
'argv' expands to ['arg V.', 'argument value']
'asc' expands to ['ascii']
'asyn' expands to ['asynchronous']
'async' expands to ['asynchronous']
'atan' expands to ['arc tangent']
'atof' expands to ['A. to F.']
'atol' expands to ['A. to L.']
'attr' expands to ['attribute']
'avail' expands to ['available']
'avg' expands to ['average']
'beg' expands to ['begin', 'beginning']
'bg' expands to ['background']
'blk' expands to ['block', 'blocking']
'buf' expands to ['buffer']
'buff' expands to ['buffer']
'builtin' expands to ['built in']
'calc' expands to ['calculate', 'calculated', 'calculation']
'cbk' expands to ['callback']
'cgi' expands to ['C. G. I.']
'char' expands to ['character']
'chg' expands to ['change', 'changed']
'chr' expands to ['character']
'clr' expands to ['clear']
'cmd' expands to ['command']
'cmp' expands to ['compare']
'cntrl' expands to ['control']
'col' expands to ['column']
'concat' expands to ['concatenate']
'cond' expands to ['condition']
'conf' expands to ['configuration', 'configure']
'config' expands to ['configuration', 'configure']
'conn' expands to ['connected']
'cont' expands to ['content', 'context']
'cos' expands to ['cosine']
'cpp' expands to ['C. plus plus']
'ctl' expands to ['control']
'ctrl' expands to ['control']
'cur' expands to ['current', 'cursor']
'curr' expands to ['current']
'db' expands to ['D. B.', 'data base']
'decl' expands to ['declaration', 'declare']
'def' expands to ['deaf', 'default', 'define', 'defined', 'definition']
'delim' expands to ['delimiter']
'dev' expands to ['device']
'dict' expands to ['dictionary']
'dir' expands to ['direction', 'directory']
'div' expands to ['divide']
'doc' expands to ['document', 'documentation']
'dom' expands to ['domain']
'dst' expands to ['distance']
'dtd' expands to ['D. T. D.']
'elem' expands to ['element']
'ent' expands to ['entity', 'entry']
'env' expands to ['environment']
'environ' expands to ['environment']
'eol' expands to ['E. O. L.', 'end of line']
'eval' expands to ['E. val', 'evaluate', 'evaluation']
'ex' expands to ['example']
'exc' expands to ['exception']
'exec' expands to ['executable', 'execute']
'expr' expands to ['expression']
'fct' expands to ['function']
'fg' expands to ['foreground']
'fifo' expands to ['fie foe', 'first in first out']
'fmt' expands to ['format']
'fp' expands to ['file pointer']
'func' expands to ['function']
'gen' expands to ['general', 'generic']
'gid' expands to ['G. I. D.', 'group I. D.']
'glob' expands to ['global']
'goto' expands to ['go to']
'gr' expands to ['group']
'hex' expands to ['hexadecimal']
'horiz' expands to ['horizontal', 'horizontally']
'html' expands to ['H. T. M. L.']
'http' expands to ['H. T. T. P.']
'imap' expands to ['I. map']
'impl' expands to ['implementation']
'inc' expands to ['include', 'increment']
'incl' expands to ['include', 'included']
'info' expands to ['information']
'init' expands to ['initial', 'initialize']
'ins' expands to ['insert']
'int' expands to ['integer']
'interp' expands to ['interpreter']
'intro' expands to ['introduction']
'io' expands to ['I. O.', 'input output']
'ip' expands to ['I. P.']
'len' expands to ['length']
'ln' expands to ['line']
'lnk' expands to ['link']
'loc' expands to ['locate', 'location']
'login' expands to ['log in']
'mem' expands to ['memory']
'mk' expands to ['make']
'mnt' expands to ['mount', 'mounted']
'mod' expands to ['mode', 'modified', 'modify']
'msec' expands to ['millisecond']
'msg' expands to ['message']
'mtime' expands to ['M. time']
'nam' expands to ['name']
'nntp' expands to ['N. N. T. P.']
'no' expands to ['number']
'num' expands to ['number']
'obj' expands to ['object']
'oct' expands to ['octal']
'opt' expands to ['optimize', 'option', 'optional']
'os' expands to ['O. S.', 'operating system']
'osf' expands to ['O. S. F.']
'par' expands to ['parameter']
'param' expands to ['parameter']
'pat' expands to ['pattern']
'patt' expands to ['pattern']
'perm' expands to ['permission']
'pkg' expands to ['package']
'pos' expands to ['position', 'positioning']
'prof' expands to ['professional', 'profile', 'profiling']
'proto' expands to ['protocol', 'prototype']
'pty' expands to ['P. T. Y.']
'punc' expands to ['punctuation']
'punct' expands to ['punctuation']
'py' expands to ['P. Y.', 'pie', 'python']
'rand' expands to ['random']
'rd' expands to ['read']
'rect' expands to ['rectangle']
'ref' expands to ['reference']
'reg' expands to ['regular', 'regular expression']
'regex' expands to ['regular expression']
'regexp' expands to ['regular expression']
'rel' expands to ['relative']
'repr' expands to ['represent', 'representation']
'req' expands to ['request']
'rexp' expands to ['regular expression']
'rgb' expands to ['R. G. B.']
'rm' expands to ['remove']
'scr' expands to ['screen']
'sec' expands to ['second']
'sep' expands to ['separator']
'seq' expands to ['sequence']
'serv' expands to ['server']
'sig' expands to ['signal']
'sin' expands to ['sine']
'smtp' expands to ['S. M. T. P.']
'sock' expands to ['socket']
'soundex' expands to ['sound X.']
'spc' expands to ['space']
'src' expands to ['source']
'srv' expands to ['server', 'service']
'stat' expands to ['static', 'statistics']
'std' expands to ['standard']
'stdin' expands to ['S. T. D. in', 'standard in', 'standard input']
'str' expands to ['string']
'sub' expands to ['sub routine']
'sym' expands to ['symbol']
'sync' expands to ['synchronize', 'synchronous']
'sys' expands to ['system']
'temp' expands to ['temporary']
'termid' expands to ['term I. D.', 'terminal I. D.']
'tmp' expands to ['temporary']
'tok' expands to ['token']
'trans' expands to ['transform', 'transformation', 'transition', 'translation', 'transport']
'tst' expands to ['test']
'tty' expands to ['T. T. Y.']
'uid' expands to ['U. I. D.', 'user I. D.']
'undef' expands to ['undefine', 'undefined']
'uniq' expands to ['unique']
'url' expands to ['U. R. L.']
'uu' expands to ['U. U.']
'val' expands to ['value']
'var' expands to ['variable']
'vert' expands to ['vertical', 'vertically']
'win' expands to ['window']
'xml' expands to ['X. M. L.']
'xor' expands to ['X. or', 'exclusive or']


List of unresolved abbreviations

'abbrev': appears in ['this_sym_has_an_other_abbrev']
'unres': appears in ['this_sym_is_unres', 'this_sym_is_unres_too']
'acosh': appears in ['acosh']
'y': appears in ['y']
'x': appears in ['x']
'dyear': appears in ['accept2dyear']
'f': appears in ['f_name', 'f_name2']
'abspath': appears in ['abspath']
'acos': appears in ['acos']


>>> Testing console command: say(['this', 'symbol', 'is', 'unresolved', ',\\comma'], user_input='1\n')
Heard this symbol is unresolved comma
*** Start of source buffer ***
  1: this_sym_is_unres, <CURSOR>

*** End of source buffer ***


>>> Testing console command: print_abbreviations(1)

List of abbreviations

'abs' expands to ['absolute']
'addr' expands to ['address']
'alnum' expands to ['alpha numeric']
'alt' expands to ['alternate', 'alternative']
'arg' expands to ['argument']
'argv' expands to ['arg V.', 'argument value']
'asc' expands to ['ascii']
'asyn' expands to ['asynchronous']
'async' expands to ['asynchronous']
'atan' expands to ['arc tangent']
'atof' expands to ['A. to F.']
'atol' expands to ['A. to L.']
'attr' expands to ['attribute']
'avail' expands to ['available']
'avg' expands to ['average']
'beg' expands to ['begin', 'beginning']
'bg' expands to ['background']
'blk' expands to ['block', 'blocking']
'buf' expands to ['buffer']
'buff' expands to ['buffer']
'builtin' expands to ['built in']
'calc' expands to ['calculate', 'calculated', 'calculation']
'cbk' expands to ['callback']
'cgi' expands to ['C. G. I.']
'char' expands to ['character']
'chg' expands to ['change', 'changed']
'chr' expands to ['character']
'clr' expands to ['clear']
'cmd' expands to ['command']
'cmp' expands to ['compare']
'cntrl' expands to ['control']
'col' expands to ['column']
'concat' expands to ['concatenate']
'cond' expands to ['condition']
'conf' expands to ['configuration', 'configure']
'config' expands to ['configuration', 'configure']
'conn' expands to ['connected']
'cont' expands to ['content', 'context']
'cos' expands to ['cosine']
'cpp' expands to ['C. plus plus']
'ctl' expands to ['control']
'ctrl' expands to ['control']
'cur' expands to ['current', 'cursor']
'curr' expands to ['current']
'db' expands to ['D. B.', 'data base']
'decl' expands to ['declaration', 'declare']
'def' expands to ['deaf', 'default', 'define', 'defined', 'definition']
'delim' expands to ['delimiter']
'dev' expands to ['device']
'dict' expands to ['dictionary']
'dir' expands to ['direction', 'directory']
'div' expands to ['divide']
'doc' expands to ['document', 'documentation']
'dom' expands to ['domain']
'dst' expands to ['distance']
'dtd' expands to ['D. T. D.']
'elem' expands to ['element']
'ent' expands to ['entity', 'entry']
'env' expands to ['environment']
'environ' expands to ['environment']
'eol' expands to ['E. O. L.', 'end of line']
'eval' expands to ['E. val', 'evaluate', 'evaluation']
'ex' expands to ['example']
'exc' expands to ['exception']
'exec' expands to ['executable', 'execute']
'expr' expands to ['expression']
'fct' expands to ['function']
'fg' expands to ['foreground']
'fifo' expands to ['fie foe', 'first in first out']
'fmt' expands to ['format']
'fp' expands to ['file pointer']
'func' expands to ['function']
'gen' expands to ['general', 'generic']
'gid' expands to ['G. I. D.', 'group I. D.']
'glob' expands to ['global']
'goto' expands to ['go to']
'gr' expands to ['group']
'hex' expands to ['hexadecimal']
'horiz' expands to ['horizontal', 'horizontally']
'html' expands to ['H. T. M. L.']
'http' expands to ['H. T. T. P.']
'imap' expands to ['I. map']
'impl' expands to ['implementation']
'inc' expands to ['include', 'increment']
'incl' expands to ['include', 'included']
'info' expands to ['information']
'init' expands to ['initial', 'initialize']
'ins' expands to ['insert']
'int' expands to ['integer']
'interp' expands to ['interpreter']
'intro' expands to ['introduction']
'io' expands to ['I. O.', 'input output']
'ip' expands to ['I. P.']
'len' expands to ['length']
'ln' expands to ['line']
'lnk' expands to ['link']
'loc' expands to ['locate', 'location']
'login' expands to ['log in']
'mem' expands to ['memory']
'mk' expands to ['make']
'mnt' expands to ['mount', 'mounted']
'mod' expands to ['mode', 'modified', 'modify']
'msec' expands to ['millisecond']
'msg' expands to ['message']
'mtime' expands to ['M. time']
'nam' expands to ['name']
'nntp' expands to ['N. N. T. P.']
'no' expands to ['number']
'num' expands to ['number']
'obj' expands to ['object']
'oct' expands to ['octal']
'opt' expands to ['optimize', 'option', 'optional']
'os' expands to ['O. S.', 'operating system']
'osf' expands to ['O. S. F.']
'par' expands to ['parameter']
'param' expands to ['parameter']
'pat' expands to ['pattern']
'patt' expands to ['pattern']
'perm' expands to ['permission']
'pkg' expands to ['package']
'pos' expands to ['position', 'positioning']
'prof' expands to ['professional', 'profile', 'profiling']
'proto' expands to ['protocol', 'prototype']
'pty' expands to ['P. T. Y.']
'punc' expands to ['punctuation']
'punct' expands to ['punctuation']
'py' expands to ['P. Y.', 'pie', 'python']
'rand' expands to ['random']
'rd' expands to ['read']
'rect' expands to ['rectangle']
'ref' expands to ['reference']
'reg' expands to ['regular', 'regular expression']
'regex' expands to ['regular expression']
'regexp' expands to ['regular expression']
'rel' expands to ['relative']
'repr' expands to ['represent', 'representation']
'req' expands to ['request']
'rexp' expands to ['regular expression']
'rgb' expands to ['R. G. B.']
'rm' expands to ['remove']
'scr' expands to ['screen']
'sec' expands to ['second']
'sep' expands to ['separator']
'seq' expands to ['sequence']
'serv' expands to ['server']
'sig' expands to ['signal']
'sin' expands to ['sine']
'smtp' expands to ['S. M. T. P.']
'sock' expands to ['socket']
'soundex' expands to ['sound X.']
'spc' expands to ['space']
'src' expands to ['source']
'srv' expands to ['server', 'service']
'stat' expands to ['static', 'statistics']
'std' expands to ['standard']
'stdin' expands to ['S. T. D. in', 'standard in', 'standard input']
'str' expands to ['string']
'sub' expands to ['sub routine']
'sym' expands to ['symbol']
'sync' expands to ['synchronize', 'synchronous']
'sys' expands to ['system']
'temp' expands to ['temporary']
'termid' expands to ['term I. D.', 'terminal I. D.']
'tmp' expands to ['temporary']
'tok' expands to ['token']
'trans' expands to ['transform', 'transformation', 'transition', 'translation', 'transport']
'tst' expands to ['test']
'tty' expands to ['T. T. Y.']
'uid' expands to ['U. I. D.', 'user I. D.']
'undef' expands to ['undefine', 'undefined']
'uniq' expands to ['unique']
'url' expands to ['U. R. L.']
'uu' expands to ['U. U.']
'val' expands to ['value']
'var' expands to ['variable']
'vert' expands to ['vertical', 'vertically']
'win' expands to ['window']
'xml' expands to ['X. M. L.']
'xor' expands to ['X. or', 'exclusive or']


List of unresolved abbreviations

'abbrev': appears in ['this_sym_has_an_other_abbrev']
'unres': appears in ['this_sym_is_unres', 'this_sym_is_unres_too']
'acosh': appears in ['acosh']
'y': appears in ['y']
'x': appears in ['x']
'dyear': appears in ['accept2dyear']
'f': appears in ['f_name', 'f_name2']
'abspath': appears in ['abspath']
'acos': appears in ['acos']


>>> Testing console command: print_symbols()

API_function: ['A. P. I. function', 'API function']
THIS_SYMBOL_WAS_PARSED_FROM_test_py_std_sym: ['this symbol was parsed from test P. Y. standard sym', 'this symbol was parsed from test P. Y. standard symbol', 'this symbol was parsed from test P. Y. std sym', 'this symbol was parsed from test P. Y. std symbol', 'this symbol was parsed from test pie standard sym', 'this symbol was parsed from test pie standard symbol', 'this symbol was parsed from test pie std sym', 'this symbol was parsed from test pie std symbol', 'this symbol was parsed from test py standard sym', 'this symbol was parsed from test py standard symbol', 'this symbol was parsed from test py std sym', 'this symbol was parsed from test py std symbol', 'this symbol was parsed from test python standard sym', 'this symbol was parsed from test python standard symbol', 'this symbol was parsed from test python std sym', 'this symbol was parsed from test python std symbol']
__abs__: ['abs', 'underscore abs', 'underscore absolute', 'underscore absolute value']
abs: ['abs', 'absolute', 'absolute value']
abspath: ['abs path', 'absolute path', 'abspath']
accept: ['accept']
accept2dyear: ['accept 2 dyear', 'accept two D. year']
access: ['access']
acos: ['A. cos', 'acos', 'arc cos', 'arc cosine']
acosh: ['A. cos H.', 'acosh', 'arc cos H.', 'arc cosine H.', 'hyperbolic arc cosine']
acquire: ['acquire']
f_name: ['F. name']
f_name2: ['F. name 2']
float: ['float']
horiz_pos: ['horiz pos', 'horiz position', 'horiz positioning', 'horizontal pos', 'horizontal position', 'horizontal positioning', 'horizontally pos', 'horizontally position', 'horizontally positioning']
move: ['move']
move_horiz: ['move horiz', 'move horizontal', 'move horizontally']
move_vert: ['move vert', 'move vertical', 'move vertically']
this_sym_has_an_other_abbrev: ['this sym has an other abbrev', 'this symbol has an other abbrev']
this_sym_is_unres: ['this sym is unres', 'this symbol is unres']
this_sym_is_unres_too: ['this sym is unres too', 'this symbol is unres too']
void: ['void']
x: ['X.']
y: ['Y.']
_cached_symbols_as_one_string[a] is:
    access  abs  acosh  acos  abspath  acquire  accept2dyear  accept  __abs__  API_function 
_cached_symbols_as_one_string[f] is:
    float  f_name  f_name2 
_cached_symbols_as_one_string[h] is:
    horiz_pos 
_cached_symbols_as_one_string[m] is:
    move  move_horiz  move_vert 
_cached_symbols_as_one_string[t] is:
    THIS_SYMBOL_WAS_PARSED_FROM_test_py_std_sym  this_sym_is_unres  this_sym_is_unres_too  this_sym_has_an_other_abbrev 
_cached_symbols_as_one_string[v] is:
    void 
_cached_symbols_as_one_string[x] is:
    x 
_cached_symbols_as_one_string[y] is:
    y 


>>> Testing console command: say(['this_sym_is_unres_too\\this symbol is unresolved too', ',\\comma'], user_input='None')
Heard this symbol is unresolved too comma
*** Start of source buffer ***
  1: this_sym_is_unres, this_sym_is_unres_too, <CURSOR>

*** End of source buffer ***


>>> Testing console command: print_symbols()

API_function: ['A. P. I. function', 'API function']
THIS_SYMBOL_WAS_PARSED_FROM_test_py_std_sym: ['this symbol was parsed from test P. Y. standard sym', 'this symbol was parsed from test P. Y. standard symbol', 'this symbol was parsed from test P. Y. std sym', 'this symbol was parsed from test P. Y. std symbol', 'this symbol was parsed from test pie standard sym', 'this symbol was parsed from test pie standard symbol', 'this symbol was parsed from test pie std sym', 'this symbol was parsed from test pie std symbol', 'this symbol was parsed from test py standard sym', 'this symbol was parsed from test py standard symbol', 'this symbol was parsed from test py std sym', 'this symbol was parsed from test py std symbol', 'this symbol was parsed from test python standard sym', 'this symbol was parsed from test python standard symbol', 'this symbol was parsed from test python std sym', 'this symbol was parsed from test python std symbol']
__abs__: ['abs', 'underscore abs', 'underscore absolute', 'underscore absolute value']
abs: ['abs', 'absolute', 'absolute value']
abspath: ['abs path', 'absolute path', 'abspath']
accept: ['accept']
accept2dyear: ['accept 2 dyear', 'accept two D. year']
access: ['access']
acos: ['A. cos', 'acos', 'arc cos', 'arc cosine']
acosh: ['A. cos H.', 'acosh', 'arc cos H.', 'arc cosine H.', 'hyperbolic arc cosine']
acquire: ['acquire']
f_name: ['F. name']
f_name2: ['F. name 2']
float: ['float']
horiz_pos: ['horiz pos', 'horiz position', 'horiz positioning', 'horizontal pos', 'horizontal position', 'horizontal positioning', 'horizontally pos', 'horizontally position', 'horizontally positioning']
move: ['move']
move_horiz: ['move horiz', 'move horizontal', 'move horizontally']
move_vert: ['move vert', 'move vertical', 'move vertically']
this_sym_has_an_other_abbrev: ['this sym has an other abbrev', 'this symbol has an other abbrev']
this_sym_is_unres: ['this sym is unres', 'this symbol is unres']
this_sym_is_unres_too: ['this sym is unres too', 'this symbol is unres too']
void: ['void']
x: ['X.']
y: ['Y.']
_cached_symbols_as_one_string[a] is:
    access  abs  acosh  acos  abspath  acquire  accept2dyear  accept  __abs__  API_function 
_cached_symbols_as_one_string[f] is:
    float  f_name  f_name2 
_cached_symbols_as_one_string[h] is:
    horiz_pos 
_cached_symbols_as_one_string[m] is:
    move  move_horiz  move_vert 
_cached_symbols_as_one_string[t] is:
    THIS_SYMBOL_WAS_PARSED_FROM_test_py_std_sym  this_sym_is_unres  this_sym_is_unres_too  this_sym_has_an_other_abbrev 
_cached_symbols_as_one_string[v] is:
    void 
_cached_symbols_as_one_string[x] is:
    x 
_cached_symbols_as_one_string[y] is:
    y 


>>> Testing console command: print_abbreviations(1)

List of abbreviations

'abs' expands to ['absolute']
'addr' expands to ['address']
'alnum' expands to ['alpha numeric']
'alt' expands to ['alternate', 'alternative']
'arg' expands to ['argument']
'argv' expands to ['arg V.', 'argument value']
'asc' expands to ['ascii']
'asyn' expands to ['asynchronous']
'async' expands to ['asynchronous']
'atan' expands to ['arc tangent']
'atof' expands to ['A. to F.']
'atol' expands to ['A. to L.']
'attr' expands to ['attribute']
'avail' expands to ['available']
'avg' expands to ['average']
'beg' expands to ['begin', 'beginning']
'bg' expands to ['background']
'blk' expands to ['block', 'blocking']
'buf' expands to ['buffer']
'buff' expands to ['buffer']
'builtin' expands to ['built in']
'calc' expands to ['calculate', 'calculated', 'calculation']
'cbk' expands to ['callback']
'cgi' expands to ['C. G. I.']
'char' expands to ['character']
'chg' expands to ['change', 'changed']
'chr' expands to ['character']
'clr' expands to ['clear']
'cmd' expands to ['command']
'cmp' expands to ['compare']
'cntrl' expands to ['control']
'col' expands to ['column']
'concat' expands to ['concatenate']
'cond' expands to ['condition']
'conf' expands to ['configuration', 'configure']
'config' expands to ['configuration', 'configure']
'conn' expands to ['connected']
'cont' expands to ['content', 'context']
'cos' expands to ['cosine']
'cpp' expands to ['C. plus plus']
'ctl' expands to ['control']
'ctrl' expands to ['control']
'cur' expands to ['current', 'cursor']
'curr' expands to ['current']
'db' expands to ['D. B.', 'data base']
'decl' expands to ['declaration', 'declare']
'def' expands to ['deaf', 'default', 'define', 'defined', 'definition']
'delim' expands to ['delimiter']
'dev' expands to ['device']
'dict' expands to ['dictionary']
'dir' expands to ['direction', 'directory']
'div' expands to ['divide']
'doc' expands to ['document', 'documentation']
'dom' expands to ['domain']
'dst' expands to ['distance']
'dtd' expands to ['D. T. D.']
'elem' expands to ['element']
'ent' expands to ['entity', 'entry']
'env' expands to ['environment']
'environ' expands to ['environment']
'eol' expands to ['E. O. L.', 'end of line']
'eval' expands to ['E. val', 'evaluate', 'evaluation']
'ex' expands to ['example']
'exc' expands to ['exception']
'exec' expands to ['executable', 'execute']
'expr' expands to ['expression']
'fct' expands to ['function']
'fg' expands to ['foreground']
'fifo' expands to ['fie foe', 'first in first out']
'fmt' expands to ['format']
'fp' expands to ['file pointer']
'func' expands to ['function']
'gen' expands to ['general', 'generic']
'gid' expands to ['G. I. D.', 'group I. D.']
'glob' expands to ['global']
'goto' expands to ['go to']
'gr' expands to ['group']
'hex' expands to ['hexadecimal']
'horiz' expands to ['horizontal', 'horizontally']
'html' expands to ['H. T. M. L.']
'http' expands to ['H. T. T. P.']
'imap' expands to ['I. map']
'impl' expands to ['implementation']
'inc' expands to ['include', 'increment']
'incl' expands to ['include', 'included']
'info' expands to ['information']
'init' expands to ['initial', 'initialize']
'ins' expands to ['insert']
'int' expands to ['integer']
'interp' expands to ['interpreter']
'intro' expands to ['introduction']
'io' expands to ['I. O.', 'input output']
'ip' expands to ['I. P.']
'len' expands to ['length']
'ln' expands to ['line']
'lnk' expands to ['link']
'loc' expands to ['locate', 'location']
'login' expands to ['log in']
'mem' expands to ['memory']
'mk' expands to ['make']
'mnt' expands to ['mount', 'mounted']
'mod' expands to ['mode', 'modified', 'modify']
'msec' expands to ['millisecond']
'msg' expands to ['message']
'mtime' expands to ['M. time']
'nam' expands to ['name']
'nntp' expands to ['N. N. T. P.']
'no' expands to ['number']
'num' expands to ['number']
'obj' expands to ['object']
'oct' expands to ['octal']
'opt' expands to ['optimize', 'option', 'optional']
'os' expands to ['O. S.', 'operating system']
'osf' expands to ['O. S. F.']
'par' expands to ['parameter']
'param' expands to ['parameter']
'pat' expands to ['pattern']
'patt' expands to ['pattern']
'perm' expands to ['permission']
'pkg' expands to ['package']
'pos' expands to ['position', 'positioning']
'prof' expands to ['professional', 'profile', 'profiling']
'proto' expands to ['protocol', 'prototype']
'pty' expands to ['P. T. Y.']
'punc' expands to ['punctuation']
'punct' expands to ['punctuation']
'py' expands to ['P. Y.', 'pie', 'python']
'rand' expands to ['random']
'rd' expands to ['read']
'rect' expands to ['rectangle']
'ref' expands to ['reference']
'reg' expands to ['regular', 'regular expression']
'regex' expands to ['regular expression']
'regexp' expands to ['regular expression']
'rel' expands to ['relative']
'repr' expands to ['represent', 'representation']
'req' expands to ['request']
'rexp' expands to ['regular expression']
'rgb' expands to ['R. G. B.']
'rm' expands to ['remove']
'scr' expands to ['screen']
'sec' expands to ['second']
'sep' expands to ['separator']
'seq' expands to ['sequence']
'serv' expands to ['server']
'sig' expands to ['signal']
'sin' expands to ['sine']
'smtp' expands to ['S. M. T. P.']
'sock' expands to ['socket']
'soundex' expands to ['sound X.']
'spc' expands to ['space']
'src' expands to ['source']
'srv' expands to ['server', 'service']
'stat' expands to ['static', 'statistics']
'std' expands to ['standard']
'stdin' expands to ['S. T. D. in', 'standard in', 'standard input']
'str' expands to ['string']
'sub' expands to ['sub routine']
'sym' expands to ['symbol']
'sync' expands to ['synchronize', 'synchronous']
'sys' expands to ['system']
'temp' expands to ['temporary']
'termid' expands to ['term I. D.', 'terminal I. D.']
'tmp' expands to ['temporary']
'tok' expands to ['token']
'trans' expands to ['transform', 'transformation', 'transition', 'translation', 'transport']
'tst' expands to ['test']
'tty' expands to ['T. T. Y.']
'uid' expands to ['U. I. D.', 'user I. D.']
'undef' expands to ['undefine', 'undefined']
'uniq' expands to ['unique']
'url' expands to ['U. R. L.']
'uu' expands to ['U. U.']
'val' expands to ['value']
'var' expands to ['variable']
'vert' expands to ['vertical', 'vertically']
'win' expands to ['window']
'xml' expands to ['X. M. L.']
'xor' expands to ['X. or', 'exclusive or']


List of unresolved abbreviations

'abbrev': appears in ['this_sym_has_an_other_abbrev']
'unres': appears in ['this_sym_is_unres', 'this_sym_is_unres_too']
'acosh': appears in ['acosh']
'y': appears in ['y']
'x': appears in ['x']
'dyear': appears in ['accept2dyear']
'f': appears in ['f_name', 'f_name2']
'abspath': appears in ['abspath']
'acos': appears in ['acos']


>>> Testing console command: say(['file', 'name', ',\\comma'], user_input='1\n')
Heard file name comma
*** Start of source buffer ***
  1: this_sym_is_unres, this_sym_is_unres_too, f_name, <CURSOR>

*** End of source buffer ***


>>> Testing console command: print_symbols()

API_function: ['A. P. I. function', 'API function']
THIS_SYMBOL_WAS_PARSED_FROM_test_py_std_sym: ['this symbol was parsed from test P. Y. standard sym', 'this symbol was parsed from test P. Y. standard symbol', 'this symbol was parsed from test P. Y. std sym', 'this symbol was parsed from test P. Y. std symbol', 'this symbol was parsed from test pie standard sym', 'this symbol was parsed from test pie standard symbol', 'this symbol was parsed from test pie std sym', 'this symbol was parsed from test pie std symbol', 'this symbol was parsed from test py standard sym', 'this symbol was parsed from test py standard symbol', 'this symbol was parsed from test py std sym', 'this symbol was parsed from test py std symbol', 'this symbol was parsed from test python standard sym', 'this symbol was parsed from test python standard symbol', 'this symbol was parsed from test python std sym', 'this symbol was parsed from test python std symbol']
__abs__: ['abs', 'underscore abs', 'underscore absolute', 'underscore absolute value']
abs: ['abs', 'absolute', 'absolute value']
abspath: ['abs path', 'absolute path', 'abspath']
accept: ['accept']
accept2dyear: ['accept 2 dyear', 'accept two D. year']
access: ['access']
acos: ['A. cos', 'acos', 'arc cos', 'arc cosine']
acosh: ['A. cos H.', 'acosh', 'arc cos H.', 'arc cosine H.', 'hyperbolic arc cosine']
acquire: ['acquire']
f_name: ['F. name']
f_name2: ['F. name 2']
float: ['float']
horiz_pos: ['horiz pos', 'horiz position', 'horiz positioning', 'horizontal pos', 'horizontal position', 'horizontal positioning', 'horizontally pos', 'horizontally position', 'horizontally positioning']
move: ['move']
move_horiz: ['move horiz', 'move horizontal', 'move horizontally']
move_vert: ['move vert', 'move vertical', 'move vertically']
this_sym_has_an_other_abbrev: ['this sym has an other abbrev', 'this symbol has an other abbrev']
this_sym_is_unres: ['this sym is unres', 'this symbol is unres']
this_sym_is_unres_too: ['this sym is unres too', 'this symbol is unres too']
void: ['void']
x: ['X.']
y: ['Y.']
_cached_symbols_as_one_string[a] is:
    access  abs  acosh  acos  abspath  acquire  accept2dyear  accept  __abs__  API_function 
_cached_symbols_as_one_string[f] is:
    float  f_name  f_name2 
_cached_symbols_as_one_string[h] is:
    horiz_pos 
_cached_symbols_as_one_string[m] is:
    move  move_horiz  move_vert 
_cached_symbols_as_one_string[t] is:
    THIS_SYMBOL_WAS_PARSED_FROM_test_py_std_sym  this_sym_is_unres  this_sym_is_unres_too  this_sym_has_an_other_abbrev 
_cached_symbols_as_one_string[v] is:
    void 
_cached_symbols_as_one_string[x] is:
    x 
_cached_symbols_as_one_string[y] is:
    y 


>>> Testing console command: print_abbreviations(1)

List of abbreviations

'abs' expands to ['absolute']
'addr' expands to ['address']
'alnum' expands to ['alpha numeric']
'alt' expands to ['alternate', 'alternative']
'arg' expands to ['argument']
'argv' expands to ['arg V.', 'argument value']
'asc' expands to ['ascii']
'asyn' expands to ['asynchronous']
'async' expands to ['asynchronous']
'atan' expands to ['arc tangent']
'atof' expands to ['A. to F.']
'atol' expands to ['A. to L.']
'attr' expands to ['attribute']
'avail' expands to ['available']
'avg' expands to ['average']
'beg' expands to ['begin', 'beginning']
'bg' expands to ['background']
'blk' expands to ['block', 'blocking']
'buf' expands to ['buffer']
'buff' expands to ['buffer']
'builtin' expands to ['built in']
'calc' expands to ['calculate', 'calculated', 'calculation']
'cbk' expands to ['callback']
'cgi' expands to ['C. G. I.']
'char' expands to ['character']
'chg' expands to ['change', 'changed']
'chr' expands to ['character']
'clr' expands to ['clear']
'cmd' expands to ['command']
'cmp' expands to ['compare']
'cntrl' expands to ['control']
'col' expands to ['column']
'concat' expands to ['concatenate']
'cond' expands to ['condition']
'conf' expands to ['configuration', 'configure']
'config' expands to ['configuration', 'configure']
'conn' expands to ['connected']
'cont' expands to ['content', 'context']
'cos' expands to ['cosine']
'cpp' expands to ['C. plus plus']
'ctl' expands to ['control']
'ctrl' expands to ['control']
'cur' expands to ['current', 'cursor']
'curr' expands to ['current']
'db' expands to ['D. B.', 'data base']
'decl' expands to ['declaration', 'declare']
'def' expands to ['deaf', 'default', 'define', 'defined', 'definition']
'delim' expands to ['delimiter']
'dev' expands to ['device']
'dict' expands to ['dictionary']
'dir' expands to ['direction', 'directory']
'div' expands to ['divide']
'doc' expands to ['document', 'documentation']
'dom' expands to ['domain']
'dst' expands to ['distance']
'dtd' expands to ['D. T. D.']
'elem' expands to ['element']
'ent' expands to ['entity', 'entry']
'env' expands to ['environment']
'environ' expands to ['environment']
'eol' expands to ['E. O. L.', 'end of line']
'eval' expands to ['E. val', 'evaluate', 'evaluation']
'ex' expands to ['example']
'exc' expands to ['exception']
'exec' expands to ['executable', 'execute']
'expr' expands to ['expression']
'fct' expands to ['function']
'fg' expands to ['foreground']
'fifo' expands to ['fie foe', 'first in first out']
'fmt' expands to ['format']
'fp' expands to ['file pointer']
'func' expands to ['function']
'gen' expands to ['general', 'generic']
'gid' expands to ['G. I. D.', 'group I. D.']
'glob' expands to ['global']
'goto' expands to ['go to']
'gr' expands to ['group']
'hex' expands to ['hexadecimal']
'horiz' expands to ['horizontal', 'horizontally']
'html' expands to ['H. T. M. L.']
'http' expands to ['H. T. T. P.']
'imap' expands to ['I. map']
'impl' expands to ['implementation']
'inc' expands to ['include', 'increment']
'incl' expands to ['include', 'included']
'info' expands to ['information']
'init' expands to ['initial', 'initialize']
'ins' expands to ['insert']
'int' expands to ['integer']
'interp' expands to ['interpreter']
'intro' expands to ['introduction']
'io' expands to ['I. O.', 'input output']
'ip' expands to ['I. P.']
'len' expands to ['length']
'ln' expands to ['line']
'lnk' expands to ['link']
'loc' expands to ['locate', 'location']
'login' expands to ['log in']
'mem' expands to ['memory']
'mk' expands to ['make']
'mnt' expands to ['mount', 'mounted']
'mod' expands to ['mode', 'modified', 'modify']
'msec' expands to ['millisecond']
'msg' expands to ['message']
'mtime' expands to ['M. time']
'nam' expands to ['name']
'nntp' expands to ['N. N. T. P.']
'no' expands to ['number']
'num' expands to ['number']
'obj' expands to ['object']
'oct' expands to ['octal']
'opt' expands to ['optimize', 'option', 'optional']
'os' expands to ['O. S.', 'operating system']
'osf' expands to ['O. S. F.']
'par' expands to ['parameter']
'param' expands to ['parameter']
'pat' expands to ['pattern']
'patt' expands to ['pattern']
'perm' expands to ['permission']
'pkg' expands to ['package']
'pos' expands to ['position', 'positioning']
'prof' expands to ['professional', 'profile', 'profiling']
'proto' expands to ['protocol', 'prototype']
'pty' expands to ['P. T. Y.']
'punc' expands to ['punctuation']
'punct' expands to ['punctuation']
'py' expands to ['P. Y.', 'pie', 'python']
'rand' expands to ['random']
'rd' expands to ['read']
'rect' expands to ['rectangle']
'ref' expands to ['reference']
'reg' expands to ['regular', 'regular expression']
'regex' expands to ['regular expression']
'regexp' expands to ['regular expression']
'rel' expands to ['relative']
'repr' expands to ['represent', 'representation']
'req' expands to ['request']
'rexp' expands to ['regular expression']
'rgb' expands to ['R. G. B.']
'rm' expands to ['remove']
'scr' expands to ['screen']
'sec' expands to ['second']
'sep' expands to ['separator']
'seq' expands to ['sequence']
'serv' expands to ['server']
'sig' expands to ['signal']
'sin' expands to ['sine']
'smtp' expands to ['S. M. T. P.']
'sock' expands to ['socket']
'soundex' expands to ['sound X.']
'spc' expands to ['space']
'src' expands to ['source']
'srv' expands to ['server', 'service']
'stat' expands to ['static', 'statistics']
'std' expands to ['standard']
'stdin' expands to ['S. T. D. in', 'standard in', 'standard input']
'str' expands to ['string']
'sub' expands to ['sub routine']
'sym' expands to ['symbol']
'sync' expands to ['synchronize', 'synchronous']
'sys' expands to ['system']
'temp' expands to ['temporary']
'termid' expands to ['term I. D.', 'terminal I. D.']
'tmp' expands to ['temporary']
'tok' expands to ['token']
'trans' expands to ['transform', 'transformation', 'transition', 'translation', 'transport']
'tst' expands to ['test']
'tty' expands to ['T. T. Y.']
'uid' expands to ['U. I. D.', 'user I. D.']
'undef' expands to ['undefine', 'undefined']
'uniq' expands to ['unique']
'url' expands to ['U. R. L.']
'uu' expands to ['U. U.']
'val' expands to ['value']
'var' expands to ['variable']
'vert' expands to ['vertical', 'vertically']
'win' expands to ['window']
'xml' expands to ['X. M. L.']
'xor' expands to ['X. or', 'exclusive or']


List of unresolved abbreviations

'abbrev': appears in ['this_sym_has_an_other_abbrev']
'unres': appears in ['this_sym_is_unres', 'this_sym_is_unres_too']
'acosh': appears in ['acosh']
'y': appears in ['y']
'x': appears in ['x']
'dyear': appears in ['accept2dyear']
'f': appears in ['f_name', 'f_name2']
'abspath': appears in ['abspath']
'acos': appears in ['acos']


>>> Testing console command: say(['application', 'programming', 'interface', 'function', ',\\comma'], user_input='1\n')
Heard application programming interface function comma
*** Start of source buffer ***
  1: this_sym_is_unres, this_sym_is_unres_too, f_name, API_function, <CURSOR>

*** End of source buffer ***


>>> Testing console command: print_abbreviations(1)

List of abbreviations

'abs' expands to ['absolute']
'addr' expands to ['address']
'alnum' expands to ['alpha numeric']
'alt' expands to ['alternate', 'alternative']
'arg' expands to ['argument']
'argv' expands to ['arg V.', 'argument value']
'asc' expands to ['ascii']
'asyn' expands to ['asynchronous']
'async' expands to ['asynchronous']
'atan' expands to ['arc tangent']
'atof' expands to ['A. to F.']
'atol' expands to ['A. to L.']
'attr' expands to ['attribute']
'avail' expands to ['available']
'avg' expands to ['average']
'beg' expands to ['begin', 'beginning']
'bg' expands to ['background']
'blk' expands to ['block', 'blocking']
'buf' expands to ['buffer']
'buff' expands to ['buffer']
'builtin' expands to ['built in']
'calc' expands to ['calculate', 'calculated', 'calculation']
'cbk' expands to ['callback']
'cgi' expands to ['C. G. I.']
'char' expands to ['character']
'chg' expands to ['change', 'changed']
'chr' expands to ['character']
'clr' expands to ['clear']
'cmd' expands to ['command']
'cmp' expands to ['compare']
'cntrl' expands to ['control']
'col' expands to ['column']
'concat' expands to ['concatenate']
'cond' expands to ['condition']
'conf' expands to ['configuration', 'configure']
'config' expands to ['configuration', 'configure']
'conn' expands to ['connected']
'cont' expands to ['content', 'context']
'cos' expands to ['cosine']
'cpp' expands to ['C. plus plus']
'ctl' expands to ['control']
'ctrl' expands to ['control']
'cur' expands to ['current', 'cursor']
'curr' expands to ['current']
'db' expands to ['D. B.', 'data base']
'decl' expands to ['declaration', 'declare']
'def' expands to ['deaf', 'default', 'define', 'defined', 'definition']
'delim' expands to ['delimiter']
'dev' expands to ['device']
'dict' expands to ['dictionary']
'dir' expands to ['direction', 'directory']
'div' expands to ['divide']
'doc' expands to ['document', 'documentation']
'dom' expands to ['domain']
'dst' expands to ['distance']
'dtd' expands to ['D. T. D.']
'elem' expands to ['element']
'ent' expands to ['entity', 'entry']
'env' expands to ['environment']
'environ' expands to ['environment']
'eol' expands to ['E. O. L.', 'end of line']
'eval' expands to ['E. val', 'evaluate', 'evaluation']
'ex' expands to ['example']
'exc' expands to ['exception']
'exec' expands to ['executable', 'execute']
'expr' expands to ['expression']
'fct' expands to ['function']
'fg' expands to ['foreground']
'fifo' expands to ['fie foe', 'first in first out']
'fmt' expands to ['format']
'fp' expands to ['file pointer']
'func' expands to ['function']
'gen' expands to ['general', 'generic']
'gid' expands to ['G. I. D.', 'group I. D.']
'glob' expands to ['global']
'goto' expands to ['go to']
'gr' expands to ['group']
'hex' expands to ['hexadecimal']
'horiz' expands to ['horizontal', 'horizontally']
'html' expands to ['H. T. M. L.']
'http' expands to ['H. T. T. P.']
'imap' expands to ['I. map']
'impl' expands to ['implementation']
'inc' expands to ['include', 'increment']
'incl' expands to ['include', 'included']
'info' expands to ['information']
'init' expands to ['initial', 'initialize']
'ins' expands to ['insert']
'int' expands to ['integer']
'interp' expands to ['interpreter']
'intro' expands to ['introduction']
'io' expands to ['I. O.', 'input output']
'ip' expands to ['I. P.']
'len' expands to ['length']
'ln' expands to ['line']
'lnk' expands to ['link']
'loc' expands to ['locate', 'location']
'login' expands to ['log in']
'mem' expands to ['memory']
'mk' expands to ['make']
'mnt' expands to ['mount', 'mounted']
'mod' expands to ['mode', 'modified', 'modify']
'msec' expands to ['millisecond']
'msg' expands to ['message']
'mtime' expands to ['M. time']
'nam' expands to ['name']
'nntp' expands to ['N. N. T. P.']
'no' expands to ['number']
'num' expands to ['number']
'obj' expands to ['object']
'oct' expands to ['octal']
'opt' expands to ['optimize', 'option', 'optional']
'os' expands to ['O. S.', 'operating system']
'osf' expands to ['O. S. F.']
'par' expands to ['parameter']
'param' expands to ['parameter']
'pat' expands to ['pattern']
'patt' expands to ['pattern']
'perm' expands to ['permission']
'pkg' expands to ['package']
'pos' expands to ['position', 'positioning']
'prof' expands to ['professional', 'profile', 'profiling']
'proto' expands to ['protocol', 'prototype']
'pty' expands to ['P. T. Y.']
'punc' expands to ['punctuation']
'punct' expands to ['punctuation']
'py' expands to ['P. Y.', 'pie', 'python']
'rand' expands to ['random']
'rd' expands to ['read']
'rect' expands to ['rectangle']
'ref' expands to ['reference']
'reg' expands to ['regular', 'regular expression']
'regex' expands to ['regular expression']
'regexp' expands to ['regular expression']
'rel' expands to ['relative']
'repr' expands to ['represent', 'representation']
'req' expands to ['request']
'rexp' expands to ['regular expression']
'rgb' expands to ['R. G. B.']
'rm' expands to ['remove']
'scr' expands to ['screen']
'sec' expands to ['second']
'sep' expands to ['separator']
'seq' expands to ['sequence']
'serv' expands to ['server']
'sig' expands to ['signal']
'sin' expands to ['sine']
'smtp' expands to ['S. M. T. P.']
'sock' expands to ['socket']
'soundex' expands to ['sound X.']
'spc' expands to ['space']
'src' expands to ['source']
'srv' expands to ['server', 'service']
'stat' expands to ['static', 'statistics']
'std' expands to ['standard']
'stdin' expands to ['S. T. D. in', 'standard in', 'standard input']
'str' expands to ['string']
'sub' expands to ['sub routine']
'sym' expands to ['symbol']
'sync' expands to ['synchronize', 'synchronous']
'sys' expands to ['system']
'temp' expands to ['temporary']
'termid' expands to ['term I. D.', 'terminal I. D.']
'tmp' expands to ['temporary']
'tok' expands to ['token']
'trans' expands to ['transform', 'transformation', 'transition', 'translation', 'transport']
'tst' expands to ['test']
'tty' expands to ['T. T. Y.']
'uid' expands to ['U. I. D.', 'user I. D.']
'undef' expands to ['undefine', 'undefined']
'uniq' expands to ['unique']
'url' expands to ['U. R. L.']
'uu' expands to ['U. U.']
'val' expands to ['value']
'var' expands to ['variable']
'vert' expands to ['vertical', 'vertically']
'win' expands to ['window']
'xml' expands to ['X. M. L.']
'xor' expands to ['X. or', 'exclusive or']


List of unresolved abbreviations

'abbrev': appears in ['this_sym_has_an_other_abbrev']
'unres': appears in ['this_sym_is_unres', 'this_sym_is_unres_too']
'acosh': appears in ['acosh']
'y': appears in ['y']
'x': appears in ['x']
'dyear': appears in ['accept2dyear']
'f': appears in ['f_name', 'f_name2']
'abspath': appears in ['abspath']
'acos': appears in ['acos']


>>> Testing console command: quit(save_speech_files=0, disconnect=0)



*******************************************************************************
* Name        : basic_correction
* Description : Testing basic correction infrastructure with ResMgr.
*******************************************************************************

WARNING: source file 'blah.py' doesn't exist.
*** Start of source buffer ***
  1: <CURSOR>

*** End of source buffer ***

***Testing initial state***


0 stored utterances, as expected


recent dictation is empty, as expected


***Some simple dictation***



>>> Testing console command: say(['class', 'clown', 'inherits', 'from', 'student'], user_input='0
0
')
Heard class clown inherits from student
*** Start of source buffer ***
  1: class Clown(student<CURSOR>):
  2:     

*** End of source buffer ***


>>> Testing console command: say(['class', 'body'], user_input='')
Heard class body
*** Start of source buffer ***
  1: class Clown(student):
  2:     <CURSOR>

*** End of source buffer ***


>>> Testing console command: say(['define', 'method', 'popularity', 'method', 'body'], user_input='0
')
Heard define method popularity method body
*** Start of source buffer ***
  1: class Clown(student):
  2:     def popularity(self):
  3:         <CURSOR>

*** End of source buffer ***


>>> Testing console command: say(['return', 'eight'], user_input='')
Heard return eight
*** Start of source buffer ***
  1: class Clown(student):
  2:     def popularity(self):
  3:         return 8<CURSOR>

*** End of source buffer ***

***Testing state***


4 stored utterances, as expected


4 recently dictated utterances, as expected


***Testing scratch that***

scratching 1

*** Start of source buffer ***
  1: class Clown(student):
  2:     def popularity(self):
  3:         <CURSOR>

*** End of source buffer ***
scratch 1 succeeded as expected

3 stored utterances, as expected


3 recently dictated utterances, as expected


***Moving cursor manually***

*** Start of source buffer ***
  1: <CURSOR>class Clown(student):
  2:     def popularity(self):
  3:         

*** End of source buffer ***

***Testing scratch that following manual move***

scratching 1

*** Start of source buffer ***
  1: class Clown(student):
  2:     <CURSOR>

*** End of source buffer ***
scratch 1 succeeded as expected

2 stored utterances, as expected


2 recently dictated utterances, as expected



>>> Testing console command: say(['define', 'method', 'grades', 'method', 'body', 'return', 'B.'], user_input='0
2
')
Heard define method grades method body return B.
*** Start of source buffer ***
  1: class Clown(student):
  2:     def grades(self):
  3:         return b<CURSOR>

*** End of source buffer ***

3 stored utterances, as expected


3 recently dictated utterances, as expected



>>> Testing console command: say(['select', 'clown'], user_input='None')
Heard select clown
*** Start of source buffer ***
  1: class <SEL_START>Clown<SEL_END>(student):
  2:     def grades(self):
  3:         return b

*** End of source buffer ***

***Manually changing text

*** Start of source buffer ***
  1: class president<CURSOR>(student):
  2:     def grades(self):
  3:         return b

*** End of source buffer ***

***Testing scratch that following manual change***

scratching 1

scratch 1 failed as expected
WARNING: source file 'blahblah.py' doesn't exist.
*** Start of source buffer ***
  1: <CURSOR>

*** End of source buffer ***

***Testing whether symbol "Cloud" exists before dictation***

symbol Cloud did not exist, as expected


>>> Testing console command: say(['class', 'cloud', 'inherits', 'from', 'student'], user_input='0
0
')
Heard class cloud inherits from student
*** Start of source buffer ***
  1: class Cloud(student<CURSOR>):
  2:     

*** End of source buffer ***


>>> Testing console command: say(['class', 'body'], user_input='')
Heard class body
*** Start of source buffer ***
  1: class Cloud(student):
  2:     <CURSOR>

*** End of source buffer ***


>>> Testing console command: say(['fine', 'method', 'popularity', 'method', 'body'], user_input='0
')
Heard fine method popularity method body
*** Start of source buffer ***
  1: class Cloud(student):
  2:     fine_method_popularity<CURSOR>

*** End of source buffer ***


>>> Testing console command: say(['return', 'eight'], user_input='')
Heard return eight
*** Start of source buffer ***
  1: class Cloud(student):
  2:     fine_method_popularityreturn 8<CURSOR>

*** End of source buffer ***

***Testing state***


4 stored utterances, as expected


4 recently dictated utterances, as expected


***Testing symbol addition***

symbol Cloud has spoken forms ['cloud']
symbol fine_method_popularity has spoken forms ['fine method popularity']

***Testing correction of recent utterance***

detecting changes
utterance 2: change = {'fine': 'define'}
word fine being replaced with define
utterance 2 was changed 
utterance 2 was corrected
about to reinterpret
*** Start of source buffer ***
  1: class Cloud(student):
  2:     <CURSOR>

*** End of source buffer ***
*** Start of source buffer ***
  1: class Cloud(student):
  2:     def popularity(self):
  3:         <CURSOR>

*** End of source buffer ***
*** Start of source buffer ***
  1: class Cloud(student):
  2:     def popularity(self):
  3:         return 8<CURSOR>

*** End of source buffer ***

all utterances from 2 to the present
were reinterpreted, as expected


***Testing state***


4 stored utterances, as expected


4 recently dictated utterances, as expected


***Testing symbol removal on correction***

symbol fine_method_popularity did not exist, as expected

***Testing correction of another recent utterance***

detecting changes
utterance 4: change = {'cloud': 'clown'}
word cloud being replaced with clown
utterance 4 was changed 
utterance 4 was corrected
about to reinterpret
*** Start of source buffer ***
  1: <CURSOR>

*** End of source buffer ***
*** Start of source buffer ***
  1: class Clown(student<CURSOR>):
  2:     

*** End of source buffer ***
*** Start of source buffer ***
  1: class Clown(student):
  2:     <CURSOR>

*** End of source buffer ***
*** Start of source buffer ***
  1: class Clown(student):
  2:     def popularity(self):
  3:         <CURSOR>

*** End of source buffer ***
*** Start of source buffer ***
  1: class Clown(student):
  2:     def popularity(self):
  3:         return 8<CURSOR>

*** End of source buffer ***

all utterances from 4 to the present
were reinterpreted, as expected


***Testing state***


4 stored utterances, as expected


4 recently dictated utterances, as expected


***Testing symbol removal on correction***

symbol Cloud did not exist, as expected

***Testing whether symbol "excess" exists before dictation***

symbol excess did not exist, as expected


>>> Testing console command: say(['new', 'line'], user_input='')
Heard new line
*** Start of source buffer ***
  1: class Clown(student):
  2:     def popularity(self):
  3:         return 8
  4:     <CURSOR>

*** End of source buffer ***


>>> Testing console command: say(['back indent'], user_input='')
Heard back indent
*** Start of source buffer ***
  1: class Clown(student):
  2:     def popularity(self):
  3:         return 8
  4: <CURSOR>

*** End of source buffer ***


>>> Testing console command: say(['excess', 'equals', 'zero'], user_input='0
')
Heard excess equals zero
*** Start of source buffer ***
  1: class Clown(student):
  2:     def popularity(self):
  3:         return 8
  4: excess = 0<CURSOR>

*** End of source buffer ***

***Testing symbol addition***

symbol excess has spoken forms ['excess']

***Manually changing text

*** Start of source buffer ***
  1: class Clown(student):
  2:     def popularity(self):
  3:         return 8
  4: excess<CURSOR>

*** End of source buffer ***

***Testing state***


7 stored utterances, as expected


7 recently dictated utterances, as expected


***Testing failed correction of a recent utterance***


don't expect to be able to correct error 1 utterances ago
because can_reinterpret returned false, but we'll try anyway

detecting changes
utterance 1: change = {'excess': 'success'}
word excess being replaced with success
utterance 1 was changed 
utterance 1 was corrected
about to reinterpret

reinterpretation failed, as expected


***Testing failed symbol addition***

(reinterpretation should have failed, so symbol "success" should
not have been added)

symbol success did not exist, as expected

***Testing symbol removal***

(despite re-interpretation failure, incorrect symbol "excess"
should have been removed)

symbol excess did not exist, as expected

***Testing whether symbol "results" exists before dictation***

symbol results did not exist, as expected

***Fixing error manually***

*** Start of source buffer ***
  1: class Clown(student):
  2:     def popularity(self):
  3:         return 8
  4: <CURSOR>

*** End of source buffer ***

***Testing state***


7 stored utterances, as expected


7 recently dictated utterances, as expected



>>> Testing console command: say(['excess', 'equals', 'one', 'new', 'line'], user_input='0
')
Heard excess equals one new line
  2:     def popularity(self):
  3:         return 8
  4: excess = 1
  5: <CURSOR>

*** End of source buffer ***


>>> Testing console command: say(['back indent'], user_input='')
Heard back indent
  2:     def popularity(self):
  3:         return 8
  4: excess = 1
  5: <CURSOR>

*** End of source buffer ***


>>> Testing console command: say(['results', 'at', 'index', 'zero', 'jump', 'out', 'equals', 'zero'], user_input='0
')
Heard results at index zero jump out equals zero
  2:     def popularity(self):
  3:         return 8
  4: excess = 1
  5: results[0] = 0<CURSOR>

*** End of source buffer ***

***Testing state***


10 stored utterances, as expected


10 recently dictated utterances, as expected


***Testing symbol addition***

symbol excess has spoken forms ['excess']
symbol results has spoken forms ['results']

***Testing scratch that***

scratching 1

  2:     def popularity(self):
  3:         return 8
  4: excess = 1
  5: <CURSOR>

*** End of source buffer ***
scratch 1 succeeded as expected

***Testing state***


9 stored utterances, as expected


9 recently dictated utterances, as expected


***Testing symbol removal***

symbol results did not exist, as expected

***Testing correction after scratch that***

detecting changes
utterance 2: change = {'excess': 'success'}
word excess being replaced with success
utterance 2 was changed 
utterance 2 was corrected
about to reinterpret
*** Start of source buffer ***
  1: class Clown(student):
  2:     def popularity(self):
  3:         return 8
  4: <CURSOR>

*** End of source buffer ***
  2:     def popularity(self):
  3:         return 8
  4: success = 1
  5: <CURSOR>

*** End of source buffer ***
  2:     def popularity(self):
  3:         return 8
  4: success = 1
  5: <CURSOR>

*** End of source buffer ***

all utterances from 2 to the present
were reinterpreted, as expected


***Testing state***


9 stored utterances, as expected


9 recently dictated utterances, as expected


***Testing symbol addition***

symbol success has spoken forms ['success']

***Testing symbol removal***

symbol excess did not exist, as expected

Testing correction and formatting state:



>>> Testing console command: say(['new', 'statement'], user_input='0
')
Heard new statement
  3:         return 8
  4: success = 1
  5: 
  6: <CURSOR>

*** End of source buffer ***


>>> Testing console command: say(['new', 'class'], user_input='')
Heard new class
  3:         return 8
  4: success = 1
  5: 
  6: class <CURSOR>:
  7:     

*** End of source buffer ***


>>> Testing console command: say(['red', 'brick'], user_input='0
')
Heard red brick
  3:         return 8
  4: success = 1
  5: 
  6: class RedBrick<CURSOR>:
  7:     

*** End of source buffer ***

***Testing state***


12 stored utterances, as expected


12 recently dictated utterances, as expected


***Testing scratch that***

scratching 1

  3:         return 8
  4: success = 1
  5: 
  6: class <CURSOR>:
  7:     

*** End of source buffer ***
scratch 1 succeeded as expected

***new class name should still be in HungarianNotation***



>>> Testing console command: say(['red', 'book'], user_input='0
')
Heard red book
  3:         return 8
  4: success = 1
  5: 
  6: class RedBook<CURSOR>:
  7:     

*** End of source buffer ***

***Testing state***


12 stored utterances, as expected


12 recently dictated utterances, as expected



>>> Testing console command: say(['class', 'body'], user_input='0
')
Heard class body
  4: success = 1
  5: 
  6: class RedBook:
  7:     <CURSOR>

*** End of source buffer ***


>>> Testing console command: say(['define', 'method'], user_input='')
Heard define method
  4: success = 1
  5: 
  6: class RedBook:
  7:     def <CURSOR>(self):
  8:         

*** End of source buffer ***


>>> Testing console command: say(['lower', 'Hungarian'], user_input='')
Heard lower Hungarian
  4: success = 1
  5: 
  6: class RedBook:
  7:     def <CURSOR>(self):
  8:         

*** End of source buffer ***


>>> Testing console command: say(['act', 'up'], user_input='')
Heard act up
  4: success = 1
  5: 
  6: class RedBook:
  7:     def actUp<CURSOR>(self):
  8:         

*** End of source buffer ***

***Testing state***


16 stored utterances, as expected


16 recently dictated utterances, as expected


***Testing symbol addition and formatting**

symbol actUp has spoken forms ['act up']

***Testing correction***

detecting changes
utterance 1: change = {'up': 'out'}
word up being replaced with out
utterance 1 was changed 
utterance 1 was corrected
about to reinterpret
  4: success = 1
  5: 
  6: class RedBook:
  7:     def <CURSOR>(self):
  8:         

*** End of source buffer ***
  4: success = 1
  5: 
  6: class RedBook:
  7:     def actOut<CURSOR>(self):
  8:         

*** End of source buffer ***

all utterances from 1 to the present
were reinterpreted, as expected


***Testing state***


16 stored utterances, as expected


16 recently dictated utterances, as expected


***Testing symbol removal on correction***

symbol actUp did not exist, as expected

***Testing symbol addition and formatting**

symbol actOut has spoken forms ['act out']

***Moving cursor manually***

*** Start of source buffer ***
  1: <CURSOR>class Clown(student):
  2:     def popularity(self):
  3:         return 8
  4: success = 1

***Testing scratching of manual styling***

scratching 2

  4: success = 1
  5: 
  6: class RedBook:
  7:     def <CURSOR>(self):
  8:         

*** End of source buffer ***
scratch 2 succeeded as expected
scratched: 
['act', 'out']
['lower', 'Hungarian']

***Testing symbol removal on correction***

symbol actOut did not exist, as expected


>>> Testing console command: say(['act', 'out'], user_input='')
Heard act out
  4: success = 1
  5: 
  6: class RedBook:
  7:     def act_out<CURSOR>(self):
  8:         

*** End of source buffer ***

***Testing state***


15 stored utterances, as expected


15 recently dictated utterances, as expected


***Testing symbol addition and formatting**

symbol act_out has spoken forms ['act out']


*******************************************************************************
* Name        : beg_end_of_line
* Description : Testing methods for going to the beginning or end of a line.
*******************************************************************************

WARNING: source file 'blah1.py' doesn't exist.
*** Start of source buffer ***
  1: <CURSOR>

*** End of source buffer ***
Saying: ['line', 'one', 'new', 'statement', 'line', 'two', 'new', 'statement', 'line', 'three']
Heard line one new statement line two new statement line three
*** Start of source buffer ***
  1: line1
  2: line2
  3: line3<CURSOR>

*** End of source buffer ***
Got command: goto_beginning_of_line(None,)
*** Start of source buffer ***
  1: line1
  2: line2
  3: <CURSOR>line3

*** End of source buffer ***
Got command: goto_beginning_of_line(None,)
*** Start of source buffer ***
  1: line1
  2: line2
  3: <CURSOR>line3

*** End of source buffer ***
Got command: move_relative(-1,)
*** Start of source buffer ***
  1: line1
  2: line2<CURSOR>
  3: line3

*** End of source buffer ***
Got command: goto_beginning_of_line(None,)
*** Start of source buffer ***
  1: line1
  2: <CURSOR>line2
  3: line3

*** End of source buffer ***
Got command: move_relative(3,)
*** Start of source buffer ***
  1: line1
  2: lin<CURSOR>e2
  3: line3

*** End of source buffer ***
Got command: goto_beginning_of_line(None,)
*** Start of source buffer ***
  1: line1
  2: <CURSOR>line2
  3: line3

*** End of source buffer ***
Got command: goto(0,)
*** Start of source buffer ***
  1: <CURSOR>line1
  2: line2
  3: line3

*** End of source buffer ***
Got command: goto_beginning_of_line(None,)
*** Start of source buffer ***
  1: <CURSOR>line1
  2: line2
  3: line3

*** End of source buffer ***
WARNING: source file 'blah2.py' doesn't exist.
*** Start of source buffer ***
  1: <CURSOR>

*** End of source buffer ***
Saying: ['line', 'one', 'new', 'statement', 'line', 'two', 'new', 'statement', 'line', 'three']
Heard line one new statement line two new statement line three
*** Start of source buffer ***
  1: line1
  2: line2
  3: line3<CURSOR>

*** End of source buffer ***
Got command: goto(0,)
*** Start of source buffer ***
  1: <CURSOR>line1
  2: line2
  3: line3

*** End of source buffer ***
Got command: goto_end_of_line(None,)
*** Start of source buffer ***
  1: line1<CURSOR>
  2: line2
  3: line3

*** End of source buffer ***
Got command: goto_end_of_line(None,)
*** Start of source buffer ***
  1: line1<CURSOR>
  2: line2
  3: line3

*** End of source buffer ***
Got command: move_relative(1,)
*** Start of source buffer ***
  1: line1
  2: <CURSOR>line2
  3: line3

*** End of source buffer ***
Got command: goto_end_of_line(None,)
*** Start of source buffer ***
  1: line1
  2: line2<CURSOR>
  3: line3

*** End of source buffer ***
Got command: move_relative(-3,)
*** Start of source buffer ***
  1: line1
  2: li<CURSOR>ne2
  3: line3

*** End of source buffer ***
Got command: goto_end_of_line(None,)
*** Start of source buffer ***
  1: line1
  2: line2<CURSOR>
  3: line3

*** End of source buffer ***
Got command: goto(17,)
*** Start of source buffer ***
  1: line1
  2: line2
  3: line3<CURSOR>

*** End of source buffer ***
Got command: goto_end_of_line(None,)
*** Start of source buffer ***
  1: line1
  2: line2
  3: line3<CURSOR>

*** End of source buffer ***


*******************************************************************************
* Name        : blank_line_context
* Description : Testing commands that have a special meaning only a a blank line
*******************************************************************************

WARNING: source file 'blah1.py' doesn't exist.
*** Start of source buffer ***
  1: <CURSOR>

*** End of source buffer ***
Saying: ['for', 'do', 'the', 'following']
Heard for do the following
*** Start of source buffer ***
  1: for :
  2:     <CURSOR>

*** End of source buffer ***
Saying: ['security', 'level', 'equals', 'for', 'your', 'eyes', 'only', 'new', 'statement', 'back', 'indent']
Heard security level equals for your eyes only new statement back indent
*** Start of source buffer ***
  1: for :
  2:     security_level = for_your_eyes_only
  3: <CURSOR>

*** End of source buffer ***
Saying: ['while', 'loop', 'one', 'do', 'the', 'following']
Heard while loop one do the following
*** Start of source buffer ***
  1: for :
  2:     security_level = for_your_eyes_only
  3: while 1:
  4:     <CURSOR>

*** End of source buffer ***
Saying: ['when', 'equals', 'while', 'processing', 'new', 'statement']
Heard when equals while processing new statement
  2:     security_level = for_your_eyes_only
  3: while 1:
  4:     when = while_processing
  5:     <CURSOR>

*** End of source buffer ***
Saying: ['if', 'condition', 'do', 'the', 'following']
Heard if condition do the following
  3: while 1:
  4:     when = while_processing
  5:     if condition:
  6:         <CURSOR>

*** End of source buffer ***
Saying: ['check', 'equals', 'if', 'all', 'right', 'without', 'arguments', 'new', 'statement']
Heard check equals if all right without arguments new statement
  4:     when = while_processing
  5:     if condition:
  6:         check = if_all_right()
  7:         <CURSOR>

*** End of source buffer ***
Saying: ['back', 'indent', 'back', 'indent']
Heard back indent back indent
  4:     when = while_processing
  5:     if condition:
  6:         check = if_all_right()
  7: <CURSOR>

*** End of source buffer ***
Saying: ['class', 'some', 'class', 'class', 'body']
Heard class some class class body
  5:     if condition:
  6:         check = if_all_right()
  7: class SomeClass:
  8:     <CURSOR>

*** End of source buffer ***
Saying: ['try']
Heard try
  6:         check = if_all_right()
  7: class SomeClass:
  8:     try:
  9:         <CURSOR>

*** End of source buffer ***
Saying: ['flag', 'equals', 'did', 'try', 'new', 'statement']
Heard flag equals did try new statement
  7: class SomeClass:
  8:     try:
  9:         flag = did_try
 10:         <CURSOR>

*** End of source buffer ***
Saying: ['the', 'next', 'ones', 'still', 'present', 'bugs', 'new', 'statement']
Heard the next ones still present bugs new statement
  8:     try:
  9:         flag = did_try
 10:         the_next_ones_still_present_bugs
 11:         <CURSOR>

*** End of source buffer ***
Saying: ['check', 'if', 'was', 'done', 'without', 'arguments', 'new', 'statement']
Heard check if was done without arguments new statement
  9:         flag = did_try
 10:         the_next_ones_still_present_bugs
 11:         check_if_was_done()
 12:         <CURSOR>

*** End of source buffer ***


*******************************************************************************
* Name        : change_direction
* Description : testing changing direction of last command
*******************************************************************************



>>> Testing console command: open_file(r'N:\DavidFox\Code\VoiceCode\VCode\Data\TestData\large_buff.py')

*** Start of source buffer ***
  1: <CURSOR>
  2: # This symbol is here because it is homophonic with auto_test. Just checking
  3: # to make sure that symbol match works with homophonic symbols.
  4: autoTst = 0


>>> Testing console command: say(['after hyphen'])

Heard after hyphen
 11:     This class implements various useful behaviors for generic
 12:     objects, such as:
 13: 
 14:     - <CURSOR>safe attribute setting
 15:     - deep constructor
 16:     - pretty printing???
 17:     


>>> Testing console command: say(['again'])

Heard again
 12:     objects, such as:
 13: 
 14:     - safe attribute setting
 15:     - <CURSOR>deep constructor
 16:     - pretty printing???
 17:     
 18: 


>>> Testing console command: say(['again'])

Heard again
 13: 
 14:     - safe attribute setting
 15:     - deep constructor
 16:     - <CURSOR>pretty printing???
 17:     
 18: 
 19:     **SAFE ATTRIBUTE SETTING***


>>> Testing console command: say(['previous one'])

Heard previous one
 12:     objects, such as:
 13: 
 14:     - safe attribute setting
 15:     - <CURSOR>deep constructor
 16:     - pretty printing???
 17:     
 18: 


>>> Testing console command: say(['previous one'])

Heard previous one
 11:     This class implements various useful behaviors for generic
 12:     objects, such as:
 13: 
 14:     - <CURSOR>safe attribute setting
 15:     - deep constructor
 16:     - pretty printing???
 17:     


>>> Testing console command: say(['next one'])

Heard next one
 12:     objects, such as:
 13: 
 14:     - safe attribute setting
 15:     - <CURSOR>deep constructor
 16:     - pretty printing???
 17:     
 18: 


*******************************************************************************
* Name        : compile_symbols
* Description : Testing voice command for compiling symbols
*******************************************************************************

*** Start of source buffer ***
  1: <CURSOR># This is a small test buffer for Python
  2: 
  3: 
  4: 
Compiling symbols for file '%VCODE_HOME%\Data\TestData\test_py_std_sym.py'
Before compiling symbols, symbols are:

THIS_SYMBOL_WAS_PARSED_FROM_test_py_std_sym: ['this symbol was parsed from test P. Y. standard sym', 'this symbol was parsed from test P. Y. standard symbol', 'this symbol was parsed from test P. Y. std sym', 'this symbol was parsed from test P. Y. std symbol', 'this symbol was parsed from test pie standard sym', 'this symbol was parsed from test pie standard symbol', 'this symbol was parsed from test pie std sym', 'this symbol was parsed from test pie std symbol', 'this symbol was parsed from test py standard sym', 'this symbol was parsed from test py standard symbol', 'this symbol was parsed from test py std sym', 'this symbol was parsed from test py std symbol', 'this symbol was parsed from test python standard sym', 'this symbol was parsed from test python standard symbol', 'this symbol was parsed from test python std sym', 'this symbol was parsed from test python std symbol']
_cached_symbols_as_one_string[t] is:
    THIS_SYMBOL_WAS_PARSED_FROM_test_py_std_sym 
Heard compile symbols
Compiling symbols for None
Done compiling symbols
*** Start of source buffer ***
  1: <CURSOR># This is a small test buffer for Python
  2: 
  3: 
  4: 
After compiling symbols, symbols are:

AClass: ['A. class', 'a class']
ASuper: ['A. super', 'a super']
THIS_SYMBOL_WAS_PARSED_FROM_test_py_std_sym: ['this symbol was parsed from test P. Y. standard sym', 'this symbol was parsed from test P. Y. standard symbol', 'this symbol was parsed from test P. Y. std sym', 'this symbol was parsed from test P. Y. std symbol', 'this symbol was parsed from test pie standard sym', 'this symbol was parsed from test pie standard symbol', 'this symbol was parsed from test pie std sym', 'this symbol was parsed from test pie std symbol', 'this symbol was parsed from test py standard sym', 'this symbol was parsed from test py standard symbol', 'this symbol was parsed from test py std sym', 'this symbol was parsed from test py std symbol', 'this symbol was parsed from test python standard sym', 'this symbol was parsed from test python standard symbol', 'this symbol was parsed from test python std sym', 'this symbol was parsed from test python std symbol']
a_method: ['A. method', 'a method']
class: ['class']
def: ['deaf', 'def', 'default', 'define', 'defined', 'definition']
print: ['print']
self: ['self']
x: ['X.']
_cached_symbols_as_one_string[a] is:
    AClass  ASuper  a_method 
_cached_symbols_as_one_string[c] is:
    class 
_cached_symbols_as_one_string[d] is:
    def 
_cached_symbols_as_one_string[p] is:
    print 
_cached_symbols_as_one_string[s] is:
    self 
_cached_symbols_as_one_string[t] is:
    THIS_SYMBOL_WAS_PARSED_FROM_test_py_std_sym 
_cached_symbols_as_one_string[x] is:
    x 


*******************************************************************************
* Name        : dummy_grammars
* Description : Testing WinGramMgr grammar management with dummy grammars.
*******************************************************************************

EdSim.__init__
SourceBuff.__init__: 
new buffer fish.C
with window 5
SourceBuff.__init__: fish.C
SelectWinGramDummy for buffer None, window 5
init
DictWinGramDummy for buffer = 'fish.C', window 5
init
new buffer fowl.py
with window 5
SourceBuff.__init__: fowl.py
DictWinGramDummy for buffer = 'fowl.py', window 5
init
activating buffer fish.C for window 5
*** Start of source buffer ***
  1: /* This is a small test buffer for C */
  2: 
  3: void move(float x, y)
  4: <CURSOR>{
  5:   move_horiz(x);
  6:   move_vert(y)
  7:   horiz_pos = 0;
DictWinGramDummy for buffer = 'fowl.py', window 5
deactivating
SelectWinGramDummy for buffer 'fish.C', window 5
activating:  5  
DictWinGramDummy for buffer = 'fish.C', window 5
setting context: before = [ x, y)
], after = [{]
DictWinGramDummy for buffer = 'fish.C', window 5
activating:  5  
new window 7
SelectWinGramDummy for buffer None, window 7
init
new buffer dog.pl
with window 7
SourceBuff.__init__: dog.pl
DictWinGramDummy for buffer = 'dog.pl', window 7
init
new buffer fish.h
with window 7
SourceBuff.__init__: fish.h
DictWinGramDummy for buffer = 'fish.h', window 7
init
activating buffer dog.pl for window 7
 10:     $dirSep = "\";
 11:     $curDirCom = 'cd';
 12: } else {
 13:     $dirSep = <CURSOR>'/';
 14:     $curDirCom = 'pwd';
 15: };
 16: 

*** End of source buffer ***
DictWinGramDummy for buffer = 'fish.h', window 7
deactivating
SelectWinGramDummy for buffer 'dog.pl', window 7
activating:  7  
DictWinGramDummy for buffer = 'dog.pl', window 7
setting context: before = [
    $dirSep = ], after = ['/';]
DictWinGramDummy for buffer = 'dog.pl', window 7
activating:  7  
activating buffer fish.h for window 7
*** Start of source buffer ***
  1: void move(float x, y);<CURSOR>
  2: 

*** End of source buffer ***
DictWinGramDummy for buffer = 'dog.pl', window 7
deactivating
SelectWinGramDummy for buffer 'fish.h', window 7
activating:  7  
DictWinGramDummy for buffer = 'fish.h', window 7
setting context: before = [ x, y);], after = [
]
DictWinGramDummy for buffer = 'fish.h', window 7
activating:  7  
activating buffer fowl.py for window 5
*** Start of source buffer ***
  1: import sys
  2: 
  3: def something(value):
  4:     print <CURSOR>value
  5: 
  6: if __name__ == '__main__':
  7:     something('nice')
DictWinGramDummy for buffer = 'fish.C', window 5
deactivating
SelectWinGramDummy for buffer 'fowl.py', window 5
activating:  5  
DictWinGramDummy for buffer = 'fowl.py', window 5
setting context: before = [ something(value):
    print ], after = [value]
DictWinGramDummy for buffer = 'fowl.py', window 5
activating:  5  
SourceBuff.remove_other_references: fowl.py
SourceBuff.__del__: fowl.py
close buffer fowl.py
DictWinGramDummy for buffer = 'fowl.py', window 5
del
deactivate all for window 5
SelectWinGramDummy for buffer 'fowl.py', window 5
deactivating
DictWinGramDummy for buffer = 'fish.C', window 5
deactivating
delete window 7
SelectWinGramDummy for buffer 'fish.h', window 7
deactivating
DictWinGramDummy for buffer = 'dog.pl', window 7
deactivating
DictWinGramDummy for buffer = 'fish.h', window 7
deactivating
SelectWinGramDummy for buffer 'fish.h', window 7
del
DictWinGramDummy for buffer = 'fish.h', window 7
del
DictWinGramDummy for buffer = 'dog.pl', window 7
del
SourceBuff.remove_other_references: dog.pl
SourceBuff.__del__: dog.pl
close buffer dog.pl
activating buffer fish.C for window 5
*** Start of source buffer ***
  1: /* This is a small test buffer for C */
  2: 
  3: void move(float x, y)
  4: <CURSOR>{
  5:   move_horiz(x);
  6:   move_vert(y)
  7:   horiz_pos = 0;
SelectWinGramDummy for buffer 'fish.C', window 5
activating:  5  
DictWinGramDummy for buffer = 'fish.C', window 5
setting context: before = [ x, y)
], after = [{]
DictWinGramDummy for buffer = 'fish.C', window 5
activating:  5  
deactivate all
SelectWinGramDummy for buffer 'fish.C', window 5
deactivating
DictWinGramDummy for buffer = 'fish.C', window 5
deactivating
close all buffers
SourceBuff.remove_other_references: 
SourceBuff.__del__: 
SourceBuff.remove_other_references: fish.C
SourceBuff.__del__: fish.C
SourceBuff.remove_other_references: fish.h
SourceBuff.__del__: fish.h
cleanup app
EdSim.remove_other_references
cleanup manager
SelectWinGramDummy for buffer 'fish.C', window 5
deactivating
DictWinGramDummy for buffer = 'fish.C', window 5
deactivating
SelectWinGramDummy for buffer 'fish.C', window 5
del
DictWinGramDummy for buffer = 'fish.C', window 5
del
test ending - expect dels of manager, app
EdSim.__del__


*******************************************************************************
* Name        : dummy_grammars_global
* Description : Testing WinGramMgr grammar management with global, exclusive dummy grammars.
*******************************************************************************

EdSim.__init__
SourceBuff.__init__: 
new buffer fish.C
with window 5
SourceBuff.__init__: fish.C
SelectWinGramDummy for buffer None, global
init
DictWinGramDummy for buffer = 'fish.C', global
init
new buffer fowl.py
with window 5
SourceBuff.__init__: fowl.py
DictWinGramDummy for buffer = 'fowl.py', global
init
activating buffer fish.C for window 5
*** Start of source buffer ***
  1: /* This is a small test buffer for C */
  2: 
  3: void move(float x, y)
  4: <CURSOR>{
  5:   move_horiz(x);
  6:   move_vert(y)
  7:   horiz_pos = 0;
DictWinGramDummy for buffer = 'fowl.py', global
deactivating
SelectWinGramDummy for buffer 'fish.C', global
activating:  global  exclusive 

DictWinGramDummy for buffer = 'fish.C', global
setting context: before = [ x, y)
], after = [{]
DictWinGramDummy for buffer = 'fish.C', global
activating:  global  exclusive 

new window 7
SelectWinGramDummy for buffer None, global
init
new buffer dog.pl
with window 7
SourceBuff.__init__: dog.pl
DictWinGramDummy for buffer = 'dog.pl', global
init
new buffer fish.h
with window 7
SourceBuff.__init__: fish.h
DictWinGramDummy for buffer = 'fish.h', global
init
activating buffer dog.pl for window 7
 10:     $dirSep = "\";
 11:     $curDirCom = 'cd';
 12: } else {
 13:     $dirSep = <CURSOR>'/';
 14:     $curDirCom = 'pwd';
 15: };
 16: 

*** End of source buffer ***
DictWinGramDummy for buffer = 'fish.h', global
deactivating
DictWinGramDummy for buffer = 'fish.C', global
deactivating
DictWinGramDummy for buffer = 'fowl.py', global
deactivating
SelectWinGramDummy for buffer 'dog.pl', global
activating:  global  exclusive 

SelectWinGramDummy for buffer 'fish.C', global
deactivating
DictWinGramDummy for buffer = 'dog.pl', global
setting context: before = [
    $dirSep = ], after = ['/';]
DictWinGramDummy for buffer = 'dog.pl', global
activating:  global  exclusive 

activating buffer fish.h for window 7
*** Start of source buffer ***
  1: void move(float x, y);<CURSOR>
  2: 

*** End of source buffer ***
DictWinGramDummy for buffer = 'dog.pl', global
deactivating
DictWinGramDummy for buffer = 'fish.C', global
deactivating
DictWinGramDummy for buffer = 'fowl.py', global
deactivating
SelectWinGramDummy for buffer 'fish.h', global
activating:  global  exclusive 

SelectWinGramDummy for buffer 'fish.C', global
deactivating
DictWinGramDummy for buffer = 'fish.h', global
setting context: before = [ x, y);], after = [
]
DictWinGramDummy for buffer = 'fish.h', global
activating:  global  exclusive 

activating buffer fowl.py for window 5
*** Start of source buffer ***
  1: import sys
  2: 
  3: def something(value):
  4:     print <CURSOR>value
  5: 
  6: if __name__ == '__main__':
  7:     something('nice')
DictWinGramDummy for buffer = 'fish.C', global
deactivating
DictWinGramDummy for buffer = 'fish.h', global
deactivating
DictWinGramDummy for buffer = 'dog.pl', global
deactivating
SelectWinGramDummy for buffer 'fowl.py', global
activating:  global  exclusive 

SelectWinGramDummy for buffer 'fish.h', global
deactivating
DictWinGramDummy for buffer = 'fowl.py', global
setting context: before = [ something(value):
    print ], after = [value]
DictWinGramDummy for buffer = 'fowl.py', global
activating:  global  exclusive 

SourceBuff.remove_other_references: fowl.py
SourceBuff.__del__: fowl.py
close buffer fowl.py
DictWinGramDummy for buffer = 'fowl.py', global
del
deactivate all for window 5
SelectWinGramDummy for buffer 'fowl.py', global
deactivating
DictWinGramDummy for buffer = 'fish.C', global
deactivating
SelectWinGramDummy for buffer 'fish.h', global
deactivating
DictWinGramDummy for buffer = 'dog.pl', global
deactivating
DictWinGramDummy for buffer = 'fish.h', global
deactivating
delete window 7
SelectWinGramDummy for buffer 'fish.h', global
deactivating
DictWinGramDummy for buffer = 'dog.pl', global
deactivating
DictWinGramDummy for buffer = 'fish.h', global
deactivating
SelectWinGramDummy for buffer 'fish.h', global
del
DictWinGramDummy for buffer = 'fish.h', global
del
DictWinGramDummy for buffer = 'dog.pl', global
del
SourceBuff.remove_other_references: dog.pl
SourceBuff.__del__: dog.pl
close buffer dog.pl
activating buffer fish.C for window 5
*** Start of source buffer ***
  1: /* This is a small test buffer for C */
  2: 
  3: void move(float x, y)
  4: <CURSOR>{
  5:   move_horiz(x);
  6:   move_vert(y)
  7:   horiz_pos = 0;
SelectWinGramDummy for buffer 'fish.C', global
activating:  global  exclusive 

DictWinGramDummy for buffer = 'fish.C', global
setting context: before = [ x, y)
], after = [{]
DictWinGramDummy for buffer = 'fish.C', global
activating:  global  exclusive 

deactivate all
SelectWinGramDummy for buffer 'fish.C', global
deactivating
DictWinGramDummy for buffer = 'fish.C', global
deactivating
close all buffers
SourceBuff.remove_other_references: 
SourceBuff.__del__: 
SourceBuff.remove_other_references: fish.C
SourceBuff.__del__: fish.C
SourceBuff.remove_other_references: fish.h
SourceBuff.__del__: fish.h
cleanup app
EdSim.remove_other_references
cleanup manager
SelectWinGramDummy for buffer 'fish.C', global
deactivating
DictWinGramDummy for buffer = 'fish.C', global
deactivating
SelectWinGramDummy for buffer 'fish.C', global
del
DictWinGramDummy for buffer = 'fish.C', global
del
test ending - expect dels of manager, app
EdSim.__del__


*******************************************************************************
* Name        : explicit_indent
* Description : Testing explicit indentation.
*******************************************************************************

WARNING: source file 'blah1.py' doesn't exist.
*** Start of source buffer ***
  1: <CURSOR>

*** End of source buffer ***
Saying: ['if', 'condition', 'do', 'the', 'following']
Heard if condition do the following
*** Start of source buffer ***
  1: if condition:
  2:     <CURSOR>

*** End of source buffer ***
Saying: ['back', 'indent']
Heard back indent
*** Start of source buffer ***
  1: if condition:
  2: <CURSOR>

*** End of source buffer ***
Saying: ['index', 'equals', 'one', 'do', 'the', 'following']
Heard index equals one do the following
*** Start of source buffer ***
  1: if condition:
  2: index = 1<CURSOR>

*** End of source buffer ***
Saying: ['indent']
Heard indent
*** Start of source buffer ***
  1: if condition:
  2:     index = 1<CURSOR>

*** End of source buffer ***
Got command: move_relative(-3,)
*** Start of source buffer ***
  1: if condition:
  2:     index <CURSOR>= 1

*** End of source buffer ***
Saying: ['back', 'indent']
Heard back indent
*** Start of source buffer ***
  1: if condition:
  2: <CURSOR>index = 1

*** End of source buffer ***
Got command: move_relative(3,)
*** Start of source buffer ***
  1: if condition:
  2: ind<CURSOR>ex = 1

*** End of source buffer ***
Saying: ['indent']
Heard indent
*** Start of source buffer ***
  1: if condition:
  2:     ind<CURSOR>ex = 1

*** End of source buffer ***


*******************************************************************************
* Name        : insert_delete
* Description : Testing insertion and deletion commands
*******************************************************************************

WARNING: source file 'blah.py' doesn't exist.
*** Start of source buffer ***
  1: <CURSOR>

*** End of source buffer ***


>>> Testing console command: say(['this', 'is', 'a', 'very', 'long', 'variable', 'name', 'but', 'never', 'mind'], user_input='1
1
1
1
1
1
1
1
1
')
Heard this is a very long variable name but never mind
*** Start of source buffer ***
  1: this_is_a_very_long_variable_name_but_never_mind<CURSOR>

*** End of source buffer ***


>>> Testing console command: say(['back space'], user_input='None')
Heard back space
*** Start of source buffer ***
  1: this_is_a_very_long_variable_name_but_never_min<CURSOR>

*** End of source buffer ***


>>> Testing console command: say(['2 times'], user_input='None')
Heard 2 times
*** Start of source buffer ***
  1: this_is_a_very_long_variable_name_but_never_mi<CURSOR>

*** End of source buffer ***


>>> Testing console command: say(['back space 2'], user_input='None')
Heard back space 2
*** Start of source buffer ***
  1: this_is_a_very_long_variable_name_but_never_<CURSOR>

*** End of source buffer ***


>>> Testing console command: say(['back space 3'], user_input='None')
Heard back space 3
*** Start of source buffer ***
  1: this_is_a_very_long_variable_name_but_nev<CURSOR>

*** End of source buffer ***


>>> Testing console command: say(['back space 4'], user_input='None')
Heard back space 4
*** Start of source buffer ***
  1: this_is_a_very_long_variable_name_but<CURSOR>

*** End of source buffer ***


>>> Testing console command: say(['back space 5'], user_input='None')
Heard back space 5
*** Start of source buffer ***
  1: this_is_a_very_long_variable_nam<CURSOR>

*** End of source buffer ***


>>> Testing console command: say(['select', 'additional'], user_input='None')
Heard select additional
*** Start of source buffer ***
  1: some <SEL_START>additional<SEL_END> text

*** End of source buffer ***


>>> Testing console command: say(['back space'], user_input='None')
Heard back space
*** Start of source buffer ***
  1: some <CURSOR> text

*** End of source buffer ***


>>> Testing console command: say(['select', 'additional'], user_input='None')
Heard select additional
*** Start of source buffer ***
  1: some <SEL_START>additional<SEL_END> text

*** End of source buffer ***


>>> Testing console command: say(['back space 2'], user_input='None')
Heard back space 2
*** Start of source buffer ***
  1: some<CURSOR> text

*** End of source buffer ***


*******************************************************************************
* Name        : inserted_text
* Description : Test of new reporting system for inserted text
*******************************************************************************

WARNING: source file 'blah.py' doesn't exist.
*** Start of source buffer ***
  1: <CURSOR>

*** End of source buffer ***
inserting 'x = 3'
*** Start of source buffer ***
  1: x = 3<CURSOR>

*** End of source buffer ***
text: range: 0 5, text = 'x = 3'
inserting '\n'
*** Start of source buffer ***
  1: x = 3
  2: <CURSOR>

*** End of source buffer ***
text: range: 5 6, text = '\n'
inserting 'if ', ':\n\t'
*** Start of source buffer ***
  1: x = 3
  2: if <CURSOR>:
  3:     

*** End of source buffer ***
before cursor: range: 6 9, text = 'if '
after_cursor: range: 9 15, text = ':\n    '
inserting 'x > 2', ''
*** Start of source buffer ***
  1: x = 3
  2: if x > 2<CURSOR>:
  3:     

*** End of source buffer ***
before cursor: range: 9 14, text = 'x > 2'
after_cursor: (no block)
inserting 'multi()', ''
*** Start of source buffer ***
  1: x = 3
  2: if x > 2:
  3:     multi()<CURSOR>

*** End of source buffer ***
before cursor: range: 20 27, text = 'multi()'
after_cursor: (no block)
inserting '\nelif ', ':\n\t'
*** Start of source buffer ***
  1: x = 3
  2: if x > 2:
  3:     multi()
  4: elif <CURSOR>:
  5:     

*** End of source buffer ***
before cursor: range: 27 33, text = '\nelif '
after_cursor: range: 33 39, text = ':\n    '
inserting 'x == 1', ''
*** Start of source buffer ***
  1: x = 3
  2: if x > 2:
  3:     multi()
  4: elif x == 1<CURSOR>:
  5:     

*** End of source buffer ***
before cursor: range: 33 39, text = 'x == 1'
after_cursor: (no block)
inserting 'solitaire()', ''
  2: if x > 2:
  3:     multi()
  4: elif x == 1:
  5:     solitaire()<CURSOR>

*** End of source buffer ***
before cursor: range: 45 56, text = 'solitaire()'
after_cursor: (no block)
inserting '\nelse:\n', ''
  4: elif x == 1:
  5:     solitaire()
  6: else:
  7:     <CURSOR>

*** End of source buffer ***
before cursor: range: 56 67, text = '\nelse:\n    '
after_cursor: (no block)
inserting 'dual()', ''
  4: elif x == 1:
  5:     solitaire()
  6: else:
  7:     dual()<CURSOR>

*** End of source buffer ***
before cursor: range: 67 73, text = 'dual()'
after_cursor: (no block)


*******************************************************************************
* Name        : large_messages
* Description : Send a message that has more than 1024 character (length of a message chunk)
*******************************************************************************

WARNING: source file 'tmp.py' doesn't exist.
*** Start of source buffer ***
  1: <CURSOR>

*** End of source buffer ***
*** Start of source buffer ***
  1: <CURSOR>12345678
  2: 12345678
  3: 12345678
  4: 12345678


*******************************************************************************
* Name        : looking_at
* Description : Testing the looking at method.
*******************************************************************************

WARNING: source file 'blah1.py' doesn't exist.
*** Start of source buffer ***
  1: <CURSOR>

*** End of source buffer ***
Saying: ['hello']
Heard hello
*** Start of source buffer ***
  1: hello<CURSOR>

*** End of source buffer ***
Got command: goto_beginning_of_line(None,)
*** Start of source buffer ***
  1: <CURSOR>hello

*** End of source buffer ***
Got command: goto_end_of_line(None,)
*** Start of source buffer ***
  1: hello<CURSOR>

*** End of source buffer ***


*******************************************************************************
* Name        : mediator_console
* Description : testing mediator console commands
*******************************************************************************



>>> Testing console command: clear_symbols()    

Compiling symbols for file '%VCODE_HOME%\Data\TestData\test_py_std_sym.py'


>>> Testing console command: open_file('blah.c')

WARNING: source file 'blah.c' doesn't exist.
*** Start of source buffer ***
  1: <CURSOR>

*** End of source buffer ***
List of abbreviations

'abs' expands to ['absolute']
'addr' expands to ['address']
'alnum' expands to ['alpha numeric']
'alt' expands to ['alternate', 'alternative']
'arg' expands to ['argument']
'argv' expands to ['arg V.', 'argument value']
'asc' expands to ['ascii']
'asyn' expands to ['asynchronous']
'async' expands to ['asynchronous']
'atan' expands to ['arc tangent']
'atof' expands to ['A. to F.']
'atol' expands to ['A. to L.']
'attr' expands to ['attribute']
'avail' expands to ['available']
'avg' expands to ['average']
'beg' expands to ['begin', 'beginning']
'bg' expands to ['background']
'blk' expands to ['block', 'blocking']
'buf' expands to ['buffer']
'buff' expands to ['buffer']
'builtin' expands to ['built in']
'calc' expands to ['calculate', 'calculated', 'calculation']
'cbk' expands to ['callback']
'cgi' expands to ['C. G. I.']
'char' expands to ['character']
'chg' expands to ['change', 'changed']
'chr' expands to ['character']
'clr' expands to ['clear']
'cmd' expands to ['command']
'cmp' expands to ['compare']
'cntrl' expands to ['control']
'col' expands to ['column']
'concat' expands to ['concatenate']
'cond' expands to ['condition']
'conf' expands to ['configuration', 'configure']
'config' expands to ['configuration', 'configure']
'conn' expands to ['connected']
'cont' expands to ['content', 'context']
'cos' expands to ['cosine']
'cpp' expands to ['C. plus plus']
'ctl' expands to ['control']
'ctrl' expands to ['control']
'cur' expands to ['current', 'cursor']
'curr' expands to ['current']
'db' expands to ['D. B.', 'data base']
'decl' expands to ['declaration', 'declare']
'def' expands to ['deaf', 'default', 'define', 'defined', 'definition']
'delim' expands to ['delimiter']
'dev' expands to ['device']
'dict' expands to ['dictionary']
'dir' expands to ['direction', 'directory']
'div' expands to ['divide']
'doc' expands to ['document', 'documentation']
'dom' expands to ['domain']
'dst' expands to ['distance']
'dtd' expands to ['D. T. D.']
'elem' expands to ['element']
'ent' expands to ['entity', 'entry']
'env' expands to ['environment']
'environ' expands to ['environment']
'eol' expands to ['E. O. L.', 'end of line']
'eval' expands to ['E. val', 'evaluate', 'evaluation']
'ex' expands to ['example']
'exc' expands to ['exception']
'exec' expands to ['executable', 'execute']
'expr' expands to ['expression']
'fct' expands to ['function']
'fg' expands to ['foreground']
'fifo' expands to ['fie foe', 'first in first out']
'fmt' expands to ['format']
'fp' expands to ['file pointer']
'func' expands to ['function']
'gen' expands to ['general', 'generic']
'gid' expands to ['G. I. D.', 'group I. D.']
'glob' expands to ['global']
'goto' expands to ['go to']
'gr' expands to ['group']
'hex' expands to ['hexadecimal']
'horiz' expands to ['horizontal', 'horizontally']
'html' expands to ['H. T. M. L.']
'http' expands to ['H. T. T. P.']
'imap' expands to ['I. map']
'impl' expands to ['implementation']
'inc' expands to ['include', 'increment']
'incl' expands to ['include', 'included']
'info' expands to ['information']
'init' expands to ['initial', 'initialize']
'ins' expands to ['insert']
'int' expands to ['integer']
'interp' expands to ['interpreter']
'intro' expands to ['introduction']
'io' expands to ['I. O.', 'input output']
'ip' expands to ['I. P.']
'len' expands to ['length']
'ln' expands to ['line']
'lnk' expands to ['link']
'loc' expands to ['locate', 'location']
'login' expands to ['log in']
'mem' expands to ['memory']
'mk' expands to ['make']
'mnt' expands to ['mount', 'mounted']
'mod' expands to ['mode', 'modified', 'modify']
'msec' expands to ['millisecond']
'msg' expands to ['message']
'mtime' expands to ['M. time']
'nam' expands to ['name']
'nntp' expands to ['N. N. T. P.']
'no' expands to ['number']
'num' expands to ['number']
'obj' expands to ['object']
'oct' expands to ['octal']
'opt' expands to ['optimize', 'option', 'optional']
'os' expands to ['O. S.', 'operating system']
'osf' expands to ['O. S. F.']
'par' expands to ['parameter']
'param' expands to ['parameter']
'pat' expands to ['pattern']
'patt' expands to ['pattern']
'perm' expands to ['permission']
'pkg' expands to ['package']
'pos' expands to ['position', 'positioning']
'prof' expands to ['professional', 'profile', 'profiling']
'proto' expands to ['protocol', 'prototype']
'pty' expands to ['P. T. Y.']
'punc' expands to ['punctuation']
'punct' expands to ['punctuation']
'py' expands to ['P. Y.', 'pie', 'python']
'rand' expands to ['random']
'rd' expands to ['read']
'rect' expands to ['rectangle']
'ref' expands to ['reference']
'reg' expands to ['regular', 'regular expression']
'regex' expands to ['regular expression']
'regexp' expands to ['regular expression']
'rel' expands to ['relative']
'repr' expands to ['represent', 'representation']
'req' expands to ['request']
'rexp' expands to ['regular expression']
'rgb' expands to ['R. G. B.']
'rm' expands to ['remove']
'scr' expands to ['screen']
'sec' expands to ['second']
'sep' expands to ['separator']
'seq' expands to ['sequence']
'serv' expands to ['server']
'sig' expands to ['signal']
'sin' expands to ['sine']
'smtp' expands to ['S. M. T. P.']
'sock' expands to ['socket']
'soundex' expands to ['sound X.']
'spc' expands to ['space']
'src' expands to ['source']
'srv' expands to ['server', 'service']
'stat' expands to ['static', 'statistics']
'std' expands to ['standard']
'stdin' expands to ['S. T. D. in', 'standard in', 'standard input']
'str' expands to ['string']
'sub' expands to ['sub routine']
'sym' expands to ['symbol']
'sync' expands to ['synchronize', 'synchronous']
'sys' expands to ['system']
'temp' expands to ['temporary']
'termid' expands to ['term I. D.', 'terminal I. D.']
'tmp' expands to ['temporary']
'tok' expands to ['token']
'trans' expands to ['transform', 'transformation', 'transition', 'translation', 'transport']
'tst' expands to ['test']
'tty' expands to ['T. T. Y.']
'uid' expands to ['U. I. D.', 'user I. D.']
'undef' expands to ['undefine', 'undefined']
'uniq' expands to ['unique']
'url' expands to ['U. R. L.']
'uu' expands to ['U. U.']
'val' expands to ['value']
'var' expands to ['variable']
'vert' expands to ['vertical', 'vertically']
'win' expands to ['window']
'xml' expands to ['X. M. L.']
'xor' expands to ['X. or', 'exclusive or']


List of unresolved abbreviations



>>> Testing console command: compile_symbols([r'N:\DavidFox\Code\VoiceCode\VCode\Data\TestData\small_buff.c'])

Compiling symbols for file '%VCODE_HOME%\Data\TestData\small_buff.c'
>>> Known symbols are: 
API_function: ['A. P. I. function', 'API function']
THIS_SYMBOL_WAS_PARSED_FROM_test_py_std_sym: ['this symbol was parsed from test P. Y. standard sym', 'this symbol was parsed from test P. Y. standard symbol', 'this symbol was parsed from test P. Y. std sym', 'this symbol was parsed from test P. Y. std symbol', 'this symbol was parsed from test pie standard sym', 'this symbol was parsed from test pie standard symbol', 'this symbol was parsed from test pie std sym', 'this symbol was parsed from test pie std symbol', 'this symbol was parsed from test py standard sym', 'this symbol was parsed from test py standard symbol', 'this symbol was parsed from test py std sym', 'this symbol was parsed from test py std symbol', 'this symbol was parsed from test python standard sym', 'this symbol was parsed from test python standard symbol', 'this symbol was parsed from test python std sym', 'this symbol was parsed from test python std symbol']
f_name: ['F. name']
f_name2: ['F. name 2']
float: ['float']
horiz_pos: ['horiz pos', 'horiz position', 'horiz positioning', 'horizontal pos', 'horizontal position', 'horizontal positioning', 'horizontally pos', 'horizontally position', 'horizontally positioning']
move: ['move']
move_horiz: ['move horiz', 'move horizontal', 'move horizontally']
move_vert: ['move vert', 'move vertical', 'move vertically']
this_sym_has_an_other_abbrev: ['this sym has an other abbrev', 'this symbol has an other abbrev']
this_sym_is_unres: ['this sym is unres', 'this symbol is unres']
this_sym_is_unres_too: ['this sym is unres too', 'this symbol is unres too']
void: ['void']
x: ['X.']
y: ['Y.']
_cached_symbols_as_one_string[a] is:
    API_function 
_cached_symbols_as_one_string[f] is:
    float  f_name  f_name2 
_cached_symbols_as_one_string[h] is:
    horiz_pos 
_cached_symbols_as_one_string[m] is:
    move  move_horiz  move_vert 
_cached_symbols_as_one_string[t] is:
    THIS_SYMBOL_WAS_PARSED_FROM_test_py_std_sym  this_sym_is_unres  this_sym_is_unres_too  this_sym_has_an_other_abbrev 
_cached_symbols_as_one_string[v] is:
    void 
_cached_symbols_as_one_string[x] is:
    x 
_cached_symbols_as_one_string[y] is:
    y 


>>> Testing console command: say(['for', 'loop', 'horiz_pos\\horizontal position', 'loop', 'body'], user_input='None')
Heard for loop horizontal position loop body
*** Start of source buffer ***
  1: for (horiz_pos=0;  <= ; ++)
  2: {
  3: <CURSOR>
  4: }
  5: 

*** End of source buffer ***


>>> Testing console command: say(['select', 'horiz_pos\horizontal position', '=\equals'],  never_bypass_sr_recog=1)

Heard select horizontal position equals
*** Start of source buffer ***
  1: for (<SEL_START>horiz_pos=<SEL_END>0;  <= ; ++)
  2: {
  3: 
  4: }


>>> Testing console command: quit(save_speech_files=0, disconnect=0)



*******************************************************************************
* Name        : misc_bugs
* Description : Testing a series of miscellaneous bugs that might reoccur.
*******************************************************************************



>>> Testing console command: open_file(r'blah.py')

WARNING: source file 'blah.py' doesn't exist.
*** Start of source buffer ***
  1: <CURSOR>

*** End of source buffer ***


>>> Testing console command: say(['<\less-than', '>\greater-than', '=\equal-sign'])

Heard less-than greater-than equal-sign
*** Start of source buffer ***
  1:  <  > =<CURSOR>

*** End of source buffer ***


*******************************************************************************
* Name        : new_statement
* Description : Test creation of new statements above/below current line
*******************************************************************************

WARNING: source file 'blah1.py' doesn't exist.
*** Start of source buffer ***
  1: <CURSOR>

*** End of source buffer ***
Saying: ['new', 'statement', 'below']
Heard new statement below
*** Start of source buffer ***
  1: 
  2: <CURSOR>

*** End of source buffer ***
Saying: ['below', 'when', 'empty', 'buffer']
Heard below when empty buffer
*** Start of source buffer ***
  1: 
  2: below_when_empty_buffer<CURSOR>

*** End of source buffer ***
Got command: goto(0,)
*** Start of source buffer ***
  1: <CURSOR>
  2: below_when_empty_buffer

*** End of source buffer ***
Saying: ['new', 'statement', 'below']
Heard new statement below
*** Start of source buffer ***
  1: 
  2: <CURSOR>
  3: below_when_empty_buffer

*** End of source buffer ***
Saying: ['below', 'when', 'at', 'first', 'line', 'of', 'a', 'buffer']
Heard below when at first line of a buffer
*** Start of source buffer ***
  1: 
  2: below_when_at_first_line_of_a_buffer<CURSOR>
  3: below_when_empty_buffer

*** End of source buffer ***
Got command: goto(61,)
*** Start of source buffer ***
  1: 
  2: below_when_at_first_line_of_a_buffer
  3: below_when_empty_buffer<CURSOR>

*** End of source buffer ***
Saying: ['new', 'statement', 'below']
Heard new statement below
*** Start of source buffer ***
  1: 
  2: below_when_at_first_line_of_a_buffer
  3: below_when_empty_buffer
  4: <CURSOR>

*** End of source buffer ***
Saying: ['below', 'when', 'at', 'last', 'character', 'of', 'a', 'buffer']
Heard below when at last character of a buffer
*** Start of source buffer ***
  1: 
  2: below_when_at_first_line_of_a_buffer
  3: below_when_empty_buffer
  4: below_when_at_last_character_of_a_buffer<CURSOR>

*** End of source buffer ***
Got command: goto_line(2,)
*** Start of source buffer ***
  1: 
  2: <CURSOR>below_when_at_first_line_of_a_buffer
  3: below_when_empty_buffer
  4: below_when_at_last_character_of_a_buffer

*** End of source buffer ***
Saying: ['new', 'statement', 'below']
Heard new statement below
*** Start of source buffer ***
  1: 
  2: below_when_at_first_line_of_a_buffer
  3: <CURSOR>
  4: below_when_empty_buffer
  5: below_when_at_last_character_of_a_buffer

*** End of source buffer ***
Saying: ['below', 'when', 'on', 'middle', 'line', 'of', 'buffer']
Heard below when on middle line of buffer
*** Start of source buffer ***
  1: 
  2: below_when_at_first_line_of_a_buffer
  3: below_when_on_middle_line_of_buffer<CURSOR>
  4: below_when_empty_buffer
  5: below_when_at_last_character_of_a_buffer

*** End of source buffer ***
Got command: goto_line(3,)
*** Start of source buffer ***
  1: 
  2: below_when_at_first_line_of_a_buffer
  3: <CURSOR>below_when_on_middle_line_of_buffer
  4: below_when_empty_buffer
  5: below_when_at_last_character_of_a_buffer

*** End of source buffer ***
Got command: goto_end_of_line(None,)
*** Start of source buffer ***
  1: 
  2: below_when_at_first_line_of_a_buffer
  3: below_when_on_middle_line_of_buffer<CURSOR>
  4: below_when_empty_buffer
  5: below_when_at_last_character_of_a_buffer

*** End of source buffer ***
Saying: ['new', 'statement', 'below']
Heard new statement below
*** Start of source buffer ***
  1: 
  2: below_when_at_first_line_of_a_buffer
  3: below_when_on_middle_line_of_buffer
  4: <CURSOR>
  5: below_when_empty_buffer
  6: below_when_at_last_character_of_a_buffer

*** End of source buffer ***
Saying: ['below', 'when', 'at', 'end', 'of', 'line']
Heard below when at end of line
*** Start of source buffer ***
  1: 
  2: below_when_at_first_line_of_a_buffer
  3: below_when_on_middle_line_of_buffer
  4: below_when_at_end_of_line<CURSOR>
  5: below_when_empty_buffer
  6: below_when_at_last_character_of_a_buffer

*** End of source buffer ***
Got command: goto_line(3,)
*** Start of source buffer ***
  1: 
  2: below_when_at_first_line_of_a_buffer
  3: <CURSOR>below_when_on_middle_line_of_buffer
  4: below_when_at_end_of_line
  5: below_when_empty_buffer
  6: below_when_at_last_character_of_a_buffer

*** End of source buffer ***
Got command: goto_beginning_of_line(None,)
*** Start of source buffer ***
  1: 
  2: below_when_at_first_line_of_a_buffer
  3: <CURSOR>below_when_on_middle_line_of_buffer
  4: below_when_at_end_of_line
  5: below_when_empty_buffer
  6: below_when_at_last_character_of_a_buffer

*** End of source buffer ***
Saying: ['new', 'statement', 'below']
Heard new statement below
*** Start of source buffer ***
  1: 
  2: below_when_at_first_line_of_a_buffer
  3: below_when_on_middle_line_of_buffer
  4: <CURSOR>
  5: below_when_at_end_of_line
  6: below_when_empty_buffer
  7: below_when_at_last_character_of_a_buffer

*** End of source buffer ***
Saying: ['below', 'when', 'at', 'beginning', 'of', 'line']
Heard below when at beginning of line
*** Start of source buffer ***
  1: 
  2: below_when_at_first_line_of_a_buffer
  3: below_when_on_middle_line_of_buffer
  4: below_when_at_beginning_of_line<CURSOR>
  5: below_when_at_end_of_line
  6: below_when_empty_buffer
  7: below_when_at_last_character_of_a_buffer

*** End of source buffer ***
Got command: goto(10,)
*** Start of source buffer ***
  1: 
  2: below_whe<CURSOR>n_at_first_line_of_a_buffer
  3: below_when_on_middle_line_of_buffer
  4: below_when_at_beginning_of_line
  5: below_when_at_end_of_line
Saying: ['new', 'statement', 'below']
Heard new statement below
*** Start of source buffer ***
  1: 
  2: below_when_at_first_line_of_a_buffer
  3: <CURSOR>
  4: below_when_on_middle_line_of_buffer
  5: below_when_at_beginning_of_line
  6: below_when_at_end_of_line
Saying: ['below', 'when', 'at', 'middle', 'of', 'a', 'line']
Heard below when at middle of a line
*** Start of source buffer ***
  1: 
  2: below_when_at_first_line_of_a_buffer
  3: below_when_at_middle_of_a_line<CURSOR>
  4: below_when_on_middle_line_of_buffer
  5: below_when_at_beginning_of_line
  6: below_when_at_end_of_line
WARNING: source file 'blah2.py' doesn't exist.
*** Start of source buffer ***
  1: <CURSOR>

*** End of source buffer ***
Saying: ['new', 'statement', 'above']
Heard new statement above
*** Start of source buffer ***
  1: <CURSOR>
  2: 

*** End of source buffer ***
Saying: ['above', 'when', 'empty', 'buffer']
Heard above when empty buffer
*** Start of source buffer ***
  1: above_when_empty_buffer<CURSOR>
  2: 

*** End of source buffer ***
Got command: goto(0,)
*** Start of source buffer ***
  1: <CURSOR>above_when_empty_buffer
  2: 

*** End of source buffer ***
Saying: ['new', 'statement', 'above']
Heard new statement above
*** Start of source buffer ***
  1: <CURSOR>
  2: above_when_empty_buffer
  3: 

*** End of source buffer ***
Saying: ['above', 'when', 'at', 'first', 'line', 'of', 'a', 'buffer']
Heard above when at first line of a buffer
*** Start of source buffer ***
  1: above_when_at_first_line_of_a_buffer<CURSOR>
  2: above_when_empty_buffer
  3: 

*** End of source buffer ***
Got command: goto(61,)
*** Start of source buffer ***
  1: above_when_at_first_line_of_a_buffer
  2: above_when_empty_buffer
  3: <CURSOR>

*** End of source buffer ***
Saying: ['new', 'statement', 'above']
Heard new statement above
*** Start of source buffer ***
  1: above_when_at_first_line_of_a_buffer
  2: above_when_empty_buffer
  3: <CURSOR>
  4: 

*** End of source buffer ***
Saying: ['above', 'when', 'at', 'last', 'character', 'of', 'a', 'buffer']
Heard above when at last character of a buffer
*** Start of source buffer ***
  1: above_when_at_first_line_of_a_buffer
  2: above_when_empty_buffer
  3: above_when_at_last_character_of_a_buffer<CURSOR>
  4: 

*** End of source buffer ***
Got command: goto_line(2,)
*** Start of source buffer ***
  1: above_when_at_first_line_of_a_buffer
  2: <CURSOR>above_when_empty_buffer
  3: above_when_at_last_character_of_a_buffer
  4: 

*** End of source buffer ***
Saying: ['new', 'statement', 'above']
Heard new statement above
*** Start of source buffer ***
  1: above_when_at_first_line_of_a_buffer
  2: <CURSOR>
  3: above_when_empty_buffer
  4: above_when_at_last_character_of_a_buffer
  5: 

*** End of source buffer ***
Saying: ['above', 'when', 'on', 'middle', 'line', 'of', 'buffer']
Heard above when on middle line of buffer
*** Start of source buffer ***
  1: above_when_at_first_line_of_a_buffer
  2: above_when_on_middle_line_of_buffer<CURSOR>
  3: above_when_empty_buffer
  4: above_when_at_last_character_of_a_buffer
  5: 

*** End of source buffer ***
Got command: goto_line(3,)
*** Start of source buffer ***
  1: above_when_at_first_line_of_a_buffer
  2: above_when_on_middle_line_of_buffer
  3: <CURSOR>above_when_empty_buffer
  4: above_when_at_last_character_of_a_buffer
  5: 

*** End of source buffer ***
Got command: goto_end_of_line(None,)
*** Start of source buffer ***
  1: above_when_at_first_line_of_a_buffer
  2: above_when_on_middle_line_of_buffer
  3: above_when_empty_buffer<CURSOR>
  4: above_when_at_last_character_of_a_buffer
  5: 

*** End of source buffer ***
Saying: ['new', 'statement', 'above']
Heard new statement above
*** Start of source buffer ***
  1: above_when_at_first_line_of_a_buffer
  2: above_when_on_middle_line_of_buffer
  3: <CURSOR>
  4: above_when_empty_buffer
  5: above_when_at_last_character_of_a_buffer
  6: 

*** End of source buffer ***
Saying: ['above', 'when', 'at', 'end', 'of', 'line']
Heard above when at end of line
*** Start of source buffer ***
  1: above_when_at_first_line_of_a_buffer
  2: above_when_on_middle_line_of_buffer
  3: above_when_at_end_of_line<CURSOR>
  4: above_when_empty_buffer
  5: above_when_at_last_character_of_a_buffer
  6: 

*** End of source buffer ***
Got command: goto_line(3,)
*** Start of source buffer ***
  1: above_when_at_first_line_of_a_buffer
  2: above_when_on_middle_line_of_buffer
  3: <CURSOR>above_when_at_end_of_line
  4: above_when_empty_buffer
  5: above_when_at_last_character_of_a_buffer
  6: 

*** End of source buffer ***
Got command: goto_beginning_of_line(None,)
*** Start of source buffer ***
  1: above_when_at_first_line_of_a_buffer
  2: above_when_on_middle_line_of_buffer
  3: <CURSOR>above_when_at_end_of_line
  4: above_when_empty_buffer
  5: above_when_at_last_character_of_a_buffer
  6: 

*** End of source buffer ***
Saying: ['new', 'statement', 'above']
Heard new statement above
*** Start of source buffer ***
  1: above_when_at_first_line_of_a_buffer
  2: above_when_on_middle_line_of_buffer
  3: <CURSOR>
  4: above_when_at_end_of_line
  5: above_when_empty_buffer
  6: above_when_at_last_character_of_a_buffer
Saying: ['above', 'when', 'at', 'beginning', 'of', 'line']
Heard above when at beginning of line
*** Start of source buffer ***
  1: above_when_at_first_line_of_a_buffer
  2: above_when_on_middle_line_of_buffer
  3: above_when_at_beginning_of_line<CURSOR>
  4: above_when_at_end_of_line
  5: above_when_empty_buffer
  6: above_when_at_last_character_of_a_buffer
Got command: goto(10,)
*** Start of source buffer ***
  1: above_when<CURSOR>_at_first_line_of_a_buffer
  2: above_when_on_middle_line_of_buffer
  3: above_when_at_beginning_of_line
  4: above_when_at_end_of_line
Saying: ['new', 'statement', 'above']
Heard new statement above
*** Start of source buffer ***
  1: <CURSOR>
  2: above_when_at_first_line_of_a_buffer
  3: above_when_on_middle_line_of_buffer
  4: above_when_at_beginning_of_line
Saying: ['above', 'when', 'at', 'middle', 'of', 'a', 'line']
Heard above when at middle of a line
*** Start of source buffer ***
  1: above_when_at_middle_of_a_line<CURSOR>
  2: above_when_at_first_line_of_a_buffer
  3: above_when_on_middle_line_of_buffer
  4: above_when_at_beginning_of_line


*******************************************************************************
* Name        : number_dictation
* Description : Test number dictation
*******************************************************************************

WARNING: source file 'blah.py' doesn't exist.
*** Start of source buffer ***
  1: <CURSOR>

*** End of source buffer ***
Got command: say(['23\\twenty-three', '54\\fifty-four', 'comma', '0\\zero', '.\\point', '04\\oh four'],None,0,0,)
Heard twenty-three fifty-four comma zero point oh four
*** Start of source buffer ***
  1: 2354, 0.04<CURSOR>

*** End of source buffer ***
Got command: say(['select', '0\\zero', '.\\point'],0
,1,0,)
Heard select zero point
*** Start of source buffer ***
  1: 2354, <SEL_START>0.<SEL_END>04

*** End of source buffer ***
Got command: say(['select', '04\\oh four'],0
,1,0,)
Heard select oh four
*** Start of source buffer ***
  1: 2354, 0.<SEL_START>04<SEL_END>

*** End of source buffer ***
Got command: say(['select', '0\\zero', '.\\point', '04\\oh four'],0
,1,0,)
Heard select zero point oh four
*** Start of source buffer ***
  1: 2354, <SEL_START>0.04<SEL_END>

*** End of source buffer ***


*******************************************************************************
* Name        : persistence
* Description : testing persistence between VoiceCode sessions
*******************************************************************************

As best as I can tell from SF Browse CVS, this test was 
    introduced in revision vcode vcode-0-0-7, and broken before 
    vcode-0-0-8, and has never since worked in the manner the 
    printed >>> comments indicate, until now -- DCF


>>> Starting mediator with persistence
EdSim instance EdSim(0) connected


>>> Testing console command: compile_symbols([r'N:\DavidFox\Code\VoiceCode\VCode\Data\TestData\small_buff.c'])

Compiling symbols for file '%VCODE_HOME%\Data\TestData\small_buff.c'
>>> Known symbols are: 
API_function: ['A. P. I. function', 'API function']
THIS_SYMBOL_WAS_PARSED_FROM_test_py_std_sym: ['this symbol was parsed from test P. Y. standard sym', 'this symbol was parsed from test P. Y. standard symbol', 'this symbol was parsed from test P. Y. std sym', 'this symbol was parsed from test P. Y. std symbol', 'this symbol was parsed from test pie standard sym', 'this symbol was parsed from test pie standard symbol', 'this symbol was parsed from test pie std sym', 'this symbol was parsed from test pie std symbol', 'this symbol was parsed from test py standard sym', 'this symbol was parsed from test py standard symbol', 'this symbol was parsed from test py std sym', 'this symbol was parsed from test py std symbol', 'this symbol was parsed from test python standard sym', 'this symbol was parsed from test python standard symbol', 'this symbol was parsed from test python std sym', 'this symbol was parsed from test python std symbol']
__abs__: ['abs', 'underscore abs', 'underscore absolute', 'underscore absolute value']
abs: ['abs', 'absolute', 'absolute value']
abspath: ['abs path', 'absolute path', 'abspath']
accept: ['accept']
accept2dyear: ['accept 2 dyear', 'accept two D. year']
access: ['access']
acos: ['A. cos', 'acos', 'arc cos', 'arc cosine']
acosh: ['A. cos H.', 'acosh', 'arc cos H.', 'arc cosine H.', 'hyperbolic arc cosine']
acquire: ['acquire']
f_name: ['F. name']
f_name2: ['F. name 2']
float: ['float']
horiz_pos: ['horiz pos', 'horiz position', 'horiz positioning', 'horizontal pos', 'horizontal position', 'horizontal positioning', 'horizontally pos', 'horizontally position', 'horizontally positioning']
move: ['move']
move_horiz: ['move horiz', 'move horizontal', 'move horizontally']
move_vert: ['move vert', 'move vertical', 'move vertically']
this_sym_has_an_other_abbrev: ['this sym has an other abbrev', 'this symbol has an other abbrev']
this_sym_is_unres: ['this sym is unres', 'this symbol is unres']
this_sym_is_unres_too: ['this sym is unres too', 'this symbol is unres too']
void: ['void']
x: ['X.']
y: ['Y.']
_cached_symbols_as_one_string[a] is:
    access  abs  acosh  acos  abspath  acquire  accept2dyear  accept  __abs__  API_function 
_cached_symbols_as_one_string[f] is:
    float  f_name  f_name2 
_cached_symbols_as_one_string[h] is:
    horiz_pos 
_cached_symbols_as_one_string[m] is:
    move  move_horiz  move_vert 
_cached_symbols_as_one_string[t] is:
    THIS_SYMBOL_WAS_PARSED_FROM_test_py_std_sym  this_sym_is_unres  this_sym_is_unres_too  this_sym_has_an_other_abbrev 
_cached_symbols_as_one_string[v] is:
    void 
_cached_symbols_as_one_string[x] is:
    x 
_cached_symbols_as_one_string[y] is:
    y 


>>> Restarting mediator with persistence. Compiled symbols should still be in the dictionary.



>>> Testing console command: quit(save_speech_files=0, disconnect=0)

EdSim instance EdSim(0) connected


>>> Testing console command: print_symbols()

API_function: ['A. P. I. function', 'API function']
THIS_SYMBOL_WAS_PARSED_FROM_test_py_std_sym: ['this symbol was parsed from test P. Y. standard sym', 'this symbol was parsed from test P. Y. standard symbol', 'this symbol was parsed from test P. Y. std sym', 'this symbol was parsed from test P. Y. std symbol', 'this symbol was parsed from test pie standard sym', 'this symbol was parsed from test pie standard symbol', 'this symbol was parsed from test pie std sym', 'this symbol was parsed from test pie std symbol', 'this symbol was parsed from test py standard sym', 'this symbol was parsed from test py standard symbol', 'this symbol was parsed from test py std sym', 'this symbol was parsed from test py std symbol', 'this symbol was parsed from test python standard sym', 'this symbol was parsed from test python standard symbol', 'this symbol was parsed from test python std sym', 'this symbol was parsed from test python std symbol']
__abs__: ['abs', 'underscore abs', 'underscore absolute', 'underscore absolute value']
abs: ['abs', 'absolute', 'absolute value']
abspath: ['abs path', 'absolute path', 'abspath']
accept: ['accept']
accept2dyear: ['accept 2 dyear', 'accept two D. year']
access: ['access']
acos: ['A. cos', 'acos', 'arc cos', 'arc cosine']
acosh: ['A. cos H.', 'acosh', 'arc cos H.', 'arc cosine H.', 'hyperbolic arc cosine']
acquire: ['acquire']
f_name: ['F. name']
f_name2: ['F. name 2']
float: ['float']
horiz_pos: ['horiz pos', 'horiz position', 'horiz positioning', 'horizontal pos', 'horizontal position', 'horizontal positioning', 'horizontally pos', 'horizontally position', 'horizontally positioning']
move: ['move']
move_horiz: ['move horiz', 'move horizontal', 'move horizontally']
move_vert: ['move vert', 'move vertical', 'move vertically']
this_sym_has_an_other_abbrev: ['this sym has an other abbrev', 'this symbol has an other abbrev']
this_sym_is_unres: ['this sym is unres', 'this symbol is unres']
this_sym_is_unres_too: ['this sym is unres too', 'this symbol is unres too']
void: ['void']
x: ['X.']
y: ['Y.']


>>> Restarting mediator WITHOUT persistence. There should be NO symbols in the dictionary.



>>> Testing console command: quit(save_speech_files=0, disconnect=0)

EdSim instance EdSim(0) connected


>>> Testing console command: print_symbols()



>>> Testing console command: quit(save_speech_files=0, disconnect=0)



*******************************************************************************
* Name        : profile_config
* Description : profiling configuration
*******************************************************************************



*******************************************************************************
* Name        : punctuation
* Description : testing the various Python CSCs and LSAs
*******************************************************************************

WARNING: source file 'blah.py' doesn't exist.
*** Start of source buffer ***
  1: <CURSOR>

*** End of source buffer ***
Saying: ['variable', '\\blank space', '=\\equals', '\\space-bar', 'index', '*\\asterisk', '2\\two', '**\\double asterisk', '8\\eight', '\\New-Line']
Heard variable blank space equals space-bar index asterisk two double asterisk eight New-Line
*** Start of source buffer ***
  1: variable  =  index*2**8
  2: <CURSOR>

*** End of source buffer ***
Saying: ['variable', 'equals', 'variable', '/\\slash', '2\\two', '+\\plus-sign', '1\\one', '-\\minus-sign', 'index', 'new statement']
Heard variable equals variable slash two plus-sign one minus-sign index new statement
*** Start of source buffer ***
  1: variable  =  index*2**8
  2: variable = variable/2+1-index
  3: <CURSOR>

*** End of source buffer ***
Saying: ['variable', '=\\equals', 'index', '%\\percent', '2\\two', '+\\plus', 'index', '%\\percent-sign', '3\\three', 'new statement']
Heard variable equals index percent two plus index percent-sign three new statement
*** Start of source buffer ***
  1: variable  =  index*2**8
  2: variable = variable/2+1-index
  3: variable = index%2 + index%3
  4: <CURSOR>

*** End of source buffer ***
Saying: ['if', 'index', '&\\ampersand', 'variable', 'then']
Heard if index ampersand variable then
  2: variable = variable/2+1-index
  3: variable = index%2 + index%3
  4: if index&variable:
  5:     <CURSOR>

*** End of source buffer ***
Saying: ['if', 'index', '|\\pipe', 'variable', '|\\pipe-sign', 'index', '|\\vertical-bar', 'value', 'then']
Heard if index pipe variable pipe-sign index vertical-bar value then
  3: variable = index%2 + index%3
  4: if index&variable:
  5:     if index|variable|index|value:
  6:         <CURSOR>

*** End of source buffer ***
Saying: ['index', '=\\equals', '0\\zero', ';\\semicolon', 'variable', '=\\equals', '0\\zero', ';\\semi', 'new statement']
Heard index equals zero semicolon variable equals zero semi new statement
  4: if index&variable:
  5:     if index|variable|index|value:
  6:         index = 0; variable = 0;
  7:         <CURSOR>

*** End of source buffer ***
Saying: ['index', '.\\dot', 'function', '()\\without arguments', 'new statement']
Heard index dot function without arguments new statement
  5:     if index|variable|index|value:
  6:         index = 0; variable = 0;
  7:         index.function()
  8:         <CURSOR>

*** End of source buffer ***
Saying: ['variable', '=\\equals', 'new', 'list', '0\\zero', '...\\ellipsis', '10', 'new statement']
Heard variable equals new list zero ellipsis 10 new statement
  6:         index = 0; variable = 0;
  7:         index.function()
  8:         variable = [0...10]
  9:         <CURSOR>

*** End of source buffer ***
Saying: ['#\\pound', '!\\bang', 'python', 'new statement']
Heard pound bang python new statement
  7:         index.function()
  8:         variable = [0...10]
  9:         #!python
 10:         <CURSOR>

*** End of source buffer ***
Saying: ['#\\pound-sign', '!\\exclamation-mark', 'python', 'new statement']
Heard pound-sign exclamation-mark python new statement
  8:         variable = [0...10]
  9:         #!python
 10:         #!python
 11:         <CURSOR>

*** End of source buffer ***
Saying: ['if', '~\\tilde', 'index', 'and', '~\\squiggle', 'variable', 'then']
Heard if tilde index and squiggle variable then
  9:         #!python
 10:         #!python
 11:         if ~index and ~variable:
 12:             <CURSOR>

*** End of source buffer ***
Saying: ['variable', '::\\double colon', 'index', '::\\colon colon', 'field', 'new statement']
Heard variable double colon index colon colon field new statement
 10:         #!python
 11:         if ~index and ~variable:
 12:             variable::index::field
 13:             <CURSOR>

*** End of source buffer ***
Saying: ['if', 'index', '<\\less-than', '0\\zero', 'and\\and', 'index', '>\\greater-than', '-\\minus-sign', '1\\one', 'then']
Heard if index less-than zero and index greater-than minus-sign one then
 11:         if ~index and ~variable:
 12:             variable::index::field
 13:             if index < 0 and index > -1:
 14:                 <CURSOR>

*** End of source buffer ***
Saying: ['index', '=\\equal-sign', '0\\zero', 'new statement']
Heard index equal-sign zero new statement
 12:             variable::index::field
 13:             if index < 0 and index > -1:
 14:                 index=0
 15:                 <CURSOR>

*** End of source buffer ***
Saying: ['function', '(\\open-paren', '0\\zero', ')\\close-paren', 'new statement']
Heard function open-paren zero close-paren new statement
 13:             if index < 0 and index > -1:
 14:                 index=0
 15:                 function(0)
 16:                 <CURSOR>

*** End of source buffer ***
Saying: ['function', 'parens', '0\\zero', 'new statement']
Heard function parens zero new statement
 14:                 index=0
 15:                 function(0)
 16:                 function(0)
 17:                 <CURSOR>

*** End of source buffer ***
Saying: ['function', '()\\empty parens', 'new statement']
Heard function empty parens new statement
 15:                 function(0)
 16:                 function(0)
 17:                 function()
 18:                 <CURSOR>

*** End of source buffer ***
Saying: ['list', '[\\open-bracket', '0\\zero', ']\\close-bracket', 'new statement']
Heard list open-bracket zero close-bracket new statement
 16:                 function(0)
 17:                 function()
 18:                 list[0]
 19:                 <CURSOR>

*** End of source buffer ***
Saying: ['list', 'brackets', '0\\zero', 'new statement']
Heard list brackets zero new statement
 17:                 function()
 18:                 list[0]
 19:                 list[0]
 20:                 <CURSOR>

*** End of source buffer ***
Saying: ['list', '[]\\empty brackets', 'new statement']
Heard list empty brackets new statement
 18:                 list[0]
 19:                 list[0]
 20:                 list[]
 21:                 <CURSOR>

*** End of source buffer ***
Saying: ['dictionary', 'braces', '0\\zero', 'new statement']
Heard dictionary braces zero new statement
 19:                 list[0]
 20:                 list[]
 21:                 dictionary{0}
 22:                 <CURSOR>

*** End of source buffer ***
Saying: ['<\\open-angle', 'head', '>\\close-angle', 'new statement']
Heard open-angle head close-angle new statement
 20:                 list[]
 21:                 dictionary{0}
 22:                 <head>
 23:                 <CURSOR>

*** End of source buffer ***
Saying: ['angle brackets', 'head', 'new statement']
Heard angle brackets head new statement
 21:                 dictionary{0}
 22:                 <head>
 23:                 <head>
 24:                 <CURSOR>

*** End of source buffer ***
Saying: ['<>\\empty angles', 'new statement']
Heard empty angles new statement
 22:                 <head>
 23:                 <head>
 24:                 <>
 25:                 <CURSOR>

*** End of source buffer ***
Saying: ['pattern', 'equals', 'raw', 'string', 'single', 'quotes', 'back slash sierra', 'asterisk', 'back slash cap sierra', '+\\plus-sign', 'new statement']
Heard pattern equals raw string single quotes back slash sierra asterisk back slash cap sierra plus-sign new statement
 23:                 <head>
 24:                 <>
 25:                 pattern = r'\s*\S+'
 26:                 <CURSOR>

*** End of source buffer ***
Saying: ['string', '=\\equals', "'\\open-single-quote", 'message', "'\\close-single-quote", 'new statement']
Heard string equals open-single-quote message close-single-quote new statement
 24:                 <>
 25:                 pattern = r'\s*\S+'
 26:                 string = 'message'
 27:                 <CURSOR>

*** End of source buffer ***
Saying: ['string', 'equals', 'single', 'quotes', 'message', 'new statement']
Heard string equals single quotes message new statement
 25:                 pattern = r'\s*\S+'
 26:                 string = 'message'
 27:                 string = 'message'
 28:                 <CURSOR>

*** End of source buffer ***
Saying: ["''\\empty single-quotes", 'new statement']
Heard empty single-quotes new statement
 26:                 string = 'message'
 27:                 string = 'message'
 28:                 ''
 29:                 <CURSOR>

*** End of source buffer ***
Saying: ['string', '=\\equals', '"\\open-quote', 'message', '"\\close-quote', 'new statement']
Heard string equals open-quote message close-quote new statement
 27:                 string = 'message'
 28:                 ''
 29:                 string = "message"
 30:                 <CURSOR>

*** End of source buffer ***
Saying: ['string', 'equals', 'quotes', 'message', 'new statement']
Heard string equals quotes message new statement
 28:                 ''
 29:                 string = "message"
 30:                 string = "message"
 31:                 <CURSOR>

*** End of source buffer ***
Saying: ['""\\empty quotes', 'new statement']
Heard empty quotes new statement
 29:                 string = "message"
 30:                 string = "message"
 31:                 ""
 32:                 <CURSOR>

*** End of source buffer ***
Saying: ['string', '=\\equals', '`\\open-backquote', 'message', '`\\close-backquote', 'new statement']
Heard string equals open-backquote message close-backquote new statement
 30:                 string = "message"
 31:                 ""
 32:                 string = `message`
 33:                 <CURSOR>

*** End of source buffer ***
Saying: ['string', '=\\equals', 'backquotes', 'message', 'new statement']
Heard string equals backquotes message new statement
 31:                 ""
 32:                 string = `message`
 33:                 string = `message`
 34:                 <CURSOR>

*** End of source buffer ***
Saying: ['``\\empty backquotes', 'new statement']
Heard empty backquotes new statement
 32:                 string = `message`
 33:                 string = `message`
 34:                 ``
 35:                 <CURSOR>

*** End of source buffer ***
Saying: ['quotes']
Heard quotes
 32:                 string = `message`
 33:                 string = `message`
 34:                 ``
 35:                 "<CURSOR>"

*** End of source buffer ***
Saying: ['back slash A.', 'new statement']
Heard back slash A. new statement
 33:                 string = `message`
 34:                 ``
 35:                 "\a"
 36:                 <CURSOR>

*** End of source buffer ***
Saying: ['back slash alpha', 'new statement']
Heard back slash alpha new statement
 34:                 ``
 35:                 "\a"
 36:                 \a
 37:                 <CURSOR>

*** End of source buffer ***
Saying: ['quotes']
Heard quotes
 34:                 ``
 35:                 "\a"
 36:                 \a
 37:                 "<CURSOR>"

*** End of source buffer ***
Saying: ['back slash B.']
Heard back slash B.
 34:                 ``
 35:                 "\a"
 36:                 \a
 37:                 "\b<CURSOR>"

*** End of source buffer ***
Saying: ['back slash bravo']
Heard back slash bravo
 34:                 ``
 35:                 "\a"
 36:                 \a
 37:                 "\b\b<CURSOR>"

*** End of source buffer ***
Saying: ['new statement']
Heard new statement
 35:                 "\a"
 36:                 \a
 37:                 "\b\b"
 38:                 <CURSOR>

*** End of source buffer ***
Saying: ['quotes']
Heard quotes
 35:                 "\a"
 36:                 \a
 37:                 "\b\b"
 38:                 "<CURSOR>"

*** End of source buffer ***
Saying: ['back slash C.']
Heard back slash C.
 35:                 "\a"
 36:                 \a
 37:                 "\b\b"
 38:                 "\c<CURSOR>"

*** End of source buffer ***
Saying: ['back slash charlie']
Heard back slash charlie
 35:                 "\a"
 36:                 \a
 37:                 "\b\b"
 38:                 "\c\c<CURSOR>"

*** End of source buffer ***
Saying: ['new statement']
Heard new statement
 36:                 \a
 37:                 "\b\b"
 38:                 "\c\c"
 39:                 <CURSOR>

*** End of source buffer ***
Saying: ['quotes']
Heard quotes
 36:                 \a
 37:                 "\b\b"
 38:                 "\c\c"
 39:                 "<CURSOR>"

*** End of source buffer ***
Saying: ['back slash D.']
Heard back slash D.
 36:                 \a
 37:                 "\b\b"
 38:                 "\c\c"
 39:                 "\d<CURSOR>"

*** End of source buffer ***
Saying: ['back slash delta']
Heard back slash delta
 36:                 \a
 37:                 "\b\b"
 38:                 "\c\c"
 39:                 "\d\d<CURSOR>"

*** End of source buffer ***
Saying: ['new statement']
Heard new statement
 37:                 "\b\b"
 38:                 "\c\c"
 39:                 "\d\d"
 40:                 <CURSOR>

*** End of source buffer ***
Saying: ['quotes']
Heard quotes
 37:                 "\b\b"
 38:                 "\c\c"
 39:                 "\d\d"
 40:                 "<CURSOR>"

*** End of source buffer ***
Saying: ['back slash E.']
Heard back slash E.
 37:                 "\b\b"
 38:                 "\c\c"
 39:                 "\d\d"
 40:                 "\e<CURSOR>"

*** End of source buffer ***
Saying: ['back slash echo']
Heard back slash echo
 37:                 "\b\b"
 38:                 "\c\c"
 39:                 "\d\d"
 40:                 "\e\e<CURSOR>"

*** End of source buffer ***
Saying: ['new statement']
Heard new statement
 38:                 "\c\c"
 39:                 "\d\d"
 40:                 "\e\e"
 41:                 <CURSOR>

*** End of source buffer ***
Saying: ['quotes']
Heard quotes
 38:                 "\c\c"
 39:                 "\d\d"
 40:                 "\e\e"
 41:                 "<CURSOR>"

*** End of source buffer ***
Saying: ['back slash F.']
Heard back slash F.
 38:                 "\c\c"
 39:                 "\d\d"
 40:                 "\e\e"
 41:                 "\f<CURSOR>"

*** End of source buffer ***
Saying: ['back slash foxtrot']
Heard back slash foxtrot
 38:                 "\c\c"
 39:                 "\d\d"
 40:                 "\e\e"
 41:                 "\f\f<CURSOR>"

*** End of source buffer ***
Saying: ['new statement']
Heard new statement
 39:                 "\d\d"
 40:                 "\e\e"
 41:                 "\f\f"
 42:                 <CURSOR>

*** End of source buffer ***
Saying: ['quotes']
Heard quotes
 39:                 "\d\d"
 40:                 "\e\e"
 41:                 "\f\f"
 42:                 "<CURSOR>"

*** End of source buffer ***
Saying: ['back slash G.']
Heard back slash G.
 39:                 "\d\d"
 40:                 "\e\e"
 41:                 "\f\f"
 42:                 "\g<CURSOR>"

*** End of source buffer ***
Saying: ['back slash golf']
Heard back slash golf
 39:                 "\d\d"
 40:                 "\e\e"
 41:                 "\f\f"
 42:                 "\g\g<CURSOR>"

*** End of source buffer ***
Saying: ['new statement']
Heard new statement
 40:                 "\e\e"
 41:                 "\f\f"
 42:                 "\g\g"
 43:                 <CURSOR>

*** End of source buffer ***
Saying: ['quotes']
Heard quotes
 40:                 "\e\e"
 41:                 "\f\f"
 42:                 "\g\g"
 43:                 "<CURSOR>"

*** End of source buffer ***
Saying: ['back slash H.']
Heard back slash H.
 40:                 "\e\e"
 41:                 "\f\f"
 42:                 "\g\g"
 43:                 "\h<CURSOR>"

*** End of source buffer ***
Saying: ['back slash hotel']
Heard back slash hotel
 40:                 "\e\e"
 41:                 "\f\f"
 42:                 "\g\g"
 43:                 "\h\h<CURSOR>"

*** End of source buffer ***
Saying: ['new statement']
Heard new statement
 41:                 "\f\f"
 42:                 "\g\g"
 43:                 "\h\h"
 44:                 <CURSOR>

*** End of source buffer ***
Saying: ['quotes']
Heard quotes
 41:                 "\f\f"
 42:                 "\g\g"
 43:                 "\h\h"
 44:                 "<CURSOR>"

*** End of source buffer ***
Saying: ['back slash I.']
Heard back slash I.
 41:                 "\f\f"
 42:                 "\g\g"
 43:                 "\h\h"
 44:                 "\i<CURSOR>"

*** End of source buffer ***
Saying: ['back slash india']
Heard back slash india
 41:                 "\f\f"
 42:                 "\g\g"
 43:                 "\h\h"
 44:                 "\i\i<CURSOR>"

*** End of source buffer ***
Saying: ['new statement']
Heard new statement
 42:                 "\g\g"
 43:                 "\h\h"
 44:                 "\i\i"
 45:                 <CURSOR>

*** End of source buffer ***
Saying: ['quotes']
Heard quotes
 42:                 "\g\g"
 43:                 "\h\h"
 44:                 "\i\i"
 45:                 "<CURSOR>"

*** End of source buffer ***
Saying: ['back slash J.']
Heard back slash J.
 42:                 "\g\g"
 43:                 "\h\h"
 44:                 "\i\i"
 45:                 "\j<CURSOR>"

*** End of source buffer ***
Saying: ['back slash juliett']
Heard back slash juliett
 42:                 "\g\g"
 43:                 "\h\h"
 44:                 "\i\i"
 45:                 "\j\j<CURSOR>"

*** End of source buffer ***
Saying: ['new statement']
Heard new statement
 43:                 "\h\h"
 44:                 "\i\i"
 45:                 "\j\j"
 46:                 <CURSOR>

*** End of source buffer ***
Saying: ['quotes']
Heard quotes
 43:                 "\h\h"
 44:                 "\i\i"
 45:                 "\j\j"
 46:                 "<CURSOR>"

*** End of source buffer ***
Saying: ['back slash K.']
Heard back slash K.
 43:                 "\h\h"
 44:                 "\i\i"
 45:                 "\j\j"
 46:                 "\k<CURSOR>"

*** End of source buffer ***
Saying: ['back slash kilo']
Heard back slash kilo
 43:                 "\h\h"
 44:                 "\i\i"
 45:                 "\j\j"
 46:                 "\k\k<CURSOR>"

*** End of source buffer ***
Saying: ['new statement']
Heard new statement
 44:                 "\i\i"
 45:                 "\j\j"
 46:                 "\k\k"
 47:                 <CURSOR>

*** End of source buffer ***
Saying: ['quotes']
Heard quotes
 44:                 "\i\i"
 45:                 "\j\j"
 46:                 "\k\k"
 47:                 "<CURSOR>"

*** End of source buffer ***
Saying: ['back slash L.']
Heard back slash L.
 44:                 "\i\i"
 45:                 "\j\j"
 46:                 "\k\k"
 47:                 "\l<CURSOR>"

*** End of source buffer ***
Saying: ['back slash lima']
Heard back slash lima
 44:                 "\i\i"
 45:                 "\j\j"
 46:                 "\k\k"
 47:                 "\l\l<CURSOR>"

*** End of source buffer ***
Saying: ['new statement']
Heard new statement
 45:                 "\j\j"
 46:                 "\k\k"
 47:                 "\l\l"
 48:                 <CURSOR>

*** End of source buffer ***
Saying: ['quotes']
Heard quotes
 45:                 "\j\j"
 46:                 "\k\k"
 47:                 "\l\l"
 48:                 "<CURSOR>"

*** End of source buffer ***
Saying: ['back slash M.']
Heard back slash M.
 45:                 "\j\j"
 46:                 "\k\k"
 47:                 "\l\l"
 48:                 "\m<CURSOR>"

*** End of source buffer ***
Saying: ['back slash mike']
Heard back slash mike
 45:                 "\j\j"
 46:                 "\k\k"
 47:                 "\l\l"
 48:                 "\m\m<CURSOR>"

*** End of source buffer ***
Saying: ['new statement']
Heard new statement
 46:                 "\k\k"
 47:                 "\l\l"
 48:                 "\m\m"
 49:                 <CURSOR>

*** End of source buffer ***
Saying: ['quotes']
Heard quotes
 46:                 "\k\k"
 47:                 "\l\l"
 48:                 "\m\m"
 49:                 "<CURSOR>"

*** End of source buffer ***
Saying: ['back slash N.']
Heard back slash N.
 46:                 "\k\k"
 47:                 "\l\l"
 48:                 "\m\m"
 49:                 "\n<CURSOR>"

*** End of source buffer ***
Saying: ['back slash november']
Heard back slash november
 46:                 "\k\k"
 47:                 "\l\l"
 48:                 "\m\m"
 49:                 "\n\n<CURSOR>"

*** End of source buffer ***
Saying: ['new statement']
Heard new statement
 47:                 "\l\l"
 48:                 "\m\m"
 49:                 "\n\n"
 50:                 <CURSOR>

*** End of source buffer ***
Saying: ['quotes']
Heard quotes
 47:                 "\l\l"
 48:                 "\m\m"
 49:                 "\n\n"
 50:                 "<CURSOR>"

*** End of source buffer ***
Saying: ['back slash O.']
Heard back slash O.
 47:                 "\l\l"
 48:                 "\m\m"
 49:                 "\n\n"
 50:                 "\o<CURSOR>"

*** End of source buffer ***
Saying: ['back slash oscar']
Heard back slash oscar
 47:                 "\l\l"
 48:                 "\m\m"
 49:                 "\n\n"
 50:                 "\o\o<CURSOR>"

*** End of source buffer ***
Saying: ['new statement']
Heard new statement
 48:                 "\m\m"
 49:                 "\n\n"
 50:                 "\o\o"
 51:                 <CURSOR>

*** End of source buffer ***
Saying: ['quotes']
Heard quotes
 48:                 "\m\m"
 49:                 "\n\n"
 50:                 "\o\o"
 51:                 "<CURSOR>"

*** End of source buffer ***
Saying: ['back slash P.']
Heard back slash P.
 48:                 "\m\m"
 49:                 "\n\n"
 50:                 "\o\o"
 51:                 "\p<CURSOR>"

*** End of source buffer ***
Saying: ['back slash papa']
Heard back slash papa
 48:                 "\m\m"
 49:                 "\n\n"
 50:                 "\o\o"
 51:                 "\p\p<CURSOR>"

*** End of source buffer ***
Saying: ['new statement']
Heard new statement
 49:                 "\n\n"
 50:                 "\o\o"
 51:                 "\p\p"
 52:                 <CURSOR>

*** End of source buffer ***
Saying: ['quotes']
Heard quotes
 49:                 "\n\n"
 50:                 "\o\o"
 51:                 "\p\p"
 52:                 "<CURSOR>"

*** End of source buffer ***
Saying: ['back slash Q.']
Heard back slash Q.
 49:                 "\n\n"
 50:                 "\o\o"
 51:                 "\p\p"
 52:                 "\q<CURSOR>"

*** End of source buffer ***
Saying: ['back slash quebec']
Heard back slash quebec
 49:                 "\n\n"
 50:                 "\o\o"
 51:                 "\p\p"
 52:                 "\q\q<CURSOR>"

*** End of source buffer ***
Saying: ['new statement']
Heard new statement
 50:                 "\o\o"
 51:                 "\p\p"
 52:                 "\q\q"
 53:                 <CURSOR>

*** End of source buffer ***
Saying: ['quotes']
Heard quotes
 50:                 "\o\o"
 51:                 "\p\p"
 52:                 "\q\q"
 53:                 "<CURSOR>"

*** End of source buffer ***
Saying: ['back slash R.']
Heard back slash R.
 50:                 "\o\o"
 51:                 "\p\p"
 52:                 "\q\q"
 53:                 "\r<CURSOR>"

*** End of source buffer ***
Saying: ['back slash romeo']
Heard back slash romeo
 50:                 "\o\o"
 51:                 "\p\p"
 52:                 "\q\q"
 53:                 "\r\r<CURSOR>"

*** End of source buffer ***
Saying: ['new statement']
Heard new statement
 51:                 "\p\p"
 52:                 "\q\q"
 53:                 "\r\r"
 54:                 <CURSOR>

*** End of source buffer ***
Saying: ['quotes']
Heard quotes
 51:                 "\p\p"
 52:                 "\q\q"
 53:                 "\r\r"
 54:                 "<CURSOR>"

*** End of source buffer ***
Saying: ['back slash S.']
Heard back slash S.
 51:                 "\p\p"
 52:                 "\q\q"
 53:                 "\r\r"
 54:                 "\s<CURSOR>"

*** End of source buffer ***
Saying: ['back slash sierra']
Heard back slash sierra
 51:                 "\p\p"
 52:                 "\q\q"
 53:                 "\r\r"
 54:                 "\s\s<CURSOR>"

*** End of source buffer ***
Saying: ['new statement']
Heard new statement
 52:                 "\q\q"
 53:                 "\r\r"
 54:                 "\s\s"
 55:                 <CURSOR>

*** End of source buffer ***
Saying: ['quotes']
Heard quotes
 52:                 "\q\q"
 53:                 "\r\r"
 54:                 "\s\s"
 55:                 "<CURSOR>"

*** End of source buffer ***
Saying: ['back slash T.']
Heard back slash T.
 52:                 "\q\q"
 53:                 "\r\r"
 54:                 "\s\s"
 55:                 "\t<CURSOR>"

*** End of source buffer ***
Saying: ['back slash tango']
Heard back slash tango
 52:                 "\q\q"
 53:                 "\r\r"
 54:                 "\s\s"
 55:                 "\t\t<CURSOR>"

*** End of source buffer ***
Saying: ['new statement']
Heard new statement
 53:                 "\r\r"
 54:                 "\s\s"
 55:                 "\t\t"
 56:                 <CURSOR>

*** End of source buffer ***
Saying: ['quotes']
Heard quotes
 53:                 "\r\r"
 54:                 "\s\s"
 55:                 "\t\t"
 56:                 "<CURSOR>"

*** End of source buffer ***
Saying: ['back slash U.']
Heard back slash U.
 53:                 "\r\r"
 54:                 "\s\s"
 55:                 "\t\t"
 56:                 "\u<CURSOR>"

*** End of source buffer ***
Saying: ['back slash uniform']
Heard back slash uniform
 53:                 "\r\r"
 54:                 "\s\s"
 55:                 "\t\t"
 56:                 "\u\u<CURSOR>"

*** End of source buffer ***
Saying: ['new statement']
Heard new statement
 54:                 "\s\s"
 55:                 "\t\t"
 56:                 "\u\u"
 57:                 <CURSOR>

*** End of source buffer ***
Saying: ['quotes']
Heard quotes
 54:                 "\s\s"
 55:                 "\t\t"
 56:                 "\u\u"
 57:                 "<CURSOR>"

*** End of source buffer ***
Saying: ['back slash V.']
Heard back slash V.
 54:                 "\s\s"
 55:                 "\t\t"
 56:                 "\u\u"
 57:                 "\v<CURSOR>"

*** End of source buffer ***
Saying: ['back slash victor']
Heard back slash victor
 54:                 "\s\s"
 55:                 "\t\t"
 56:                 "\u\u"
 57:                 "\v\v<CURSOR>"

*** End of source buffer ***
Saying: ['new statement']
Heard new statement
 55:                 "\t\t"
 56:                 "\u\u"
 57:                 "\v\v"
 58:                 <CURSOR>

*** End of source buffer ***
Saying: ['quotes']
Heard quotes
 55:                 "\t\t"
 56:                 "\u\u"
 57:                 "\v\v"
 58:                 "<CURSOR>"

*** End of source buffer ***
Saying: ['back slash W.']
Heard back slash W.
 55:                 "\t\t"
 56:                 "\u\u"
 57:                 "\v\v"
 58:                 "\w<CURSOR>"

*** End of source buffer ***
Saying: ['back slash whiskey']
Heard back slash whiskey
 55:                 "\t\t"
 56:                 "\u\u"
 57:                 "\v\v"
 58:                 "\w\w<CURSOR>"

*** End of source buffer ***
Saying: ['new statement']
Heard new statement
 56:                 "\u\u"
 57:                 "\v\v"
 58:                 "\w\w"
 59:                 <CURSOR>

*** End of source buffer ***
Saying: ['quotes']
Heard quotes
 56:                 "\u\u"
 57:                 "\v\v"
 58:                 "\w\w"
 59:                 "<CURSOR>"

*** End of source buffer ***
Saying: ['back slash X.']
Heard back slash X.
 56:                 "\u\u"
 57:                 "\v\v"
 58:                 "\w\w"
 59:                 "\x<CURSOR>"

*** End of source buffer ***
Saying: ['back slash xray']
Heard back slash xray
 56:                 "\u\u"
 57:                 "\v\v"
 58:                 "\w\w"
 59:                 "\x\x<CURSOR>"

*** End of source buffer ***
Saying: ['new statement']
Heard new statement
 57:                 "\v\v"
 58:                 "\w\w"
 59:                 "\x\x"
 60:                 <CURSOR>

*** End of source buffer ***
Saying: ['quotes']
Heard quotes
 57:                 "\v\v"
 58:                 "\w\w"
 59:                 "\x\x"
 60:                 "<CURSOR>"

*** End of source buffer ***
Saying: ['back slash Y.']
Heard back slash Y.
 57:                 "\v\v"
 58:                 "\w\w"
 59:                 "\x\x"
 60:                 "\y<CURSOR>"

*** End of source buffer ***
Saying: ['back slash yankee']
Heard back slash yankee
 57:                 "\v\v"
 58:                 "\w\w"
 59:                 "\x\x"
 60:                 "\y\y<CURSOR>"

*** End of source buffer ***
Saying: ['new statement']
Heard new statement
 58:                 "\w\w"
 59:                 "\x\x"
 60:                 "\y\y"
 61:                 <CURSOR>

*** End of source buffer ***
Saying: ['quotes']
Heard quotes
 58:                 "\w\w"
 59:                 "\x\x"
 60:                 "\y\y"
 61:                 "<CURSOR>"

*** End of source buffer ***
Saying: ['back slash Z.']
Heard back slash Z.
 58:                 "\w\w"
 59:                 "\x\x"
 60:                 "\y\y"
 61:                 "\z<CURSOR>"

*** End of source buffer ***
Saying: ['back slash zulu']
Heard back slash zulu
 58:                 "\w\w"
 59:                 "\x\x"
 60:                 "\y\y"
 61:                 "\z\z<CURSOR>"

*** End of source buffer ***
Saying: ['new statement']
Heard new statement
 59:                 "\x\x"
 60:                 "\y\y"
 61:                 "\z\z"
 62:                 <CURSOR>

*** End of source buffer ***
Saying: ['quotes']
Heard quotes
 59:                 "\x\x"
 60:                 "\y\y"
 61:                 "\z\z"
 62:                 "<CURSOR>"

*** End of source buffer ***
Saying: ['back slash cap A.']
Heard back slash cap A.
 59:                 "\x\x"
 60:                 "\y\y"
 61:                 "\z\z"
 62:                 "\A<CURSOR>"

*** End of source buffer ***
Saying: ['back slash cap alpha', 'new statement']
Heard back slash cap alpha new statement
 60:                 "\y\y"
 61:                 "\z\z"
 62:                 "\A\A"
 63:                 <CURSOR>

*** End of source buffer ***
Saying: ['quotes']
Heard quotes
 60:                 "\y\y"
 61:                 "\z\z"
 62:                 "\A\A"
 63:                 "<CURSOR>"

*** End of source buffer ***
Saying: ['back slash cap B.']
Heard back slash cap B.
 60:                 "\y\y"
 61:                 "\z\z"
 62:                 "\A\A"
 63:                 "\B<CURSOR>"

*** End of source buffer ***
Saying: ['back slash cap bravo', 'new statement']
Heard back slash cap bravo new statement
 61:                 "\z\z"
 62:                 "\A\A"
 63:                 "\B\B"
 64:                 <CURSOR>

*** End of source buffer ***
Saying: ['quotes', 'back slash cap C.', 'back slash cap charlie', 'new statement']
Heard quotes back slash cap C. back slash cap charlie new statement
 62:                 "\A\A"
 63:                 "\B\B"
 64:                 "\C\C"
 65:                 <CURSOR>

*** End of source buffer ***
Saying: ['quotes']
Heard quotes
 62:                 "\A\A"
 63:                 "\B\B"
 64:                 "\C\C"
 65:                 "<CURSOR>"

*** End of source buffer ***
Saying: ['back slash cap D.']
Heard back slash cap D.
 62:                 "\A\A"
 63:                 "\B\B"
 64:                 "\C\C"
 65:                 "\D<CURSOR>"

*** End of source buffer ***
Saying: ['back slash cap delta', 'new statement']
Heard back slash cap delta new statement
 63:                 "\B\B"
 64:                 "\C\C"
 65:                 "\D\D"
 66:                 <CURSOR>

*** End of source buffer ***
Saying: ['quotes']
Heard quotes
 63:                 "\B\B"
 64:                 "\C\C"
 65:                 "\D\D"
 66:                 "<CURSOR>"

*** End of source buffer ***
Saying: ['back slash cap E.']
Heard back slash cap E.
 63:                 "\B\B"
 64:                 "\C\C"
 65:                 "\D\D"
 66:                 "\E<CURSOR>"

*** End of source buffer ***
Saying: ['back slash cap echo', 'new statement']
Heard back slash cap echo new statement
 64:                 "\C\C"
 65:                 "\D\D"
 66:                 "\E\E"
 67:                 <CURSOR>

*** End of source buffer ***
Saying: ['quotes']
Heard quotes
 64:                 "\C\C"
 65:                 "\D\D"
 66:                 "\E\E"
 67:                 "<CURSOR>"

*** End of source buffer ***
Saying: ['back slash cap F.']
Heard back slash cap F.
 64:                 "\C\C"
 65:                 "\D\D"
 66:                 "\E\E"
 67:                 "\F<CURSOR>"

*** End of source buffer ***
Saying: ['back slash cap foxtrot', 'new statement']
Heard back slash cap foxtrot new statement
 65:                 "\D\D"
 66:                 "\E\E"
 67:                 "\F\F"
 68:                 <CURSOR>

*** End of source buffer ***
Saying: ['quotes']
Heard quotes
 65:                 "\D\D"
 66:                 "\E\E"
 67:                 "\F\F"
 68:                 "<CURSOR>"

*** End of source buffer ***
Saying: ['back slash cap G.']
Heard back slash cap G.
 65:                 "\D\D"
 66:                 "\E\E"
 67:                 "\F\F"
 68:                 "\G<CURSOR>"

*** End of source buffer ***
Saying: ['back slash cap golf', 'new statement']
Heard back slash cap golf new statement
 66:                 "\E\E"
 67:                 "\F\F"
 68:                 "\G\G"
 69:                 <CURSOR>

*** End of source buffer ***
Saying: ['quotes']
Heard quotes
 66:                 "\E\E"
 67:                 "\F\F"
 68:                 "\G\G"
 69:                 "<CURSOR>"

*** End of source buffer ***
Saying: ['back slash cap H.']
Heard back slash cap H.
 66:                 "\E\E"
 67:                 "\F\F"
 68:                 "\G\G"
 69:                 "\H<CURSOR>"

*** End of source buffer ***
Saying: ['back slash cap hotel', 'new statement']
Heard back slash cap hotel new statement
 67:                 "\F\F"
 68:                 "\G\G"
 69:                 "\H\H"
 70:                 <CURSOR>

*** End of source buffer ***
Saying: ['quotes']
Heard quotes
 67:                 "\F\F"
 68:                 "\G\G"
 69:                 "\H\H"
 70:                 "<CURSOR>"

*** End of source buffer ***
Saying: ['back slash cap I.']
Heard back slash cap I.
 67:                 "\F\F"
 68:                 "\G\G"
 69:                 "\H\H"
 70:                 "\I<CURSOR>"

*** End of source buffer ***
Saying: ['back slash cap india', 'new statement']
Heard back slash cap india new statement
 68:                 "\G\G"
 69:                 "\H\H"
 70:                 "\I\I"
 71:                 <CURSOR>

*** End of source buffer ***
Saying: ['quotes']
Heard quotes
 68:                 "\G\G"
 69:                 "\H\H"
 70:                 "\I\I"
 71:                 "<CURSOR>"

*** End of source buffer ***
Saying: ['back slash cap J.']
Heard back slash cap J.
 68:                 "\G\G"
 69:                 "\H\H"
 70:                 "\I\I"
 71:                 "\J<CURSOR>"

*** End of source buffer ***
Saying: ['back slash cap juliett', 'new statement']
Heard back slash cap juliett new statement
 69:                 "\H\H"
 70:                 "\I\I"
 71:                 "\J\J"
 72:                 <CURSOR>

*** End of source buffer ***
Saying: ['quotes']
Heard quotes
 69:                 "\H\H"
 70:                 "\I\I"
 71:                 "\J\J"
 72:                 "<CURSOR>"

*** End of source buffer ***
Saying: ['back slash cap K.']
Heard back slash cap K.
 69:                 "\H\H"
 70:                 "\I\I"
 71:                 "\J\J"
 72:                 "\K<CURSOR>"

*** End of source buffer ***
Saying: ['back slash cap kilo', 'new statement']
Heard back slash cap kilo new statement
 70:                 "\I\I"
 71:                 "\J\J"
 72:                 "\K\K"
 73:                 <CURSOR>

*** End of source buffer ***
Saying: ['quotes']
Heard quotes
 70:                 "\I\I"
 71:                 "\J\J"
 72:                 "\K\K"
 73:                 "<CURSOR>"

*** End of source buffer ***
Saying: ['back slash cap L.']
Heard back slash cap L.
 70:                 "\I\I"
 71:                 "\J\J"
 72:                 "\K\K"
 73:                 "\L<CURSOR>"

*** End of source buffer ***
Saying: ['back slash cap lima', 'new statement']
Heard back slash cap lima new statement
 71:                 "\J\J"
 72:                 "\K\K"
 73:                 "\L\L"
 74:                 <CURSOR>

*** End of source buffer ***
Saying: ['quotes']
Heard quotes
 71:                 "\J\J"
 72:                 "\K\K"
 73:                 "\L\L"
 74:                 "<CURSOR>"

*** End of source buffer ***
Saying: ['back slash cap M.']
Heard back slash cap M.
 71:                 "\J\J"
 72:                 "\K\K"
 73:                 "\L\L"
 74:                 "\M<CURSOR>"

*** End of source buffer ***
Saying: ['back slash cap mike', 'new statement']
Heard back slash cap mike new statement
 72:                 "\K\K"
 73:                 "\L\L"
 74:                 "\M\M"
 75:                 <CURSOR>

*** End of source buffer ***
Saying: ['quotes']
Heard quotes
 72:                 "\K\K"
 73:                 "\L\L"
 74:                 "\M\M"
 75:                 "<CURSOR>"

*** End of source buffer ***
Saying: ['back slash cap N.']
Heard back slash cap N.
 72:                 "\K\K"
 73:                 "\L\L"
 74:                 "\M\M"
 75:                 "\N<CURSOR>"

*** End of source buffer ***
Saying: ['back slash cap november', 'new statement']
Heard back slash cap november new statement
 73:                 "\L\L"
 74:                 "\M\M"
 75:                 "\N\N"
 76:                 <CURSOR>

*** End of source buffer ***
Saying: ['quotes']
Heard quotes
 73:                 "\L\L"
 74:                 "\M\M"
 75:                 "\N\N"
 76:                 "<CURSOR>"

*** End of source buffer ***
Saying: ['back slash cap O.']
Heard back slash cap O.
 73:                 "\L\L"
 74:                 "\M\M"
 75:                 "\N\N"
 76:                 "\O<CURSOR>"

*** End of source buffer ***
Saying: ['back slash cap oscar', 'new statement']
Heard back slash cap oscar new statement
 74:                 "\M\M"
 75:                 "\N\N"
 76:                 "\O\O"
 77:                 <CURSOR>

*** End of source buffer ***
Saying: ['quotes']
Heard quotes
 74:                 "\M\M"
 75:                 "\N\N"
 76:                 "\O\O"
 77:                 "<CURSOR>"

*** End of source buffer ***
Saying: ['back slash cap P.']
Heard back slash cap P.
 74:                 "\M\M"
 75:                 "\N\N"
 76:                 "\O\O"
 77:                 "\P<CURSOR>"

*** End of source buffer ***
Saying: ['back slash cap papa', 'new statement']
Heard back slash cap papa new statement
 75:                 "\N\N"
 76:                 "\O\O"
 77:                 "\P\P"
 78:                 <CURSOR>

*** End of source buffer ***
Saying: ['quotes']
Heard quotes
 75:                 "\N\N"
 76:                 "\O\O"
 77:                 "\P\P"
 78:                 "<CURSOR>"

*** End of source buffer ***
Saying: ['back slash cap Q.']
Heard back slash cap Q.
 75:                 "\N\N"
 76:                 "\O\O"
 77:                 "\P\P"
 78:                 "\Q<CURSOR>"

*** End of source buffer ***
Saying: ['back slash cap quebec', 'new statement']
Heard back slash cap quebec new statement
 76:                 "\O\O"
 77:                 "\P\P"
 78:                 "\Q\Q"
 79:                 <CURSOR>

*** End of source buffer ***
Saying: ['quotes']
Heard quotes
 76:                 "\O\O"
 77:                 "\P\P"
 78:                 "\Q\Q"
 79:                 "<CURSOR>"

*** End of source buffer ***
Saying: ['back slash cap R.']
Heard back slash cap R.
 76:                 "\O\O"
 77:                 "\P\P"
 78:                 "\Q\Q"
 79:                 "\R<CURSOR>"

*** End of source buffer ***
Saying: ['back slash cap romeo', 'new statement']
Heard back slash cap romeo new statement
 77:                 "\P\P"
 78:                 "\Q\Q"
 79:                 "\R\R"
 80:                 <CURSOR>

*** End of source buffer ***
Saying: ['quotes']
Heard quotes
 77:                 "\P\P"
 78:                 "\Q\Q"
 79:                 "\R\R"
 80:                 "<CURSOR>"

*** End of source buffer ***
Saying: ['back slash cap S.']
Heard back slash cap S.
 77:                 "\P\P"
 78:                 "\Q\Q"
 79:                 "\R\R"
 80:                 "\S<CURSOR>"

*** End of source buffer ***
Saying: ['back slash cap sierra', 'new statement']
Heard back slash cap sierra new statement
 78:                 "\Q\Q"
 79:                 "\R\R"
 80:                 "\S\S"
 81:                 <CURSOR>

*** End of source buffer ***
Saying: ['quotes']
Heard quotes
 78:                 "\Q\Q"
 79:                 "\R\R"
 80:                 "\S\S"
 81:                 "<CURSOR>"

*** End of source buffer ***
Saying: ['back slash cap T.']
Heard back slash cap T.
 78:                 "\Q\Q"
 79:                 "\R\R"
 80:                 "\S\S"
 81:                 "\T<CURSOR>"

*** End of source buffer ***
Saying: ['back slash cap tango', 'new statement']
Heard back slash cap tango new statement
 79:                 "\R\R"
 80:                 "\S\S"
 81:                 "\T\T"
 82:                 <CURSOR>

*** End of source buffer ***
Saying: ['quotes']
Heard quotes
 79:                 "\R\R"
 80:                 "\S\S"
 81:                 "\T\T"
 82:                 "<CURSOR>"

*** End of source buffer ***
Saying: ['back slash cap U.']
Heard back slash cap U.
 79:                 "\R\R"
 80:                 "\S\S"
 81:                 "\T\T"
 82:                 "\U<CURSOR>"

*** End of source buffer ***
Saying: ['back slash cap uniform', 'new statement']
Heard back slash cap uniform new statement
 80:                 "\S\S"
 81:                 "\T\T"
 82:                 "\U\U"
 83:                 <CURSOR>

*** End of source buffer ***
Saying: ['quotes']
Heard quotes
 80:                 "\S\S"
 81:                 "\T\T"
 82:                 "\U\U"
 83:                 "<CURSOR>"

*** End of source buffer ***
Saying: ['back slash cap V.']
Heard back slash cap V.
 80:                 "\S\S"
 81:                 "\T\T"
 82:                 "\U\U"
 83:                 "\V<CURSOR>"

*** End of source buffer ***
Saying: ['back slash cap victor', 'new statement']
Heard back slash cap victor new statement
 81:                 "\T\T"
 82:                 "\U\U"
 83:                 "\V\V"
 84:                 <CURSOR>

*** End of source buffer ***
Saying: ['quotes']
Heard quotes
 81:                 "\T\T"
 82:                 "\U\U"
 83:                 "\V\V"
 84:                 "<CURSOR>"

*** End of source buffer ***
Saying: ['back slash cap W.']
Heard back slash cap W.
 81:                 "\T\T"
 82:                 "\U\U"
 83:                 "\V\V"
 84:                 "\W<CURSOR>"

*** End of source buffer ***
Saying: ['back slash cap whiskey', 'new statement']
Heard back slash cap whiskey new statement
 82:                 "\U\U"
 83:                 "\V\V"
 84:                 "\W\W"
 85:                 <CURSOR>

*** End of source buffer ***
Saying: ['quotes']
Heard quotes
 82:                 "\U\U"
 83:                 "\V\V"
 84:                 "\W\W"
 85:                 "<CURSOR>"

*** End of source buffer ***
Saying: ['back slash cap X.']
Heard back slash cap X.
 82:                 "\U\U"
 83:                 "\V\V"
 84:                 "\W\W"
 85:                 "\X<CURSOR>"

*** End of source buffer ***
Saying: ['back slash cap xray', 'new statement']
Heard back slash cap xray new statement
 83:                 "\V\V"
 84:                 "\W\W"
 85:                 "\X\X"
 86:                 <CURSOR>

*** End of source buffer ***
Saying: ['quotes']
Heard quotes
 83:                 "\V\V"
 84:                 "\W\W"
 85:                 "\X\X"
 86:                 "<CURSOR>"

*** End of source buffer ***
Saying: ['back slash cap Y.']
Heard back slash cap Y.
 83:                 "\V\V"
 84:                 "\W\W"
 85:                 "\X\X"
 86:                 "\Y<CURSOR>"

*** End of source buffer ***
Saying: ['back slash cap yankee', 'new statement']
Heard back slash cap yankee new statement
 84:                 "\W\W"
 85:                 "\X\X"
 86:                 "\Y\Y"
 87:                 <CURSOR>

*** End of source buffer ***
Saying: ['quotes']
Heard quotes
 84:                 "\W\W"
 85:                 "\X\X"
 86:                 "\Y\Y"
 87:                 "<CURSOR>"

*** End of source buffer ***
Saying: ['back slash cap Z.']
Heard back slash cap Z.
 84:                 "\W\W"
 85:                 "\X\X"
 86:                 "\Y\Y"
 87:                 "\Z<CURSOR>"

*** End of source buffer ***
Saying: ['back slash cap zulu', 'new statement']
Heard back slash cap zulu new statement
 85:                 "\X\X"
 86:                 "\Y\Y"
 87:                 "\Z\Z"
 88:                 <CURSOR>

*** End of source buffer ***
Saying: ['index', 'semi', 'variable', 'semi']
Heard index semi variable semi
 85:                 "\X\X"
 86:                 "\Y\Y"
 87:                 "\Z\Z"
 88:                 index; variable; <CURSOR>

*** End of source buffer ***
Saying: ['previous semi', 'previous semi']
Heard previous semi previous semi
 85:                 "\X\X"
 86:                 "\Y\Y"
 87:                 "\Z\Z"
 88:                 index; <CURSOR>variable; 

*** End of source buffer ***
Saying: ['after semi']
Heard after semi
 85:                 "\X\X"
 86:                 "\Y\Y"
 87:                 "\Z\Z"
 88:                 index; variable; <CURSOR>

*** End of source buffer ***
Saying: ['before previous semi']
Heard before previous semi
 85:                 "\X\X"
 86:                 "\Y\Y"
 87:                 "\Z\Z"
 88:                 index; variable<CURSOR>; 

*** End of source buffer ***
Saying: ['after semi']
Heard after semi
 85:                 "\X\X"
 86:                 "\Y\Y"
 87:                 "\Z\Z"
 88:                 index; variable; <CURSOR>

*** End of source buffer ***
Saying: ['before semi']
Heard before semi
 85:                 "\X\X"
 86:                 "\Y\Y"
 87:                 "\Z\Z"
 88:                 index; variable; <CURSOR>

*** End of source buffer ***
Saying: ['new statement']
Heard new statement
 86:                 "\Y\Y"
 87:                 "\Z\Z"
 88:                 index; variable;
 89:                 <CURSOR>

*** End of source buffer ***
Saying: ['variable', '=\\equals', 'brackets', '0\\zero', ',\\comma', '1\\one', ',\\comma', '3\\three']
Heard variable equals brackets zero comma one comma three
 86:                 "\Y\Y"
 87:                 "\Z\Z"
 88:                 index; variable;
 89:                 variable = [0, 1, 3<CURSOR>]

*** End of source buffer ***
Saying: ['previous comma']
Heard previous comma
 86:                 "\Y\Y"
 87:                 "\Z\Z"
 88:                 index; variable;
 89:                 variable = [0, 1, <CURSOR>3]

*** End of source buffer ***
Saying: ['after comma']
Heard after comma
 86:                 "\Y\Y"
 87:                 "\Z\Z"
 88:                 index; variable;
 89:                 variable = [0, 1, <CURSOR>3]

*** End of source buffer ***
Saying: ['before previous comma']
Heard before previous comma
 86:                 "\Y\Y"
 87:                 "\Z\Z"
 88:                 index; variable;
 89:                 variable = [0, 1<CURSOR>, 3]

*** End of source buffer ***
Saying: ['before next comma']
Heard before next comma
 86:                 "\Y\Y"
 87:                 "\Z\Z"
 88:                 index; variable;
 89:                 variable = [0, 1<CURSOR>, 3]

*** End of source buffer ***
Saying: ['new statement']
Heard new statement
 87:                 "\Z\Z"
 88:                 index; variable;
 89:                 variable = [0, 1, 3]
 90:                 <CURSOR>

*** End of source buffer ***
Saying: ['variable', '.\\dot', 'field', '.\\dot', 'value']
Heard variable dot field dot value
 87:                 "\Z\Z"
 88:                 index; variable;
 89:                 variable = [0, 1, 3]
 90:                 variable.field.value<CURSOR>

*** End of source buffer ***
Saying: ['previous dot', 'previous dot']
Heard previous dot previous dot
 87:                 "\Z\Z"
 88:                 index; variable;
 89:                 variable = [0, 1, 3]
 90:                 variable.<CURSOR>field.value

*** End of source buffer ***
Saying: ['after dot']
Heard after dot
 87:                 "\Z\Z"
 88:                 index; variable;
 89:                 variable = [0, 1, 3]
 90:                 variable.field.<CURSOR>value

*** End of source buffer ***
Saying: ['before previous dot']
Heard before previous dot
 87:                 "\Z\Z"
 88:                 index; variable;
 89:                 variable = [0, 1, 3]
 90:                 variable.field<CURSOR>.value

*** End of source buffer ***
Saying: ['before next dot']
Heard before next dot
 87:                 "\Z\Z"
 88:                 index; variable;
 89:                 variable = [0, 1, 3]
 90:                 variable.field<CURSOR>.value

*** End of source buffer ***
Saying: ['new statement']
Heard new statement
 88:                 index; variable;
 89:                 variable = [0, 1, 3]
 90:                 variable.field.value
 91:                 <CURSOR>

*** End of source buffer ***
Saying: ['braces', 'variable', ':\\colon', '0\\zero', 'comma', 'value', ':\\colon', '0\\zero']
Heard braces variable colon zero comma value colon zero
 88:                 index; variable;
 89:                 variable = [0, 1, 3]
 90:                 variable.field.value
 91:                 {variable: 0, value: 0<CURSOR>}

*** End of source buffer ***
Saying: ['previous colon', 'previous colon']
Heard previous colon previous colon
 88:                 index; variable;
 89:                 variable = [0, 1, 3]
 90:                 variable.field.value
 91:                 {variable: <CURSOR>0, value: 0}

*** End of source buffer ***
Saying: ['after colon']
Heard after colon
 88:                 index; variable;
 89:                 variable = [0, 1, 3]
 90:                 variable.field.value
 91:                 {variable: 0, value: <CURSOR>0}

*** End of source buffer ***
Saying: ['before previous colon']
Heard before previous colon
 88:                 index; variable;
 89:                 variable = [0, 1, 3]
 90:                 variable.field.value
 91:                 {variable: 0, value<CURSOR>: 0}

*** End of source buffer ***
Saying: ['before next colon']
Heard before next colon
 88:                 index; variable;
 89:                 variable = [0, 1, 3]
 90:                 variable.field.value
 91:                 {variable: 0, value<CURSOR>: 0}

*** End of source buffer ***
Saying: ['new statement']
Heard new statement
 89:                 variable = [0, 1, 3]
 90:                 variable.field.value
 91:                 {variable: 0, value: 0}
 92:                 <CURSOR>

*** End of source buffer ***
Saying: ['variable', '=\\equals', '2\\two', '*\\asterisk', '3\\three', '*\\asterisk', '4\\four']
Heard variable equals two asterisk three asterisk four
 89:                 variable = [0, 1, 3]
 90:                 variable.field.value
 91:                 {variable: 0, value: 0}
 92:                 variable = 2*3*4<CURSOR>

*** End of source buffer ***
Saying: ['previous asterisk', 'previous star']
Heard previous asterisk previous star
 89:                 variable = [0, 1, 3]
 90:                 variable.field.value
 91:                 {variable: 0, value: 0}
 92:                 variable = 2*<CURSOR>3*4

*** End of source buffer ***
Saying: ['after star']
Heard after star
 89:                 variable = [0, 1, 3]
 90:                 variable.field.value
 91:                 {variable: 0, value: 0}
 92:                 variable = 2*3*<CURSOR>4

*** End of source buffer ***
Saying: ['before previous asterisk']
Heard before previous asterisk
 89:                 variable = [0, 1, 3]
 90:                 variable.field.value
 91:                 {variable: 0, value: 0}
 92:                 variable = 2*3<CURSOR>*4

*** End of source buffer ***
Saying: ['before next star']
Heard before next star
 89:                 variable = [0, 1, 3]
 90:                 variable.field.value
 91:                 {variable: 0, value: 0}
 92:                 variable = 2*3<CURSOR>*4

*** End of source buffer ***
Saying: ['new statement']
Heard new statement
 90:                 variable.field.value
 91:                 {variable: 0, value: 0}
 92:                 variable = 2*3*4
 93:                 <CURSOR>

*** End of source buffer ***
Saying: ['variable', 'equals', '2\\two', '/\\slash', '3\\three', '/\\slash', '4\\four']
Heard variable equals two slash three slash four
 90:                 variable.field.value
 91:                 {variable: 0, value: 0}
 92:                 variable = 2*3*4
 93:                 variable = 2/3/4<CURSOR>

*** End of source buffer ***
Saying: ['previous slash', 'previous slash']
Heard previous slash previous slash
 90:                 variable.field.value
 91:                 {variable: 0, value: 0}
 92:                 variable = 2*3*4
 93:                 variable = 2/<CURSOR>3/4

*** End of source buffer ***
Saying: ['after slash']
Heard after slash
 90:                 variable.field.value
 91:                 {variable: 0, value: 0}
 92:                 variable = 2*3*4
 93:                 variable = 2/3/<CURSOR>4

*** End of source buffer ***
Saying: ['before previous slash']
Heard before previous slash
 90:                 variable.field.value
 91:                 {variable: 0, value: 0}
 92:                 variable = 2*3*4
 93:                 variable = 2/3<CURSOR>/4

*** End of source buffer ***
Saying: ['before next slash']
Heard before next slash
 90:                 variable.field.value
 91:                 {variable: 0, value: 0}
 92:                 variable = 2*3*4
 93:                 variable = 2/3<CURSOR>/4

*** End of source buffer ***
Saying: ['new statement']
Heard new statement
 91:                 {variable: 0, value: 0}
 92:                 variable = 2*3*4
 93:                 variable = 2/3/4
 94:                 <CURSOR>

*** End of source buffer ***
Saying: ['variable', '=\\equals', '2\\two', '+\\plus', '3\\three', '+\\plus', '4\\four']
Heard variable equals two plus three plus four
 91:                 {variable: 0, value: 0}
 92:                 variable = 2*3*4
 93:                 variable = 2/3/4
 94:                 variable = 2 + 3 + 4<CURSOR>

*** End of source buffer ***
Saying: ['previous plus', 'previous plus']
Heard previous plus previous plus
 91:                 {variable: 0, value: 0}
 92:                 variable = 2*3*4
 93:                 variable = 2/3/4
 94:                 variable = 2 + <CURSOR>3 + 4

*** End of source buffer ***
Saying: ['after plus']
Heard after plus
 91:                 {variable: 0, value: 0}
 92:                 variable = 2*3*4
 93:                 variable = 2/3/4
 94:                 variable = 2 + 3 + <CURSOR>4

*** End of source buffer ***
Saying: ['before previous plus']
Heard before previous plus
 91:                 {variable: 0, value: 0}
 92:                 variable = 2*3*4
 93:                 variable = 2/3/4
 94:                 variable = 2 + 3<CURSOR> + 4

*** End of source buffer ***
Saying: ['before next plus']
Heard before next plus
 91:                 {variable: 0, value: 0}
 92:                 variable = 2*3*4
 93:                 variable = 2/3/4
 94:                 variable = 2 + 3<CURSOR> + 4

*** End of source buffer ***
Saying: ['new statement']
Heard new statement
 92:                 variable = 2*3*4
 93:                 variable = 2/3/4
 94:                 variable = 2 + 3 + 4
 95:                 <CURSOR>

*** End of source buffer ***
Saying: ['variable', 'equals', '2\\two', '-\\minus', '3\\three', '-\\minus', '4\\four']
Heard variable equals two minus three minus four
 92:                 variable = 2*3*4
 93:                 variable = 2/3/4
 94:                 variable = 2 + 3 + 4
 95:                 variable = 2 - 3 - 4<CURSOR>

*** End of source buffer ***
Saying: ['previous minus', 'previous minus']
Heard previous minus previous minus
 92:                 variable = 2*3*4
 93:                 variable = 2/3/4
 94:                 variable = 2 + 3 + 4
 95:                 variable = 2 - <CURSOR>3 - 4

*** End of source buffer ***
Saying: ['after minus']
Heard after minus
 92:                 variable = 2*3*4
 93:                 variable = 2/3/4
 94:                 variable = 2 + 3 + 4
 95:                 variable = 2 - 3 - <CURSOR>4

*** End of source buffer ***
Saying: ['before previous minus']
Heard before previous minus
 92:                 variable = 2*3*4
 93:                 variable = 2/3/4
 94:                 variable = 2 + 3 + 4
 95:                 variable = 2 - 3<CURSOR> - 4

*** End of source buffer ***
Saying: ['before next minus']
Heard before next minus
 92:                 variable = 2*3*4
 93:                 variable = 2/3/4
 94:                 variable = 2 + 3 + 4
 95:                 variable = 2 - 3<CURSOR> - 4

*** End of source buffer ***
Saying: ['new statement']
Heard new statement
 93:                 variable = 2/3/4
 94:                 variable = 2 + 3 + 4
 95:                 variable = 2 - 3 - 4
 96:                 <CURSOR>

*** End of source buffer ***
Saying: ['variable', 'equals', '2\\two', '%\\modulo', '3\\three', '%\\modulo', '4\\four']
Heard variable equals two modulo three modulo four
 93:                 variable = 2/3/4
 94:                 variable = 2 + 3 + 4
 95:                 variable = 2 - 3 - 4
 96:                 variable = 2 % 3 % 4<CURSOR>

*** End of source buffer ***
Saying: ['previous percent', 'previous percent']
Heard previous percent previous percent
 93:                 variable = 2/3/4
 94:                 variable = 2 + 3 + 4
 95:                 variable = 2 - 3 - 4
 96:                 variable = 2 % <CURSOR>3 % 4

*** End of source buffer ***
Saying: ['after percent']
Heard after percent
 93:                 variable = 2/3/4
 94:                 variable = 2 + 3 + 4
 95:                 variable = 2 - 3 - 4
 96:                 variable = 2 % 3 % <CURSOR>4

*** End of source buffer ***
Saying: ['before previous percent']
Heard before previous percent
 93:                 variable = 2/3/4
 94:                 variable = 2 + 3 + 4
 95:                 variable = 2 - 3 - 4
 96:                 variable = 2 % 3<CURSOR> % 4

*** End of source buffer ***
Saying: ['before next percent']
Heard before next percent
 93:                 variable = 2/3/4
 94:                 variable = 2 + 3 + 4
 95:                 variable = 2 - 3 - 4
 96:                 variable = 2 % 3<CURSOR> % 4

*** End of source buffer ***
Saying: ['new statement']
Heard new statement
 94:                 variable = 2 + 3 + 4
 95:                 variable = 2 - 3 - 4
 96:                 variable = 2 % 3 % 4
 97:                 <CURSOR>

*** End of source buffer ***
Saying: ['0\\zero', '&\\ampersand', '1\\one', '&\\ampersand', '2\\two']
Heard zero ampersand one ampersand two
 94:                 variable = 2 + 3 + 4
 95:                 variable = 2 - 3 - 4
 96:                 variable = 2 % 3 % 4
 97:                 0&1&2<CURSOR>

*** End of source buffer ***
Saying: ['previous ampersand', 'previous ampersand']
Heard previous ampersand previous ampersand
 94:                 variable = 2 + 3 + 4
 95:                 variable = 2 - 3 - 4
 96:                 variable = 2 % 3 % 4
 97:                 0&<CURSOR>1&2

*** End of source buffer ***
Saying: ['after ampersand']
Heard after ampersand
 94:                 variable = 2 + 3 + 4
 95:                 variable = 2 - 3 - 4
 96:                 variable = 2 % 3 % 4
 97:                 0&1&<CURSOR>2

*** End of source buffer ***
Saying: ['before previous ampersand']
Heard before previous ampersand
 94:                 variable = 2 + 3 + 4
 95:                 variable = 2 - 3 - 4
 96:                 variable = 2 % 3 % 4
 97:                 0&1<CURSOR>&2

*** End of source buffer ***
Saying: ['before next ampersand']
Heard before next ampersand
 94:                 variable = 2 + 3 + 4
 95:                 variable = 2 - 3 - 4
 96:                 variable = 2 % 3 % 4
 97:                 0&1<CURSOR>&2

*** End of source buffer ***
Saying: ['new statement']
Heard new statement
 95:                 variable = 2 - 3 - 4
 96:                 variable = 2 % 3 % 4
 97:                 0&1&2
 98:                 <CURSOR>

*** End of source buffer ***
Saying: ['0\\zero', '|\\pipe', '1\\one', '|\\pipe', '2\\two']
Heard zero pipe one pipe two
 95:                 variable = 2 - 3 - 4
 96:                 variable = 2 % 3 % 4
 97:                 0&1&2
 98:                 0|1|2<CURSOR>

*** End of source buffer ***
Saying: ['previous pipe', 'previous pipe']
Heard previous pipe previous pipe
 95:                 variable = 2 - 3 - 4
 96:                 variable = 2 % 3 % 4
 97:                 0&1&2
 98:                 0|<CURSOR>1|2

*** End of source buffer ***
Saying: ['after pipe']
Heard after pipe
 95:                 variable = 2 - 3 - 4
 96:                 variable = 2 % 3 % 4
 97:                 0&1&2
 98:                 0|1|<CURSOR>2

*** End of source buffer ***
Saying: ['before previous pipe']
Heard before previous pipe
 95:                 variable = 2 - 3 - 4
 96:                 variable = 2 % 3 % 4
 97:                 0&1&2
 98:                 0|1<CURSOR>|2

*** End of source buffer ***
Saying: ['before next pipe']
Heard before next pipe
 95:                 variable = 2 - 3 - 4
 96:                 variable = 2 % 3 % 4
 97:                 0&1&2
 98:                 0|1<CURSOR>|2

*** End of source buffer ***
Saying: ['new statement']
Heard new statement
 96:                 variable = 2 % 3 % 4
 97:                 0&1&2
 98:                 0|1|2
 99:                 <CURSOR>

*** End of source buffer ***
Saying: ['0\\zero', '...\\ellipsis', '1\\one', '...\\ellipsis', '2\\two']
Heard zero ellipsis one ellipsis two
 96:                 variable = 2 % 3 % 4
 97:                 0&1&2
 98:                 0|1|2
 99:                 0...1...2<CURSOR>

*** End of source buffer ***
Saying: ['previous ellipsis', 'previous ellipsis']
Heard previous ellipsis previous ellipsis
 96:                 variable = 2 % 3 % 4
 97:                 0&1&2
 98:                 0|1|2
 99:                 0...<CURSOR>1...2

*** End of source buffer ***
Saying: ['after ellipsis']
Heard after ellipsis
 96:                 variable = 2 % 3 % 4
 97:                 0&1&2
 98:                 0|1|2
 99:                 0...1...<CURSOR>2

*** End of source buffer ***
Saying: ['before previous ellipsis']
Heard before previous ellipsis
 96:                 variable = 2 % 3 % 4
 97:                 0&1&2
 98:                 0|1|2
 99:                 0...1<CURSOR>...2

*** End of source buffer ***
Saying: ['before next ellipsis']
Heard before next ellipsis
 96:                 variable = 2 % 3 % 4
 97:                 0&1&2
 98:                 0|1|2
 99:                 0...1<CURSOR>...2

*** End of source buffer ***
Saying: ['new statement']
Heard new statement
 97:                 0&1&2
 98:                 0|1|2
 99:                 0...1...2
100:                 <CURSOR>

*** End of source buffer ***
Saying: ['0\\zero', '!\\bang', '1\\one', '!\\bang', '2\\two']
Heard zero bang one bang two
 97:                 0&1&2
 98:                 0|1|2
 99:                 0...1...2
100:                 0!1!2<CURSOR>

*** End of source buffer ***
Saying: ['previous bang', 'previous bang']
Heard previous bang previous bang
 97:                 0&1&2
 98:                 0|1|2
 99:                 0...1...2
100:                 0!<CURSOR>1!2

*** End of source buffer ***
Saying: ['after bang']
Heard after bang
 97:                 0&1&2
 98:                 0|1|2
 99:                 0...1...2
100:                 0!1!<CURSOR>2

*** End of source buffer ***
Saying: ['before previous bang']
Heard before previous bang
 97:                 0&1&2
 98:                 0|1|2
 99:                 0...1...2
100:                 0!1<CURSOR>!2

*** End of source buffer ***
Saying: ['before next bang']
Heard before next bang
 97:                 0&1&2
 98:                 0|1|2
 99:                 0...1...2
100:                 0!1<CURSOR>!2

*** End of source buffer ***
Saying: ['new statement']
Heard new statement
 98:                 0|1|2
 99:                 0...1...2
100:                 0!1!2
101:                 <CURSOR>

*** End of source buffer ***
Saying: ['0\\zero', '?\\question-mark', '1\\one', '?\\question-mark', '2\\two']
Heard zero question-mark one question-mark two
 98:                 0|1|2
 99:                 0...1...2
100:                 0!1!2
101:                 0?1?2<CURSOR>

*** End of source buffer ***
Saying: ['previous question-mark', 'previous question-mark']
Heard previous question-mark previous question-mark
 98:                 0|1|2
 99:                 0...1...2
100:                 0!1!2
101:                 0?<CURSOR>1?2

*** End of source buffer ***
Saying: ['after question-mark']
Heard after question-mark
 98:                 0|1|2
 99:                 0...1...2
100:                 0!1!2
101:                 0?1?<CURSOR>2

*** End of source buffer ***
Saying: ['before previous question-mark']
Heard before previous question-mark
 98:                 0|1|2
 99:                 0...1...2
100:                 0!1!2
101:                 0?1<CURSOR>?2

*** End of source buffer ***
Saying: ['before next question-mark']
Heard before next question-mark
 98:                 0|1|2
 99:                 0...1...2
100:                 0!1!2
101:                 0?1<CURSOR>?2

*** End of source buffer ***
Saying: ['new statement']
Heard new statement
 99:                 0...1...2
100:                 0!1!2
101:                 0?1?2
102:                 <CURSOR>

*** End of source buffer ***
Saying: ['0\\zero', '#\\pound-sign', '1\\one', '#\\pound-sign', '2\\two']
Heard zero pound-sign one pound-sign two
 99:                 0...1...2
100:                 0!1!2
101:                 0?1?2
102:                 0#1#2<CURSOR>

*** End of source buffer ***
Saying: ['previous pound-sign', 'previous pound-sign']
Heard previous pound-sign previous pound-sign
 99:                 0...1...2
100:                 0!1!2
101:                 0?1?2
102:                 0#<CURSOR>1#2

*** End of source buffer ***
Saying: ['after pound-sign']
Heard after pound-sign
 99:                 0...1...2
100:                 0!1!2
101:                 0?1?2
102:                 0#1#<CURSOR>2

*** End of source buffer ***
Saying: ['before previous pound-sign']
Heard before previous pound-sign
 99:                 0...1...2
100:                 0!1!2
101:                 0?1?2
102:                 0#1<CURSOR>#2

*** End of source buffer ***
Saying: ['before next pound-sign']
Heard before next pound-sign
 99:                 0...1...2
100:                 0!1!2
101:                 0?1?2
102:                 0#1<CURSOR>#2

*** End of source buffer ***
Saying: ['new statement']
Heard new statement
100:                 0!1!2
101:                 0?1?2
102:                 0#1#2
103:                 <CURSOR>

*** End of source buffer ***
Saying: ['0\\zero', '::\\double colon', '1\\one', '::\\double colon', '2\\two']
Heard zero double colon one double colon two
100:                 0!1!2
101:                 0?1?2
102:                 0#1#2
103:                 0::1::2<CURSOR>

*** End of source buffer ***
Saying: ['previous double colon', 'previous double colon']
Heard previous double colon previous double colon
100:                 0!1!2
101:                 0?1?2
102:                 0#1#2
103:                 0::<CURSOR>1::2

*** End of source buffer ***
Saying: ['after double colon']
Heard after double colon
100:                 0!1!2
101:                 0?1?2
102:                 0#1#2
103:                 0::1::<CURSOR>2

*** End of source buffer ***
Saying: ['before previous double colon']
Heard before previous double colon
100:                 0!1!2
101:                 0?1?2
102:                 0#1#2
103:                 0::1<CURSOR>::2

*** End of source buffer ***
Saying: ['before next double colon']
Heard before next double colon
100:                 0!1!2
101:                 0?1?2
102:                 0#1#2
103:                 0::1<CURSOR>::2

*** End of source buffer ***
Saying: ['new statement']
Heard new statement
101:                 0?1?2
102:                 0#1#2
103:                 0::1::2
104:                 <CURSOR>

*** End of source buffer ***
Saying: ['0\\zero', '~\\tilde', '1\\one', '~\\tilde', '2\\two']
Heard zero tilde one tilde two
101:                 0?1?2
102:                 0#1#2
103:                 0::1::2
104:                 0~1~2<CURSOR>

*** End of source buffer ***
Saying: ['previous tilde', 'previous tilde']
Heard previous tilde previous tilde
101:                 0?1?2
102:                 0#1#2
103:                 0::1::2
104:                 0~<CURSOR>1~2

*** End of source buffer ***
Saying: ['after tilde']
Heard after tilde
101:                 0?1?2
102:                 0#1#2
103:                 0::1::2
104:                 0~1~<CURSOR>2

*** End of source buffer ***
Saying: ['before previous tilde']
Heard before previous tilde
101:                 0?1?2
102:                 0#1#2
103:                 0::1::2
104:                 0~1<CURSOR>~2

*** End of source buffer ***
Saying: ['before next tilde']
Heard before next tilde
101:                 0?1?2
102:                 0#1#2
103:                 0::1::2
104:                 0~1<CURSOR>~2

*** End of source buffer ***
Saying: ['new statement']
Heard new statement
102:                 0#1#2
103:                 0::1::2
104:                 0~1~2
105:                 <CURSOR>

*** End of source buffer ***
Saying: ['0\\zero', '<\\less-than', '1\\one', '<\\less-than', '2\\two']
Heard zero less-than one less-than two
102:                 0#1#2
103:                 0::1::2
104:                 0~1~2
105:                 0 < 1 < 2<CURSOR>

*** End of source buffer ***
Saying: ['previous less-than', 'previous less-than']
Heard previous less-than previous less-than
102:                 0#1#2
103:                 0::1::2
104:                 0~1~2
105:                 0 < <CURSOR>1 < 2

*** End of source buffer ***
Saying: ['after less-than']
Heard after less-than
102:                 0#1#2
103:                 0::1::2
104:                 0~1~2
105:                 0 < 1 < <CURSOR>2

*** End of source buffer ***
Saying: ['before previous less-than']
Heard before previous less-than
102:                 0#1#2
103:                 0::1::2
104:                 0~1~2
105:                 0 < 1<CURSOR> < 2

*** End of source buffer ***
Saying: ['before next less-than']
Heard before next less-than
102:                 0#1#2
103:                 0::1::2
104:                 0~1~2
105:                 0 < 1<CURSOR> < 2

*** End of source buffer ***
Saying: ['new statement']
Heard new statement
103:                 0::1::2
104:                 0~1~2
105:                 0 < 1 < 2
106:                 <CURSOR>

*** End of source buffer ***
Saying: ['0\\zero', '>\\greater-than', '1\\one', '>\\greater-than', '2\\two']
Heard zero greater-than one greater-than two
103:                 0::1::2
104:                 0~1~2
105:                 0 < 1 < 2
106:                 0 > 1 > 2<CURSOR>

*** End of source buffer ***
Saying: ['previous greater-than', 'previous greater-than']
Heard previous greater-than previous greater-than
103:                 0::1::2
104:                 0~1~2
105:                 0 < 1 < 2
106:                 0 > <CURSOR>1 > 2

*** End of source buffer ***
Saying: ['after greater-than']
Heard after greater-than
103:                 0::1::2
104:                 0~1~2
105:                 0 < 1 < 2
106:                 0 > 1 > <CURSOR>2

*** End of source buffer ***
Saying: ['before previous greater-than']
Heard before previous greater-than
103:                 0::1::2
104:                 0~1~2
105:                 0 < 1 < 2
106:                 0 > 1<CURSOR> > 2

*** End of source buffer ***
Saying: ['before next greater-than']
Heard before next greater-than
103:                 0::1::2
104:                 0~1~2
105:                 0 < 1 < 2
106:                 0 > 1<CURSOR> > 2

*** End of source buffer ***
Saying: ['new statement']
Heard new statement
104:                 0~1~2
105:                 0 < 1 < 2
106:                 0 > 1 > 2
107:                 <CURSOR>

*** End of source buffer ***
Saying: ['0\\zero', '=\\equal-sign', '1\\one', '=\\equal-sign', '2\\two']
Heard zero equal-sign one equal-sign two
104:                 0~1~2
105:                 0 < 1 < 2
106:                 0 > 1 > 2
107:                 0=1=2<CURSOR>

*** End of source buffer ***
Saying: ['previous equal-sign', 'previous equal-sign']
Heard previous equal-sign previous equal-sign
104:                 0~1~2
105:                 0 < 1 < 2
106:                 0 > 1 > 2
107:                 0=<CURSOR>1=2

*** End of source buffer ***
Saying: ['after equal-sign']
Heard after equal-sign
104:                 0~1~2
105:                 0 < 1 < 2
106:                 0 > 1 > 2
107:                 0=1=<CURSOR>2

*** End of source buffer ***
Saying: ['before previous equal-sign']
Heard before previous equal-sign
104:                 0~1~2
105:                 0 < 1 < 2
106:                 0 > 1 > 2
107:                 0=1<CURSOR>=2

*** End of source buffer ***
Saying: ['before next equal-sign']
Heard before next equal-sign
104:                 0~1~2
105:                 0 < 1 < 2
106:                 0 > 1 > 2
107:                 0=1<CURSOR>=2

*** End of source buffer ***
Saying: ['new statement']
Heard new statement
105:                 0 < 1 < 2
106:                 0 > 1 > 2
107:                 0=1=2
108:                 <CURSOR>

*** End of source buffer ***
Saying: ['between parens', '1\\one']
Heard between parens one
105:                 0 < 1 < 2
106:                 0 > 1 > 2
107:                 0=1=2
108:                 (1<CURSOR>)

*** End of source buffer ***
Saying: ['before previous paren']
Heard before previous paren
105:                 0 < 1 < 2
106:                 0 > 1 > 2
107:                 0=1=2
108:                <CURSOR> (1)

*** End of source buffer ***
Saying: ['after paren']
Heard after paren
105:                 0 < 1 < 2
106:                 0 > 1 > 2
107:                 0=1=2
108:                 (<CURSOR>1)

*** End of source buffer ***
Saying: ['before paren']
Heard before paren
105:                 0 < 1 < 2
106:                 0 > 1 > 2
107:                 0=1=2
108:                 (1<CURSOR>)

*** End of source buffer ***
Saying: ['previous paren']
Heard previous paren
105:                 0 < 1 < 2
106:                 0 > 1 > 2
107:                 0=1=2
108:                 (<CURSOR>1)

*** End of source buffer ***
Saying: ['out of parens']
Heard out of parens
105:                 0 < 1 < 2
106:                 0 > 1 > 2
107:                 0=1=2
108:                 (1)<CURSOR>

*** End of source buffer ***
Saying: ['before previous paren']
Heard before previous paren
105:                 0 < 1 < 2
106:                 0 > 1 > 2
107:                 0=1=2
108:                 (1<CURSOR>)

*** End of source buffer ***
Saying: ['back out of parens']
Heard back out of parens
105:                 0 < 1 < 2
106:                 0 > 1 > 2
107:                 0=1=2
108:                <CURSOR> (1)

*** End of source buffer ***
Saying: ['new statement']
Heard new statement
106:                 0 > 1 > 2
107:                 0=1=2
108:                 (1)
109:                 <CURSOR>

*** End of source buffer ***
Saying: ['between brackets', '1\\one']
Heard between brackets one
106:                 0 > 1 > 2
107:                 0=1=2
108:                 (1)
109:                 [1<CURSOR>]

*** End of source buffer ***
Saying: ['before previous bracket']
Heard before previous bracket
106:                 0 > 1 > 2
107:                 0=1=2
108:                 (1)
109:                <CURSOR> [1]

*** End of source buffer ***
Saying: ['after bracket']
Heard after bracket
106:                 0 > 1 > 2
107:                 0=1=2
108:                 (1)
109:                 [<CURSOR>1]

*** End of source buffer ***
Saying: ['before bracket']
Heard before bracket
106:                 0 > 1 > 2
107:                 0=1=2
108:                 (1)
109:                 [1<CURSOR>]

*** End of source buffer ***
Saying: ['previous bracket']
Heard previous bracket
106:                 0 > 1 > 2
107:                 0=1=2
108:                 (1)
109:                 [<CURSOR>1]

*** End of source buffer ***
Saying: ['out of brackets']
Heard out of brackets
106:                 0 > 1 > 2
107:                 0=1=2
108:                 (1)
109:                 [1]<CURSOR>

*** End of source buffer ***
Saying: ['before previous bracket']
Heard before previous bracket
106:                 0 > 1 > 2
107:                 0=1=2
108:                 (1)
109:                 [1<CURSOR>]

*** End of source buffer ***
Saying: ['back out of brackets']
Heard back out of brackets
106:                 0 > 1 > 2
107:                 0=1=2
108:                 (1)
109:                <CURSOR> [1]

*** End of source buffer ***
Saying: ['new statement']
Heard new statement
107:                 0=1=2
108:                 (1)
109:                 [1]
110:                 <CURSOR>

*** End of source buffer ***
Saying: ['between braces', '1\\one']
Heard between braces one
107:                 0=1=2
108:                 (1)
109:                 [1]
110:                 {1<CURSOR>}

*** End of source buffer ***
Saying: ['before previous brace']
Heard before previous brace
107:                 0=1=2
108:                 (1)
109:                 [1]
110:                <CURSOR> {1}

*** End of source buffer ***
Saying: ['after brace']
Heard after brace
107:                 0=1=2
108:                 (1)
109:                 [1]
110:                 {<CURSOR>1}

*** End of source buffer ***
Saying: ['before brace']
Heard before brace
107:                 0=1=2
108:                 (1)
109:                 [1]
110:                 {1<CURSOR>}

*** End of source buffer ***
Saying: ['previous brace']
Heard previous brace
107:                 0=1=2
108:                 (1)
109:                 [1]
110:                 {<CURSOR>1}

*** End of source buffer ***
Saying: ['out of braces']
Heard out of braces
107:                 0=1=2
108:                 (1)
109:                 [1]
110:                 {1}<CURSOR>

*** End of source buffer ***
Saying: ['before previous brace']
Heard before previous brace
107:                 0=1=2
108:                 (1)
109:                 [1]
110:                 {1<CURSOR>}

*** End of source buffer ***
Saying: ['back out of braces']
Heard back out of braces
107:                 0=1=2
108:                 (1)
109:                 [1]
110:                <CURSOR> {1}

*** End of source buffer ***
Saying: ['new statement']
Heard new statement
108:                 (1)
109:                 [1]
110:                 {1}
111:                 <CURSOR>

*** End of source buffer ***
Saying: ['between angles', '1\\one']
Heard between angles one
108:                 (1)
109:                 [1]
110:                 {1}
111:                 <1<CURSOR>>

*** End of source buffer ***
Saying: ['before previous angle']
Heard before previous angle
108:                 (1)
109:                 [1]
110:                 {1}
111:                <CURSOR> <1>

*** End of source buffer ***
Saying: ['after angle']
Heard after angle
108:                 (1)
109:                 [1]
110:                 {1}
111:                 <<CURSOR>1>

*** End of source buffer ***
Saying: ['before angle']
Heard before angle
108:                 (1)
109:                 [1]
110:                 {1}
111:                 <1<CURSOR>>

*** End of source buffer ***
Saying: ['previous angle']
Heard previous angle
108:                 (1)
109:                 [1]
110:                 {1}
111:                 <<CURSOR>1>

*** End of source buffer ***
Saying: ['out of angles']
Heard out of angles
108:                 (1)
109:                 [1]
110:                 {1}
111:                 <1><CURSOR>

*** End of source buffer ***
Saying: ['before previous angle']
Heard before previous angle
108:                 (1)
109:                 [1]
110:                 {1}
111:                 <1<CURSOR>>

*** End of source buffer ***
Saying: ['back out of angles']
Heard back out of angles
108:                 (1)
109:                 [1]
110:                 {1}
111:                <CURSOR> <1>

*** End of source buffer ***
Saying: ['new statement']
Heard new statement
109:                 [1]
110:                 {1}
111:                 <1>
112:                 <CURSOR>

*** End of source buffer ***
Saying: ['between single-quotes', '1\\one']
Heard between single-quotes one
109:                 [1]
110:                 {1}
111:                 <1>
112:                 '1<CURSOR>'

*** End of source buffer ***
Saying: ['before previous single-quote']
Heard before previous single-quote
109:                 [1]
110:                 {1}
111:                 <1>
112:                <CURSOR> '1'

*** End of source buffer ***
Saying: ['after single-quote']
Heard after single-quote
109:                 [1]
110:                 {1}
111:                 <1>
112:                 '<CURSOR>1'

*** End of source buffer ***
Saying: ['before single-quote']
Heard before single-quote
109:                 [1]
110:                 {1}
111:                 <1>
112:                 '1<CURSOR>'

*** End of source buffer ***
Saying: ['previous single-quote']
Heard previous single-quote
109:                 [1]
110:                 {1}
111:                 <1>
112:                 '<CURSOR>1'

*** End of source buffer ***
Saying: ['out of single-quotes']
Heard out of single-quotes
109:                 [1]
110:                 {1}
111:                 <1>
112:                 '1'<CURSOR>

*** End of source buffer ***
Saying: ['before previous single-quote']
Heard before previous single-quote
109:                 [1]
110:                 {1}
111:                 <1>
112:                 '1<CURSOR>'

*** End of source buffer ***
Saying: ['back out of single-quotes']
Heard back out of single-quotes
109:                 [1]
110:                 {1}
111:                 <1>
112:                <CURSOR> '1'

*** End of source buffer ***
Saying: ['new statement']
Heard new statement
110:                 {1}
111:                 <1>
112:                 '1'
113:                 <CURSOR>

*** End of source buffer ***
Saying: ['between quotes', '1\\one']
Heard between quotes one
110:                 {1}
111:                 <1>
112:                 '1'
113:                 "1<CURSOR>"

*** End of source buffer ***
Saying: ['before previous quote']
Heard before previous quote
110:                 {1}
111:                 <1>
112:                 '1'
113:                <CURSOR> "1"

*** End of source buffer ***
Saying: ['after quote']
Heard after quote
110:                 {1}
111:                 <1>
112:                 '1'
113:                 "<CURSOR>1"

*** End of source buffer ***
Saying: ['before quote']
Heard before quote
110:                 {1}
111:                 <1>
112:                 '1'
113:                 "1<CURSOR>"

*** End of source buffer ***
Saying: ['previous quote']
Heard previous quote
110:                 {1}
111:                 <1>
112:                 '1'
113:                 "<CURSOR>1"

*** End of source buffer ***
Saying: ['out of quotes']
Heard out of quotes
110:                 {1}
111:                 <1>
112:                 '1'
113:                 "1"<CURSOR>

*** End of source buffer ***
Saying: ['before previous quote']
Heard before previous quote
110:                 {1}
111:                 <1>
112:                 '1'
113:                 "1<CURSOR>"

*** End of source buffer ***
Saying: ['back out of quotes']
Heard back out of quotes
110:                 {1}
111:                 <1>
112:                 '1'
113:                <CURSOR> "1"

*** End of source buffer ***
Saying: ['new statement']
Heard new statement
111:                 <1>
112:                 '1'
113:                 "1"
114:                 <CURSOR>

*** End of source buffer ***
Saying: ['between backquotes', '1\\one']
Heard between backquotes one
111:                 <1>
112:                 '1'
113:                 "1"
114:                 `1<CURSOR>`

*** End of source buffer ***
Saying: ['before previous backquote']
Heard before previous backquote
111:                 <1>
112:                 '1'
113:                 "1"
114:                <CURSOR> `1`

*** End of source buffer ***
Saying: ['after backquote']
Heard after backquote
111:                 <1>
112:                 '1'
113:                 "1"
114:                 `<CURSOR>1`

*** End of source buffer ***
Saying: ['before backquote']
Heard before backquote
111:                 <1>
112:                 '1'
113:                 "1"
114:                 `1<CURSOR>`

*** End of source buffer ***
Saying: ['previous backquote']
Heard previous backquote
111:                 <1>
112:                 '1'
113:                 "1"
114:                 `<CURSOR>1`

*** End of source buffer ***
Saying: ['out of backquotes']
Heard out of backquotes
111:                 <1>
112:                 '1'
113:                 "1"
114:                 `1`<CURSOR>

*** End of source buffer ***
Saying: ['before previous backquote']
Heard before previous backquote
111:                 <1>
112:                 '1'
113:                 "1"
114:                 `1<CURSOR>`

*** End of source buffer ***
Saying: ['back out of backquotes']
Heard back out of backquotes
111:                 <1>
112:                 '1'
113:                 "1"
114:                <CURSOR> `1`

*** End of source buffer ***
Saying: ['new statement']
Heard new statement
112:                 '1'
113:                 "1"
114:                 `1`
115:                 <CURSOR>

*** End of source buffer ***


*******************************************************************************
* Name        : py_misc_statements
* Description : testing miscelleneous python statements.
*******************************************************************************

WARNING: source file 'blah.py' doesn't exist.
*** Start of source buffer ***
  1: <CURSOR>

*** End of source buffer ***
Heard define class some variable class body
*** Start of source buffer ***
  1: class SomeVariable:
  2:     <CURSOR>

*** End of source buffer ***
Heard define method some method add arguments
*** Start of source buffer ***
  1: class SomeVariable:
  2:     def some_method(self, <CURSOR>):
  3:         

*** End of source buffer ***
Heard collect arguments positional arguments comma
*** Start of source buffer ***
  1: class SomeVariable:
  2:     def some_method(self, *positional_arguments, <CURSOR>):
  3:         

*** End of source buffer ***
Heard collect keyword arguments keyword arguments
*** Start of source buffer ***
  1: class SomeVariable:
  2:     def some_method(self, *positional_arguments, **keyword_arguments<CURSOR>):
  3:         

*** End of source buffer ***
Heard class body
*** Start of source buffer ***
  1: class SomeVariable:
  2:     def some_method(self, *positional_arguments, **keyword_arguments):
  3:         <CURSOR>

*** End of source buffer ***
Heard some array equals some other array sliced at one colon five new statement
*** Start of source buffer ***
  1: class SomeVariable:
  2:     def some_method(self, *positional_arguments, **keyword_arguments):
  3:         some_array = some_other_array[1: 5]
  4:         <CURSOR>

*** End of source buffer ***
Heard some dictionary item with key zero jump out equals one
*** Start of source buffer ***
  1: class SomeVariable:
  2:     def some_method(self, *positional_arguments, **keyword_arguments):
  3:         some_array = some_other_array[1: 5]
  4:         some_dictionary[0] = 1<CURSOR>

*** End of source buffer ***
Heard comment above
*** Start of source buffer ***
  1: class SomeVariable:
  2:     def some_method(self, *positional_arguments, **keyword_arguments):
  3:         some_array = some_other_array[1: 5]
  4:         # <CURSOR>
  5:         some_dictionary[0] = 1

*** End of source buffer ***
Heard this is a commented out
*** Start of source buffer ***
  1: class SomeVariable:
  2:     def some_method(self, *positional_arguments, **keyword_arguments):
  3:         some_array = some_other_array[1: 5]
  4:         # this_is_a_commented_out<CURSOR>
  5:         some_dictionary[0] = 1

*** End of source buffer ***


*******************************************************************************
* Name        : python
* Description : testing the various CSCs and LSAs for dictating Python from scratch
*******************************************************************************

>>> Dictating Python when all symbols are known <<<

Compiling symbols for file '%VCODE_HOME%\Data\TestData\native_python.py'
>>> Known symbols are: 
AppState: ['app state']
CSC_consumes: ['C. S. C. consumes', 'CSC consumes']
CSCmd: ['C. S. cmd', 'C. S. command', 'CS cmd', 'CS command']
CSCs: ['C. S. C. S.', 'C. S. CS', 'CS C. S.', 'CS CS']
CmdInterp: ['cmd interp', 'cmd interpreter', 'command interp', 'command interpreter']
ContC: ['cont C.', 'content C.', 'context C.']
ContPy: ['cont P. Y.', 'cont pie', 'cont py', 'cont python', 'content P. Y.', 'content pie', 'content py', 'content python', 'context P. Y.', 'context pie', 'context py', 'context python']
EdSim: ['ed sim']
LSA_consumes: ['L. S. A. consumes', 'lsa consumes']
None: ['none']
Object: ['object']
SymDict: ['sym dict', 'sym dictionary', 'symbol dict', 'symbol dictionary']
THIS_SYMBOL_WAS_PARSED_FROM_test_py_std_sym: ['this symbol was parsed from test P. Y. standard sym', 'this symbol was parsed from test P. Y. standard symbol', 'this symbol was parsed from test P. Y. std sym', 'this symbol was parsed from test P. Y. std symbol', 'this symbol was parsed from test pie standard sym', 'this symbol was parsed from test pie standard symbol', 'this symbol was parsed from test pie std sym', 'this symbol was parsed from test pie std symbol', 'this symbol was parsed from test py standard sym', 'this symbol was parsed from test py standard symbol', 'this symbol was parsed from test py std sym', 'this symbol was parsed from test py std symbol', 'this symbol was parsed from test python standard sym', 'this symbol was parsed from test python standard symbol', 'this symbol was parsed from test python std sym', 'this symbol was parsed from test python std symbol']
__abs__: ['abs', 'underscore abs', 'underscore absolute', 'underscore absolute value']
__init__: ['init', 'initial', 'initialize']
_untranslated_text_end: ['untranslated text end']
_untranslated_text_start: ['untranslated text start']
aCSC: ['A. C. S. C.', 'A. CSC', 'a C. S. C.', 'a CSC']
a_match: ['A. match', 'a match']
a_spoken_form: ['A. spoken form', 'a spoken form']
a_word: ['A. word', 'a word']
abs: ['abs', 'absolute', 'absolute value']
abspath: ['abs path', 'absolute path', 'abspath']
accept: ['accept']
accept2dyear: ['accept 2 dyear', 'accept two D. year']
accept_symbol_match: ['accept symbol match']
access: ['access']
acmd: ['acmd']
acos: ['A. cos', 'acos', 'arc cos', 'arc cosine']
acosh: ['A. cos H.', 'acosh', 'arc cos H.', 'arc cosine H.', 'hyperbolic arc cosine']
acquire: ['acquire']
actions_C_Cpp: ['actions C. C. plus plus', 'actions C. cpp']
actions_py: ['actions P. Y.', 'actions pie', 'actions py', 'actions python']
active_language: ['active language']
active_language_LSAs: ['active language L. S. as', 'active language LS as']
addWord: ['add word']
add_voc_entry: ['add V. O. C. entry', 'add voc entry']
all_language_LSAs: ['all language L. S. as', 'all language LS as']
and: ['and']
answer: ['answer']
answer_match: ['answer match']
attrs: ['attributes']
auto_test: ['auto test']
aword: ['aword']
break: ['break']
choice_index: ['choice index']
choices: ['choices']
choose_best_symbol: ['choose best symbol']
chop_CSC: ['chop C. S. C.', 'chop CSC']
chop_LSA: ['chop L. S. A.', 'chop lsa']
chop_symbol: ['chop symbol']
chop_word: ['chop word']
chopped_CSC: ['chopped C. S. C.', 'chopped CSC']
chopped_LSA: ['chopped L. S. A.', 'chopped lsa']
chopped_symbol: ['chopped symbol']
chopped_word: ['chopped word']
chosen_match: ['chosen match']
class: ['class']
clean_for: ['clean for']
clean_written: ['clean written']
clean_written_form: ['clean written form']
cmd: ['cmd', 'command']
cmd_index: ['cmd index', 'command index']
cmd_without_CSC: ['cmd without C. S. C.', 'cmd without CSC', 'command without C. S. C.', 'command without CSC']
cmd_without_LSA: ['cmd without L. S. A.', 'cmd without lsa', 'command without L. S. A.', 'command without lsa']
cmd_without_symbol: ['cmd without symbol', 'command without symbol']
cmd_without_word: ['cmd without word', 'command without word']
cmds_this_spoken_form: ['commands this spoken form']
command: ['command']
consumed: ['consumed']
cont_gen: ['cont gen', 'cont general', 'cont generic', 'content gen', 'content general', 'content generic', 'context gen', 'context general', 'context generic']
content: ['content']
csc_applied: ['C. S. C. applied', 'CSC applied']
cur_pos: ['cur pos', 'cur position', 'cur positioning', 'current pos', 'current position', 'current positioning', 'cursor pos', 'cursor position', 'cursor positioning']
curr_buffer: ['curr buffer', 'current buffer']
decl_attrs: ['decl attributes', 'declaration attributes', 'declare attributes']
deep_construct: ['deep construct']
def: ['deaf', 'def', 'default', 'define', 'defined', 'definition']
deleteWord: ['delete word']
dlg_select_symbol_match: ['D. L. G. select symbol match', 'dlg select symbol match']
dummy: ['dummy']
else: ['else']
end: ['end']
environ: ['environ', 'environment']
first: ['first']
for: ['for']
from: ['from']
global: ['global']
good_answer: ['good answer']
group: ['group']
has_key: ['has key']
head_was_translated: ['head was translated']
if: ['if']
ii: ['I. I.', 'ii']
import: ['import']
in: ['in']
index_csc: ['index C. S. C.', 'index CSC']
insert_indent: ['insert indent']
insert_untranslated_text: ['insert untranslated text']
int: ['int', 'integer']
interpret: ['interpret']
interpret_NL_cmd: ['interpret N. L. cmd', 'interpret N. L. command', 'interpret NL cmd', 'interpret NL command']
is_new: ['is new']
join: ['join']
known_symbols: ['known symbols']
language: ['language']
language_specific_aliases: ['language specific aliases']
last_language: ['last language']
last_loaded_language: ['last loaded language']
leading_spaces: ['leading spaces']
leading_word: ['leading word']
len: ['len', 'length']
load_language_specific_aliases: ['load language specific aliases']
lower: ['lower']
massage_command: ['massage command']
match: ['match']
match_pseudo_symbol: ['match pseudo symbol']
match_untranslated_text: ['match untranslated text']
max: ['max']
mod_command: ['mod command', 'mode command', 'modified command', 'modify command']
most_consumed: ['most consumed']
move_to: ['move to']
native_symbol: ['native symbol']
natlink: ['natlink']
new_pos: ['new pos', 'new position', 'new positioning']
not: ['not']
num_match: ['num match', 'number match']
old_pos: ['old pos', 'old position', 'old positioning']
on_app: ['on app']
or: ['or']
os: ['O. S.', 'operating system', 'os']
print: ['print']
print_buff_content: ['print buff content', 'print buffer content']
re: ['re-']
readline: ['readline']
reg: ['reg', 'regular', 'regular expression']
regexp: ['regexp', 'regular expression']
regexp_is_dirty: ['regexp is dirty', 'regular expression is dirty']
regexp_this_word: ['regexp this word', 'regular expression this word']
rest: ['rest']
return: ['return']
s: ['S.']
self: ['self']
split: ['split']
spoken: ['spoken']
spoken_as: ['spoken as']
spoken_form: ['spoken form']
spoken_form_info: ['spoken form info', 'spoken form information']
spoken_form_regexp: ['spoken form regexp', 'spoken form regular expression']
spoken_forms: ['spoken forms']
spoken_written_form: ['spoken written form']
sr_interface: ['S. R. interface', 'SR interface']
start: ['start']
stdin: ['S. T. D. in', 'standard in', 'standard input', 'stdin']
stdout: ['stdout']
string: ['string']
sub: ['sub', 'sub routine']
symbol_consumes: ['symbol consumes']
symbol_info: ['symbol info', 'symbol information']
symbol_matches: ['symbol matches']
symbols: ['symbols']
symdict_pickle_file: ['symdict pickle file']
sys: ['sys', 'system']
text: ['text']
text_no_spaces: ['text no spaces', 'text number spaces']
untranslated_text: ['untranslated text']
upper: ['upper']
upto: ['upto']
vc_globals: ['V. C. globals', 'VC globals']
vocabulary_entry: ['vocabulary entry']
while: ['while']
word_consumes: ['word consumes']
words: ['words']
write: ['write']
written: ['written']
written_as: ['written as']
_cached_symbols_as_one_string[a] is:
    access  abs  acosh  acos  abspath  acquire  accept2dyear  accept  __abs__  auto_test  actions_C_Cpp  actions_py  AppState  attrs  aword  aCSC  and  a_word  a_match  answer  answer_match  accept_symbol_match  a_spoken_form  active_language_LSAs  active_language  all_language_LSAs  acmd  add_voc_entry  addWord 
_cached_symbols_as_one_string[b] is:
    break 
_cached_symbols_as_one_string[c] is:
    cont_gen  ContC  ContPy  CSCmd  class  CmdInterp  cmd  curr_buffer  cur_pos  chopped_CSC  CSC_consumes  cmd_without_CSC  chop_CSC  chopped_LSA  cmd_without_LSA  chop_LSA  chopped_symbol  cmd_without_symbol  chop_symbol  chopped_word  cmd_without_word  chop_word  CSCs  cmd_index  csc_applied  content  command  clean_written_form  clean_for  clean_written  choice_index  chosen_match  consumed  choose_best_symbol  choices  cmds_this_spoken_form 
_cached_symbols_as_one_string[d] is:
    def  decl_attrs  deep_construct  dlg_select_symbol_match  dummy  deleteWord 
_cached_symbols_as_one_string[e] is:
    EdSim  else  end  environ 
_cached_symbols_as_one_string[f] is:
    from  for  first 
_cached_symbols_as_one_string[g] is:
    group  good_answer  global 
_cached_symbols_as_one_string[h] is:
    head_was_translated  has_key 
_cached_symbols_as_one_string[i] is:
    import  __init__  in  if  interpret_NL_cmd  interpret  insert_indent  insert_untranslated_text  ii  is_new  int  index_csc 
_cached_symbols_as_one_string[j] is:
    join 
_cached_symbols_as_one_string[k] is:
    known_symbols 
_cached_symbols_as_one_string[l] is:
    lower  len  LSA_consumes  leading_spaces  leading_word  language_specific_aliases  load_language_specific_aliases  language  last_language  last_loaded_language 
_cached_symbols_as_one_string[m] is:
    massage_command  most_consumed  max  match_untranslated_text  mod_command  match  match_pseudo_symbol  move_to 
_cached_symbols_as_one_string[n] is:
    natlink  None  not  num_match  native_symbol  new_pos 
_cached_symbols_as_one_string[o] is:
    os  Object  on_app  or  old_pos 
_cached_symbols_as_one_string[p] is:
    print  print_buff_content 
_cached_symbols_as_one_string[r] is:
    re  regexp  rest  regexp_this_word  return  reg  readline  regexp_is_dirty 
_cached_symbols_as_one_string[s] is:
    string  sys  SymDict  sr_interface  self  symdict_pickle_file  spoken_form_regexp  spoken_form  split  symbol_consumes  s  spoken  spoken_written_form  sub  symbol_info  symbol_matches  stdout  stdin  start  spoken_form_info  symbols  spoken_forms  spoken_as 
_cached_symbols_as_one_string[t] is:
    THIS_SYMBOL_WAS_PARSED_FROM_test_py_std_sym  text  text_no_spaces 
_cached_symbols_as_one_string[u] is:
    upper  _untranslated_text_start  _untranslated_text_end  untranslated_text  upto 
_cached_symbols_as_one_string[v] is:
    vc_globals  vocabulary_entry 
_cached_symbols_as_one_string[w] is:
    words  while  word_consumes  written  write  written_as 
AppState: ['app state']
CSC_consumes: ['C. S. C. consumes', 'CSC consumes']
CSCmd: ['C. S. cmd', 'C. S. command', 'CS cmd', 'CS command']
CSCs: ['C. S. C. S.', 'C. S. CS', 'CS C. S.', 'CS CS']
CmdInterp: ['cmd interp', 'cmd interpreter', 'command interp', 'command interpreter']
ContC: ['cont C.', 'content C.', 'context C.']
ContPy: ['cont P. Y.', 'cont pie', 'cont py', 'cont python', 'content P. Y.', 'content pie', 'content py', 'content python', 'context P. Y.', 'context pie', 'context py', 'context python']
EdSim: ['ed sim']
LSA_consumes: ['L. S. A. consumes', 'lsa consumes']
None: ['none']
Object: ['object']
SymDict: ['sym dict', 'sym dictionary', 'symbol dict', 'symbol dictionary']
THIS_SYMBOL_WAS_PARSED_FROM_test_py_std_sym: ['this symbol was parsed from test P. Y. standard sym', 'this symbol was parsed from test P. Y. standard symbol', 'this symbol was parsed from test P. Y. std sym', 'this symbol was parsed from test P. Y. std symbol', 'this symbol was parsed from test pie standard sym', 'this symbol was parsed from test pie standard symbol', 'this symbol was parsed from test pie std sym', 'this symbol was parsed from test pie std symbol', 'this symbol was parsed from test py standard sym', 'this symbol was parsed from test py standard symbol', 'this symbol was parsed from test py std sym', 'this symbol was parsed from test py std symbol', 'this symbol was parsed from test python standard sym', 'this symbol was parsed from test python standard symbol', 'this symbol was parsed from test python std sym', 'this symbol was parsed from test python std symbol']
__abs__: ['abs', 'underscore abs', 'underscore absolute', 'underscore absolute value']
__init__: ['init', 'initial', 'initialize']
_untranslated_text_end: ['untranslated text end']
_untranslated_text_start: ['untranslated text start']
aCSC: ['A. C. S. C.', 'A. CSC', 'a C. S. C.', 'a CSC']
a_match: ['A. match', 'a match']
a_spoken_form: ['A. spoken form', 'a spoken form']
a_word: ['A. word', 'a word']
abs: ['abs', 'absolute', 'absolute value']
abspath: ['abs path', 'absolute path', 'abspath']
accept: ['accept']
accept2dyear: ['accept 2 dyear', 'accept two D. year']
accept_symbol_match: ['accept symbol match']
access: ['access']
acmd: ['acmd']
acos: ['A. cos', 'acos', 'arc cos', 'arc cosine']
acosh: ['A. cos H.', 'acosh', 'arc cos H.', 'arc cosine H.', 'hyperbolic arc cosine']
acquire: ['acquire']
actions_C_Cpp: ['actions C. C. plus plus', 'actions C. cpp']
actions_py: ['actions P. Y.', 'actions pie', 'actions py', 'actions python']
active_language: ['active language']
active_language_LSAs: ['active language L. S. as', 'active language LS as']
addWord: ['add word']
add_voc_entry: ['add V. O. C. entry', 'add voc entry']
all_language_LSAs: ['all language L. S. as', 'all language LS as']
and: ['and']
answer: ['answer']
answer_match: ['answer match']
attrs: ['attributes']
auto_test: ['auto test']
aword: ['aword']
break: ['break']
choice_index: ['choice index']
choices: ['choices']
choose_best_symbol: ['choose best symbol']
chop_CSC: ['chop C. S. C.', 'chop CSC']
chop_LSA: ['chop L. S. A.', 'chop lsa']
chop_symbol: ['chop symbol']
chop_word: ['chop word']
chopped_CSC: ['chopped C. S. C.', 'chopped CSC']
chopped_LSA: ['chopped L. S. A.', 'chopped lsa']
chopped_symbol: ['chopped symbol']
chopped_word: ['chopped word']
chosen_match: ['chosen match']
class: ['class']
clean_for: ['clean for']
clean_written: ['clean written']
clean_written_form: ['clean written form']
cmd: ['cmd', 'command']
cmd_index: ['cmd index', 'command index']
cmd_without_CSC: ['cmd without C. S. C.', 'cmd without CSC', 'command without C. S. C.', 'command without CSC']
cmd_without_LSA: ['cmd without L. S. A.', 'cmd without lsa', 'command without L. S. A.', 'command without lsa']
cmd_without_symbol: ['cmd without symbol', 'command without symbol']
cmd_without_word: ['cmd without word', 'command without word']
cmds_this_spoken_form: ['commands this spoken form']
command: ['command']
consumed: ['consumed']
cont_gen: ['cont gen', 'cont general', 'cont generic', 'content gen', 'content general', 'content generic', 'context gen', 'context general', 'context generic']
content: ['content']
csc_applied: ['C. S. C. applied', 'CSC applied']
cur_pos: ['cur pos', 'cur position', 'cur positioning', 'current pos', 'current position', 'current positioning', 'cursor pos', 'cursor position', 'cursor positioning']
curr_buffer: ['curr buffer', 'current buffer']
decl_attrs: ['decl attributes', 'declaration attributes', 'declare attributes']
deep_construct: ['deep construct']
def: ['deaf', 'def', 'default', 'define', 'defined', 'definition']
deleteWord: ['delete word']
dlg_select_symbol_match: ['D. L. G. select symbol match', 'dlg select symbol match']
dummy: ['dummy']
else: ['else']
end: ['end']
environ: ['environ', 'environment']
first: ['first']
for: ['for']
from: ['from']
global: ['global']
good_answer: ['good answer']
group: ['group']
has_key: ['has key']
head_was_translated: ['head was translated']
if: ['if']
ii: ['I. I.', 'ii']
import: ['import']
in: ['in']
index_csc: ['index C. S. C.', 'index CSC']
insert_indent: ['insert indent']
insert_untranslated_text: ['insert untranslated text']
int: ['int', 'integer']
interpret: ['interpret']
interpret_NL_cmd: ['interpret N. L. cmd', 'interpret N. L. command', 'interpret NL cmd', 'interpret NL command']
is_new: ['is new']
join: ['join']
known_symbols: ['known symbols']
language: ['language']
language_specific_aliases: ['language specific aliases']
last_language: ['last language']
last_loaded_language: ['last loaded language']
leading_spaces: ['leading spaces']
leading_word: ['leading word']
len: ['len', 'length']
load_language_specific_aliases: ['load language specific aliases']
lower: ['lower']
massage_command: ['massage command']
match: ['match']
match_pseudo_symbol: ['match pseudo symbol']
match_untranslated_text: ['match untranslated text']
max: ['max']
mod_command: ['mod command', 'mode command', 'modified command', 'modify command']
most_consumed: ['most consumed']
move_to: ['move to']
native_symbol: ['native symbol']
natlink: ['natlink']
new_pos: ['new pos', 'new position', 'new positioning']
not: ['not']
num_match: ['num match', 'number match']
old_pos: ['old pos', 'old position', 'old positioning']
on_app: ['on app']
or: ['or']
os: ['O. S.', 'operating system', 'os']
print: ['print']
print_buff_content: ['print buff content', 'print buffer content']
re: ['re-']
readline: ['readline']
reg: ['reg', 'regular', 'regular expression']
regexp: ['regexp', 'regular expression']
regexp_is_dirty: ['regexp is dirty', 'regular expression is dirty']
regexp_this_word: ['regexp this word', 'regular expression this word']
rest: ['rest']
return: ['return']
s: ['S.']
self: ['self']
split: ['split']
spoken: ['spoken']
spoken_as: ['spoken as']
spoken_form: ['spoken form']
spoken_form_info: ['spoken form info', 'spoken form information']
spoken_form_regexp: ['spoken form regexp', 'spoken form regular expression']
spoken_forms: ['spoken forms']
spoken_written_form: ['spoken written form']
sr_interface: ['S. R. interface', 'SR interface']
start: ['start']
stdin: ['S. T. D. in', 'standard in', 'standard input', 'stdin']
stdout: ['stdout']
string: ['string']
sub: ['sub', 'sub routine']
symbol_consumes: ['symbol consumes']
symbol_info: ['symbol info', 'symbol information']
symbol_matches: ['symbol matches']
symbols: ['symbols']
symdict_pickle_file: ['symdict pickle file']
sys: ['sys', 'system']
text: ['text']
text_no_spaces: ['text no spaces', 'text number spaces']
untranslated_text: ['untranslated text']
upper: ['upper']
upto: ['upto']
vc_globals: ['V. C. globals', 'VC globals']
vocabulary_entry: ['vocabulary entry']
while: ['while']
word_consumes: ['word consumes']
words: ['words']
write: ['write']
written: ['written']
written_as: ['written as']
_cached_symbols_as_one_string[a] is:
    access  abs  acosh  acos  abspath  acquire  accept2dyear  accept  __abs__  auto_test  actions_C_Cpp  actions_py  AppState  attrs  aword  aCSC  and  a_word  a_match  answer  answer_match  accept_symbol_match  a_spoken_form  active_language_LSAs  active_language  all_language_LSAs  acmd  add_voc_entry  addWord 
_cached_symbols_as_one_string[b] is:
    break 
_cached_symbols_as_one_string[c] is:
    cont_gen  ContC  ContPy  CSCmd  class  CmdInterp  cmd  curr_buffer  cur_pos  chopped_CSC  CSC_consumes  cmd_without_CSC  chop_CSC  chopped_LSA  cmd_without_LSA  chop_LSA  chopped_symbol  cmd_without_symbol  chop_symbol  chopped_word  cmd_without_word  chop_word  CSCs  cmd_index  csc_applied  content  command  clean_written_form  clean_for  clean_written  choice_index  chosen_match  consumed  choose_best_symbol  choices  cmds_this_spoken_form 
_cached_symbols_as_one_string[d] is:
    def  decl_attrs  deep_construct  dlg_select_symbol_match  dummy  deleteWord 
_cached_symbols_as_one_string[e] is:
    EdSim  else  end  environ 
_cached_symbols_as_one_string[f] is:
    from  for  first 
_cached_symbols_as_one_string[g] is:
    group  good_answer  global 
_cached_symbols_as_one_string[h] is:
    head_was_translated  has_key 
_cached_symbols_as_one_string[i] is:
    import  __init__  in  if  interpret_NL_cmd  interpret  insert_indent  insert_untranslated_text  ii  is_new  int  index_csc 
_cached_symbols_as_one_string[j] is:
    join 
_cached_symbols_as_one_string[k] is:
    known_symbols 
_cached_symbols_as_one_string[l] is:
    lower  len  LSA_consumes  leading_spaces  leading_word  language_specific_aliases  load_language_specific_aliases  language  last_language  last_loaded_language 
_cached_symbols_as_one_string[m] is:
    massage_command  most_consumed  max  match_untranslated_text  mod_command  match  match_pseudo_symbol  move_to 
_cached_symbols_as_one_string[n] is:
    natlink  None  not  num_match  native_symbol  new_pos 
_cached_symbols_as_one_string[o] is:
    os  Object  on_app  or  old_pos 
_cached_symbols_as_one_string[p] is:
    print  print_buff_content 
_cached_symbols_as_one_string[r] is:
    re  regexp  rest  regexp_this_word  return  reg  readline  regexp_is_dirty 
_cached_symbols_as_one_string[s] is:
    string  sys  SymDict  sr_interface  self  symdict_pickle_file  spoken_form_regexp  spoken_form  split  symbol_consumes  s  spoken  spoken_written_form  sub  symbol_info  symbol_matches  stdout  stdin  start  spoken_form_info  symbols  spoken_forms  spoken_as 
_cached_symbols_as_one_string[t] is:
    THIS_SYMBOL_WAS_PARSED_FROM_test_py_std_sym  text  text_no_spaces 
_cached_symbols_as_one_string[u] is:
    upper  _untranslated_text_start  _untranslated_text_end  untranslated_text  upto 
_cached_symbols_as_one_string[v] is:
    vc_globals  vocabulary_entry 
_cached_symbols_as_one_string[w] is:
    words  while  word_consumes  written  write  written_as 
WARNING: source file 'blah.py' doesn't exist.
*** Start of source buffer ***
  1: <CURSOR>

*** End of source buffer ***
Saying: ['import\\import modules', 'O.', 'S.', ',\\comma', 'R.', 'E.', ',\\comma', 'string', ',\\comma', 'system', 'new', 'statement']
Heard import modules O. S. comma R. E. comma string comma system new statement
*** Start of source buffer ***
  1: import os, re, string, sys
  2: <CURSOR>

*** End of source buffer ***
Saying: ['import\\import modules', 'auto', 'test', ',\\comma', 'natural', 'link', ',\\comma', 'V.', 'C.', 'globals', 'new', 'statement']
Heard import modules auto test comma natural link comma V. C. globals new statement
*** Start of source buffer ***
  1: import os, re, string, sys
  2: import auto_test, natlink, vc_globals
  3: <CURSOR>

*** End of source buffer ***
Saying: ['from', 'module', 'actions', 'C.', 'C.', 'P.', 'P.', 'import all', 'new', 'statement']
Heard from module actions C. C. P. P. import all new statement
*** Start of source buffer ***
  1: import os, re, string, sys
  2: import auto_test, natlink, vc_globals
  3: from actions_C_Cpp import all
  4: <CURSOR>

*** End of source buffer ***
Saying: ['from', 'module', 'application', 'state', 'import', 'symbols', 'application', 'state', 'new', 'statement']
Heard from module application state import symbols application state new statement
  2: import auto_test, natlink, vc_globals
  3: from actions_C_Cpp import all
  4: from AppState import AppState
  5: <CURSOR>

*** End of source buffer ***
Saying: ['from', 'module', 'context', 'generic', 'import', 'symbols', 'context', 'C.', 'comma', 'context', 'python', 'new', 'statement']
Heard from module context generic import symbols context C. comma context python new statement
  3: from actions_C_Cpp import all
  4: from AppState import AppState
  5: from cont_gen import ContC, ContPy
  6: <CURSOR>

*** End of source buffer ***
Saying: ['from', 'module', 'context', 'sensitive', 'command', 'import', 'symbols', 'context', 'sensitive', 'command', 'new', 'statement']
Heard from module context sensitive command import symbols context sensitive command new statement
  4: from AppState import AppState
  5: from cont_gen import ContC, ContPy
  6: from context_sensitive_command import context_sensitive_command
  7: <CURSOR>

*** End of source buffer ***
Saying: ['from', 'module', 'Ed', 'simulator', 'import', 'symbol', 'Ed', 'simulator', 'new', 'statement']
Heard from module Ed simulator import symbol Ed simulator new statement
  5: from cont_gen import ContC, ContPy
  6: from context_sensitive_command import context_sensitive_command
  7: from EdSim import EdSim
  8: <CURSOR>

*** End of source buffer ***
Saying: ['from', 'module', 'object', 'import', 'symbol', 'object', 'new', 'statement']
Heard from module object import symbol object new statement
  6: from context_sensitive_command import context_sensitive_command
  7: from EdSim import EdSim
  8: from Object import Object
  9: <CURSOR>

*** End of source buffer ***
Saying: ['import\\import modules', 'Ed', 'simulator', 'comma', 'symbol', 'dictionary', 'new', 'statement']
Heard import modules Ed simulator comma symbol dictionary new statement
  7: from EdSim import EdSim
  8: from Object import Object
  9: import EdSim, SymDict
 10: <CURSOR>

*** End of source buffer ***
Saying: ['import\\import module', 'S.', 'R.', 'interface', 'new', 'statement']
Heard import module S. R. interface new statement
  8: from Object import Object
  9: import EdSim, SymDict
 10: import sr_interface
 11: <CURSOR>

*** End of source buffer ***
Saying: ['define', 'class', 'command', 'interpreter', 'sub class\\sub class', 'of', 'object', 'class', 'body']
Heard define class command interpreter sub class of object class body
  9: import EdSim, SymDict
 10: import sr_interface
 11: class CmdInterp(Object):
 12:     <CURSOR>

*** End of source buffer ***
Saying: ['define', 'method', 'initialize', 'add', 'argument', 'on', 'application', 'equals', 'none', 'comma']
Heard define method initialize add argument on application equals none comma
  9: import EdSim, SymDict
 10: import sr_interface
 11: class CmdInterp(Object):
 12:     def __init__(self, on_app = None, <CURSOR>):
 13:         

*** End of source buffer ***
Saying: ['symbol', 'dictionary', 'pickle', 'file', 'equals', 'none', 'comma', 'double', 'asterisk', 'attributes', 'method', 'body']
Heard symbol dictionary pickle file equals none comma double asterisk attributes method body
 10: import sr_interface
 11: class CmdInterp(Object):
 12:     def __init__(self, on_app = None, symdict_pickle_file = None, **attrs):
 13:         <CURSOR>

*** End of source buffer ***
Saying: ['self', 'dot', 'declare', 'attributes', 'with', 'arguments', 'brace', 'pair']
Heard self dot declare attributes with arguments brace pair
 10: import sr_interface
 11: class CmdInterp(Object):
 12:     def __init__(self, on_app = None, symdict_pickle_file = None, **attrs):
 13:         self.decl_attrs({<CURSOR>})

*** End of source buffer ***
Saying: ['single', 'quotes', 'un', 'translated', 'text', 'start', 'jump', 'out', ':\\colon', 'none', 'comma']
Heard single quotes un translated text start jump out colon none comma
 10: import sr_interface
 11: class CmdInterp(Object):
 12:     def __init__(self, on_app = None, symdict_pickle_file = None, **attrs):
 13:         self.decl_attrs({'_untranslated_text_start': None, <CURSOR>})

*** End of source buffer ***
Saying: ['single', 'quotes', 'un', 'translated', 'text', 'end', 'jump', 'out', ':\\colon', 'none', 'new', 'statement']
Heard single quotes un translated text end jump out colon none new statement
 11: class CmdInterp(Object):
 12:     def __init__(self, on_app = None, symdict_pickle_file = None, **attrs):
 13:         self.decl_attrs({'_untranslated_text_start': None, '_untranslated_text_end': None})
 14:         <CURSOR>

*** End of source buffer ***
Saying: ['self', 'dot', 'deep', 'construct', 'with', 'arguments', 'command', 'interpreter', 'comma', 'continue', 'statement']
Heard self dot deep construct with arguments command interpreter comma continue statement
 12:     def __init__(self, on_app = None, symdict_pickle_file = None, **attrs):
 13:         self.decl_attrs({'_untranslated_text_start': None, '_untranslated_text_end': None})
 14:         self.deep_construct(CmdInterp, \
 15:                             <CURSOR>)

*** End of source buffer ***
Saying: ['brace', 'pair', 'single', 'quotes', 'on', 'application', 'jump', 'out', ':\\colon', 'on', 'application', 'comma']
Heard brace pair single quotes on application jump out colon on application comma
 12:     def __init__(self, on_app = None, symdict_pickle_file = None, **attrs):
 13:         self.decl_attrs({'_untranslated_text_start': None, '_untranslated_text_end': None})
 14:         self.deep_construct(CmdInterp, \
 15:                             {'on_app': on_app, <CURSOR>})

*** End of source buffer ***
Saying: ['single', 'quotes', 'known', 'symbols', 'jump', 'out', ':\\colon', 'symbol', 'dictionary', 'dot', 'symbol', 'dictionary', 'without', 'arguments', 'comma', 'continue', 'statement']
Heard single quotes known symbols jump out colon symbol dictionary dot symbol dictionary without arguments comma continue statement
 13:         self.decl_attrs({'_untranslated_text_start': None, '_untranslated_text_end': None})
 14:         self.deep_construct(CmdInterp, \
 15:                             {'on_app': on_app, 'known_symbols': SymDict.SymDict(), \
 16:                              <CURSOR>})

*** End of source buffer ***
Saying: ['single', 'quotes', 'language', 'specific', 'aliases', 'jump', 'out', ':\\colon', 'empty', 'dictionary', 'comma', 'continue', 'statement']
Heard single quotes language specific aliases jump out colon empty dictionary comma continue statement
 14:         self.deep_construct(CmdInterp, \
 15:                             {'on_app': on_app, 'known_symbols': SymDict.SymDict(), \
 16:                              'language_specific_aliases': {}, \
 17:                              <CURSOR>})

*** End of source buffer ***
Saying: ['single', 'quotes', 'last', 'loaded', 'language', 'jump', 'out', ':\\colon', 'none', 'comma', 'continue', 'statement']
Heard single quotes last loaded language jump out colon none comma continue statement
 15:                             {'on_app': on_app, 'known_symbols': SymDict.SymDict(), \
 16:                              'language_specific_aliases': {}, \
 17:                              'last_loaded_language': None, \
 18:                              <CURSOR>})

*** End of source buffer ***
Saying: ['single', 'quotes', 'symbol', 'dictionary', 'pickle', 'file', 'jump', 'out', ':\\colon', 'symbol', 'dictionary', 'pickle', 'file', 'jump', 'out', 'comma', 'continue', 'statement']
Heard single quotes symbol dictionary pickle file jump out colon symbol dictionary pickle file jump out comma continue statement
 16:                              'language_specific_aliases': {}, \
 17:                              'last_loaded_language': None, \
 18:                              'symdict_pickle_file': symdict_pickle_file}, \
 19:                             <CURSOR>)

*** End of source buffer ***
Saying: ['attributes', 'new', 'statement', 'new', 'statement']
Heard attributes new statement new statement
 18:                              'symdict_pickle_file': symdict_pickle_file}, \
 19:                             attrs)
 20: 
 21:         <CURSOR>

*** End of source buffer ***
Saying: ['back indent', 'define', 'method', 'spoken', 'form', 'regular', 'expression', 'add', 'argument', 'spoken', 'form']
Heard back indent define method spoken form regular expression add argument spoken form
 18:                              'symdict_pickle_file': symdict_pickle_file}, \
 19:                             attrs)
 20: 
 21:     def spoken_form_regexp(self, spoken_form<CURSOR>):
 22:         

*** End of source buffer ***
Saying: ['method', 'body']
Heard method body
 19:                             attrs)
 20: 
 21:     def spoken_form_regexp(self, spoken_form):
 22:         <CURSOR>

*** End of source buffer ***
Saying: ['words', 'equals', 'R.', 'E.', 'dot', 'split', 'with', 'arguments']
Heard words equals R. E. dot split with arguments
 19:                             attrs)
 20: 
 21:     def spoken_form_regexp(self, spoken_form):
 22:         words = re.split(<CURSOR>)

*** End of source buffer ***
Saying: ['single', 'quotes', 'back slash S.', 'plus', 'sign', 'jump', 'out', 'comma', 'spoken', 'form', 'new', 'statement']
Heard single quotes back slash S. plus sign jump out comma spoken form new statement
 20: 
 21:     def spoken_form_regexp(self, spoken_form):
 22:         words = re.split('\s+', spoken_form)
 23:         <CURSOR>

*** End of source buffer ***
Saying: ['regular', 'expression', 'equals', 'empty', 'single', 'quotes', 'new', 'statement']
Heard regular expression equals empty single quotes new statement
 21:     def spoken_form_regexp(self, spoken_form):
 22:         words = re.split('\s+', spoken_form)
 23:         regexp = ''
 24:         <CURSOR>

*** End of source buffer ***
Saying: ['for', 'loop', 'a', 'word', 'in', 'list', 'words', 'loop', 'body']
Heard for loop a word in list words loop body
 22:         words = re.split('\s+', spoken_form)
 23:         regexp = ''
 24:         for a_word in words:
 25:             <CURSOR>

*** End of source buffer ***
Saying: ['first', 'equals', 'a', 'word', 'at', 'index', '0\\zero', 'new', 'statement']
Heard first equals a word at index zero new statement
 23:         regexp = ''
 24:         for a_word in words:
 25:             first = a_word[0]
 26:             <CURSOR>

*** End of source buffer ***
Saying: ['rest', 'equals', 'a', 'word', 'at', 'index', '1\\one', ':\\colon', 'new', 'statement']
Heard rest equals a word at index one colon new statement
 24:         for a_word in words:
 25:             first = a_word[0]
 26:             rest = a_word[1: ]
 27:             <CURSOR>

*** End of source buffer ***
Saying: ['regular', 'expression', 'this', 'word', 'equals', 'single', 'quotes']
Heard regular expression this word equals single quotes
 24:         for a_word in words:
 25:             first = a_word[0]
 26:             rest = a_word[1: ]
 27:             regexp_this_word = '<CURSOR>'

*** End of source buffer ***
Saying: ['open', 'bracket', 'jump', 'out', 'plus', 'string', 'dot', 'lower', 'with', 'arguments', 'first']
Heard open bracket jump out plus string dot lower with arguments first
 24:         for a_word in words:
 25:             first = a_word[0]
 26:             rest = a_word[1: ]
 27:             regexp_this_word = '[' + string.lower(first<CURSOR>)

*** End of source buffer ***
Saying: ['jump', 'out', 'plus', 'string', 'dot', 'upper', 'with', 'arguments', 'first', 'new', 'statement']
Heard jump out plus string dot upper with arguments first new statement
 25:             first = a_word[0]
 26:             rest = a_word[1: ]
 27:             regexp_this_word = '[' + string.lower(first) + string.upper(first)
 28:             <CURSOR>

*** End of source buffer ***
Saying: ['if', 'statement', 'not', 'regular', 'expression', 'equal', 'to', 'empty', 'single', 'quotes', 'if', 'body']
Heard if statement not regular expression equal to empty single quotes if body
 26:             rest = a_word[1: ]
 27:             regexp_this_word = '[' + string.lower(first) + string.upper(first)
 28:             if not regexp == '':
 29:                 <CURSOR>

*** End of source buffer ***
Saying: ['regular', 'expression', 'equals', 'regular', 'expression', 'plus', 'single', 'quotes', 'back slash S.', 'asterisk', 'new', 'statement']
Heard regular expression equals regular expression plus single quotes back slash S. asterisk new statement
 27:             regexp_this_word = '[' + string.lower(first) + string.upper(first)
 28:             if not regexp == '':
 29:                 regexp = regexp + '\s*'
 30:                 <CURSOR>

*** End of source buffer ***
Saying: ['regular', 'expression', 'equals', 'regular', 'expression', 'plus', 'regular', 'expression', 'this', 'word', 'new', 'statement']
Heard regular expression equals regular expression plus regular expression this word new statement
 28:             if not regexp == '':
 29:                 regexp = regexp + '\s*'
 30:                 regexp = regexp + regexp_this_word
 31:                 <CURSOR>

*** End of source buffer ***
Saying: ['return', 'regular', 'expression']
Heard return regular expression
 28:             if not regexp == '':
 29:                 regexp = regexp + '\s*'
 30:                 regexp = regexp + regexp_this_word
 31:                 return regexp<CURSOR>

*** End of source buffer ***
Saying: ['back indent', 'new statement']
Heard back indent new statement
 29:                 regexp = regexp + '\s*'
 30:                 regexp = regexp + regexp_this_word
 31:             return regexp
 32:         <CURSOR>

*** End of source buffer ***
Saying: ['if', 'not', 'this', 'word', 'then', 'this', 'word', 'equals', 'single', 'quotes', 'hello']
Heard if not this word then this word equals single quotes hello
 30:                 regexp = regexp + regexp_this_word
 31:             return regexp
 32:         if not this_word:
 33:             this_word = 'hello<CURSOR>'

*** End of source buffer ***
Saying: ['else', 'if', 'this', 'word', 'is', 'equal', 'to', 'hi', 'then']
Heard else if this word is equal to hi then
 32:         if not this_word:
 33:             this_word = 'hello'
 34:         elif this_word == hi:
 35:             <CURSOR>

*** End of source buffer ***
Saying: ['this', 'word', 'equals', 'greetings', 'else']
Heard this word equals greetings else
 34:         elif this_word == hi:
 35:             this_word = greetings
 36:         else:
 37:             <CURSOR>

*** End of source buffer ***
Saying: ['this', 'word', 'equals', 'single', 'quotes', 'done', 'new', 'statement']
Heard this word equals single quotes done new statement
 35:             this_word = greetings
 36:         else:
 37:             this_word = 'done'
 38:             <CURSOR>

*** End of source buffer ***
Saying: ['try', 'some', 'function', 'with', 'arguments']
Heard try some function with arguments
 36:         else:
 37:             this_word = 'done'
 38:             try:
 39:                 some_function(<CURSOR>)

*** End of source buffer ***
Saying: ['except', 'do', 'the', 'following', 'print', 'single', 'quotes', 'error']
Heard except do the following print single quotes error
 38:             try:
 39:                 some_function()
 40:             except :
 41:                 print 'error<CURSOR>'

*** End of source buffer ***
Saying: ['finally', 'do', 'print', 'single', 'quotes', 'all', 'right']
Heard finally do print single quotes all right
 40:             except :
 41:                 print 'error'
 42:             finally:
 43:                 print 'all_right<CURSOR>'

*** End of source buffer ***

>>> Dictating Python when only standard symbols are known <<<

THIS_SYMBOL_WAS_PARSED_FROM_test_py_std_sym: ['this symbol was parsed from test P. Y. standard sym', 'this symbol was parsed from test P. Y. standard symbol', 'this symbol was parsed from test P. Y. std sym', 'this symbol was parsed from test P. Y. std symbol', 'this symbol was parsed from test pie standard sym', 'this symbol was parsed from test pie standard symbol', 'this symbol was parsed from test pie std sym', 'this symbol was parsed from test pie std symbol', 'this symbol was parsed from test py standard sym', 'this symbol was parsed from test py standard symbol', 'this symbol was parsed from test py std sym', 'this symbol was parsed from test py std symbol', 'this symbol was parsed from test python standard sym', 'this symbol was parsed from test python standard symbol', 'this symbol was parsed from test python std sym', 'this symbol was parsed from test python std symbol']
__abs__: ['abs', 'underscore abs', 'underscore absolute', 'underscore absolute value']
abs: ['abs', 'absolute', 'absolute value']
abspath: ['abs path', 'absolute path', 'abspath']
accept: ['accept']
accept2dyear: ['accept 2 dyear', 'accept two D. year']
access: ['access']
acos: ['A. cos', 'acos', 'arc cos', 'arc cosine']
acosh: ['A. cos H.', 'acosh', 'arc cos H.', 'arc cosine H.', 'hyperbolic arc cosine']
acquire: ['acquire']
_cached_symbols_as_one_string[a] is:
    access  abs  acosh  acos  abspath  acquire  accept2dyear  accept  __abs__ 
_cached_symbols_as_one_string[t] is:
    THIS_SYMBOL_WAS_PARSED_FROM_test_py_std_sym 
WARNING: source file 'blah.py' doesn't exist.
*** Start of source buffer ***
  1: <CURSOR>

*** End of source buffer ***
Saying: ['import\\import modules', 'O.', 'S.', ',\\comma', 'R.', 'E.', ',\\comma', 'string', ',\\comma', 'system', 'new', 'statement']
Heard import modules O. S. comma R. E. comma string comma system new statement
*** Start of source buffer ***
  1: import os, re, string, system
  2: <CURSOR>

*** End of source buffer ***
Saying: ['import\\import modules', 'auto', 'test', ',\\comma', 'natural', 'link', ',\\comma', 'V.', 'C.', 'globals', 'new', 'statement']
Heard import modules auto test comma natural link comma V. C. globals new statement
*** Start of source buffer ***
  1: import os, re, string, system
  2: import auto_test, natural_link, vc_globals
  3: <CURSOR>

*** End of source buffer ***
Saying: ['from', 'module', 'actions', 'C.', 'C.', 'P.', 'P.', 'import all', 'new', 'statement']
Heard from module actions C. C. P. P. import all new statement
*** Start of source buffer ***
  1: import os, re, string, system
  2: import auto_test, natural_link, vc_globals
  3: from actions_ccpp import all
  4: <CURSOR>

*** End of source buffer ***
Saying: ['from', 'module', 'application', 'state', 'import', 'symbols', 'application', 'state', 'new', 'statement']
Heard from module application state import symbols application state new statement
  2: import auto_test, natural_link, vc_globals
  3: from actions_ccpp import all
  4: from application_state import application_state
  5: <CURSOR>

*** End of source buffer ***
Saying: ['from', 'module', 'context', 'generic', 'import', 'symbols', 'context', 'C.', 'comma', 'context', 'python', 'new', 'statement']
Heard from module context generic import symbols context C. comma context python new statement
  3: from actions_ccpp import all
  4: from application_state import application_state
  5: from context_generic import context_c, context_python
  6: <CURSOR>

*** End of source buffer ***
Saying: ['from', 'module', 'context', 'sensitive', 'command', 'import', 'symbols', 'context', 'sensitive', 'command', 'new', 'statement']
Heard from module context sensitive command import symbols context sensitive command new statement
  4: from application_state import application_state
  5: from context_generic import context_c, context_python
  6: from context_sensitive_command import context_sensitive_command
  7: <CURSOR>

*** End of source buffer ***
Saying: ['from', 'module', 'Ed', 'simulator', 'import', 'symbol', 'Ed', 'simulator', 'new', 'statement']
Heard from module Ed simulator import symbol Ed simulator new statement
  5: from context_generic import context_c, context_python
  6: from context_sensitive_command import context_sensitive_command
  7: from ed_simulator import ed_simulator
  8: <CURSOR>

*** End of source buffer ***
Saying: ['from', 'module', 'object', 'import', 'symbol', 'object', 'new', 'statement']
Heard from module object import symbol object new statement
  6: from context_sensitive_command import context_sensitive_command
  7: from ed_simulator import ed_simulator
  8: from object import object
  9: <CURSOR>

*** End of source buffer ***
Saying: ['import\\import modules', 'Ed', 'simulator', 'comma', 'symbol', 'dictionary', 'new', 'statement']
Heard import modules Ed simulator comma symbol dictionary new statement
  7: from ed_simulator import ed_simulator
  8: from object import object
  9: import ed_simulator, symbol_dictionary
 10: <CURSOR>

*** End of source buffer ***
Saying: ['import\\import module', 'S.', 'R.', 'interface', 'new', 'statement']
Heard import module S. R. interface new statement
  8: from object import object
  9: import ed_simulator, symbol_dictionary
 10: import sr_interface
 11: <CURSOR>

*** End of source buffer ***
Saying: ['define', 'class', 'command', 'interpreter', 'sub class\\sub class', 'of', 'object', 'class', 'body']
Heard define class command interpreter sub class of object class body
  9: import ed_simulator, symbol_dictionary
 10: import sr_interface
 11: class CommandInterpreter(object):
 12:     <CURSOR>

*** End of source buffer ***
Saying: ['define', 'method', 'initialize', 'add', 'argument', 'on', 'application', 'equals', 'none', 'comma']
Heard define method initialize add argument on application equals none comma
  9: import ed_simulator, symbol_dictionary
 10: import sr_interface
 11: class CommandInterpreter(object):
 12:     def initialize(self, on_application = None, <CURSOR>):
 13:         

*** End of source buffer ***
Saying: ['symbol', 'dictionary', 'pickle', 'file', 'equals', 'none', 'comma', 'double', 'asterisk', 'attributes', 'method', 'body']
Heard symbol dictionary pickle file equals none comma double asterisk attributes method body
 10: import sr_interface
 11: class CommandInterpreter(object):
 12:     def initialize(self, on_application = None, symbol_dictionary_pickle_file = None, **attributes):
 13:         <CURSOR>

*** End of source buffer ***
Saying: ['self', 'dot', 'declare', 'attributes', 'with', 'arguments', 'brace', 'pair']
Heard self dot declare attributes with arguments brace pair
 10: import sr_interface
 11: class CommandInterpreter(object):
 12:     def initialize(self, on_application = None, symbol_dictionary_pickle_file = None, **attributes):
 13:         self.declare_attributes({<CURSOR>})

*** End of source buffer ***
Saying: ['single', 'quotes', 'un', 'translated', 'text', 'start', 'jump', 'out', ':\\colon', 'none', 'comma']
Heard single quotes un translated text start jump out colon none comma
 10: import sr_interface
 11: class CommandInterpreter(object):
 12:     def initialize(self, on_application = None, symbol_dictionary_pickle_file = None, **attributes):
 13:         self.declare_attributes({'un_translated_text_start': None, <CURSOR>})

*** End of source buffer ***
Saying: ['single', 'quotes', 'un', 'translated', 'text', 'end', 'jump', 'out', ':\\colon', 'none', 'new', 'statement']
Heard single quotes un translated text end jump out colon none new statement
 11: class CommandInterpreter(object):
 12:     def initialize(self, on_application = None, symbol_dictionary_pickle_file = None, **attributes):
 13:         self.declare_attributes({'un_translated_text_start': None, 'un_translated_text_end': None})
 14:         <CURSOR>

*** End of source buffer ***
Saying: ['self', 'dot', 'deep', 'construct', 'with', 'arguments', 'command', 'interpreter', 'comma', 'continue', 'statement']
Heard self dot deep construct with arguments command interpreter comma continue statement
 12:     def initialize(self, on_application = None, symbol_dictionary_pickle_file = None, **attributes):
 13:         self.declare_attributes({'un_translated_text_start': None, 'un_translated_text_end': None})
 14:         self.deep_construct(CommandInterpreter, \
 15:                             <CURSOR>)

*** End of source buffer ***
Saying: ['brace', 'pair', 'single', 'quotes', 'on', 'application', 'jump', 'out', ':\\colon', 'on', 'application', 'comma']
Heard brace pair single quotes on application jump out colon on application comma
 12:     def initialize(self, on_application = None, symbol_dictionary_pickle_file = None, **attributes):
 13:         self.declare_attributes({'un_translated_text_start': None, 'un_translated_text_end': None})
 14:         self.deep_construct(CommandInterpreter, \
 15:                             {'on_application': on_application, <CURSOR>})

*** End of source buffer ***
Saying: ['single', 'quotes', 'known', 'symbols', 'jump', 'out', ':\\colon', 'symbol', 'dictionary', 'dot', 'symbol', 'dictionary', 'without', 'arguments', 'comma', 'continue', 'statement']
Heard single quotes known symbols jump out colon symbol dictionary dot symbol dictionary without arguments comma continue statement
 13:         self.declare_attributes({'un_translated_text_start': None, 'un_translated_text_end': None})
 14:         self.deep_construct(CommandInterpreter, \
 15:                             {'on_application': on_application, 'known_symbols': symbol_dictionary.symbol_dictionary(), \
 16:                              <CURSOR>})

*** End of source buffer ***
Saying: ['single', 'quotes', 'language', 'specific', 'aliases', 'jump', 'out', ':\\colon', 'empty', 'dictionary', 'comma', 'continue', 'statement']
Heard single quotes language specific aliases jump out colon empty dictionary comma continue statement
 14:         self.deep_construct(CommandInterpreter, \
 15:                             {'on_application': on_application, 'known_symbols': symbol_dictionary.symbol_dictionary(), \
 16:                              'language_specific_aliases': {}, \
 17:                              <CURSOR>})

*** End of source buffer ***
Saying: ['single', 'quotes', 'last', 'loaded', 'language', 'jump', 'out', ':\\colon', 'none', 'comma', 'continue', 'statement']
Heard single quotes last loaded language jump out colon none comma continue statement
 15:                             {'on_application': on_application, 'known_symbols': symbol_dictionary.symbol_dictionary(), \
 16:                              'language_specific_aliases': {}, \
 17:                              'last_loaded_language': None, \
 18:                              <CURSOR>})

*** End of source buffer ***
Saying: ['single', 'quotes', 'symbol', 'dictionary', 'pickle', 'file', 'jump', 'out', ':\\colon', 'symbol', 'dictionary', 'pickle', 'file', 'jump', 'out', 'comma', 'continue', 'statement']
Heard single quotes symbol dictionary pickle file jump out colon symbol dictionary pickle file jump out comma continue statement
 16:                              'language_specific_aliases': {}, \
 17:                              'last_loaded_language': None, \
 18:                              'symbol_dictionary_pickle_file': symbol_dictionary_pickle_file}, \
 19:                             <CURSOR>)

*** End of source buffer ***
Saying: ['attributes', 'new', 'statement', 'new', 'statement']
Heard attributes new statement new statement
 18:                              'symbol_dictionary_pickle_file': symbol_dictionary_pickle_file}, \
 19:                             attributes)
 20: 
 21:         <CURSOR>

*** End of source buffer ***
Saying: ['back indent', 'define', 'method', 'spoken', 'form', 'regular', 'expression', 'add', 'argument', 'spoken', 'form']
Heard back indent define method spoken form regular expression add argument spoken form
 18:                              'symbol_dictionary_pickle_file': symbol_dictionary_pickle_file}, \
 19:                             attributes)
 20: 
 21:     def spoken_form_regular_expression(self, spoken_form<CURSOR>):
 22:         

*** End of source buffer ***
Saying: ['method', 'body']
Heard method body
 19:                             attributes)
 20: 
 21:     def spoken_form_regular_expression(self, spoken_form):
 22:         <CURSOR>

*** End of source buffer ***
Saying: ['words', 'equals', 'R.', 'E.', 'dot', 'split', 'with', 'arguments']
Heard words equals R. E. dot split with arguments
 19:                             attributes)
 20: 
 21:     def spoken_form_regular_expression(self, spoken_form):
 22:         words = re.split(<CURSOR>)

*** End of source buffer ***
Saying: ['single', 'quotes', 'back slash S.', 'plus', 'sign', 'jump', 'out', 'comma', 'spoken', 'form', 'new', 'statement']
Heard single quotes back slash S. plus sign jump out comma spoken form new statement
 20: 
 21:     def spoken_form_regular_expression(self, spoken_form):
 22:         words = re.split('\s+', spoken_form)
 23:         <CURSOR>

*** End of source buffer ***
Saying: ['regular', 'expression', 'equals', 'empty', 'single', 'quotes', 'new', 'statement']
Heard regular expression equals empty single quotes new statement
 21:     def spoken_form_regular_expression(self, spoken_form):
 22:         words = re.split('\s+', spoken_form)
 23:         regular_expression = ''
 24:         <CURSOR>

*** End of source buffer ***
Saying: ['for', 'loop', 'a', 'word', 'in', 'list', 'words', 'loop', 'body']
Heard for loop a word in list words loop body
 22:         words = re.split('\s+', spoken_form)
 23:         regular_expression = ''
 24:         for a_word in words:
 25:             <CURSOR>

*** End of source buffer ***
Saying: ['first', 'equals', 'a', 'word', 'at', 'index', '0\\zero', 'new', 'statement']
Heard first equals a word at index zero new statement
 23:         regular_expression = ''
 24:         for a_word in words:
 25:             first = a_word[0]
 26:             <CURSOR>

*** End of source buffer ***
Saying: ['rest', 'equals', 'a', 'word', 'at', 'index', '1\\one', ':\\colon', 'new', 'statement']
Heard rest equals a word at index one colon new statement
 24:         for a_word in words:
 25:             first = a_word[0]
 26:             rest = a_word[1: ]
 27:             <CURSOR>

*** End of source buffer ***
Saying: ['regular', 'expression', 'this', 'word', 'equals', 'single', 'quotes']
Heard regular expression this word equals single quotes
 24:         for a_word in words:
 25:             first = a_word[0]
 26:             rest = a_word[1: ]
 27:             regular_expression_this_word = '<CURSOR>'

*** End of source buffer ***
Saying: ['open', 'bracket', 'jump', 'out', 'plus', 'string', 'dot', 'lower', 'with', 'arguments', 'first']
Heard open bracket jump out plus string dot lower with arguments first
 24:         for a_word in words:
 25:             first = a_word[0]
 26:             rest = a_word[1: ]
 27:             regular_expression_this_word = '[' + string.lower(first<CURSOR>)

*** End of source buffer ***
Saying: ['jump', 'out', 'plus', 'string', 'dot', 'upper', 'with', 'arguments', 'first', 'new', 'statement']
Heard jump out plus string dot upper with arguments first new statement
 25:             first = a_word[0]
 26:             rest = a_word[1: ]
 27:             regular_expression_this_word = '[' + string.lower(first) + string.upper(first)
 28:             <CURSOR>

*** End of source buffer ***
Saying: ['if', 'statement', 'not', 'regular', 'expression', 'equal', 'to', 'empty', 'single', 'quotes', 'if', 'body']
Heard if statement not regular expression equal to empty single quotes if body
 26:             rest = a_word[1: ]
 27:             regular_expression_this_word = '[' + string.lower(first) + string.upper(first)
 28:             if not regular_expression == '':
 29:                 <CURSOR>

*** End of source buffer ***
Saying: ['regular', 'expression', 'equals', 'regular', 'expression', 'plus', 'single', 'quotes', 'back slash S.', 'asterisk', 'new', 'statement']
Heard regular expression equals regular expression plus single quotes back slash S. asterisk new statement
 27:             regular_expression_this_word = '[' + string.lower(first) + string.upper(first)
 28:             if not regular_expression == '':
 29:                 regular_expression = regular_expression + '\s*'
 30:                 <CURSOR>

*** End of source buffer ***
Saying: ['regular', 'expression', 'equals', 'regular', 'expression', 'plus', 'regular', 'expression', 'this', 'word', 'new', 'statement']
Heard regular expression equals regular expression plus regular expression this word new statement
 28:             if not regular_expression == '':
 29:                 regular_expression = regular_expression + '\s*'
 30:                 regular_expression = regular_expression + regular_expression_this_word
 31:                 <CURSOR>

*** End of source buffer ***
Saying: ['return', 'regular', 'expression']
Heard return regular expression
 28:             if not regular_expression == '':
 29:                 regular_expression = regular_expression + '\s*'
 30:                 regular_expression = regular_expression + regular_expression_this_word
 31:                 return regular_expression<CURSOR>

*** End of source buffer ***
Saying: ['back indent', 'new statement']
Heard back indent new statement
 29:                 regular_expression = regular_expression + '\s*'
 30:                 regular_expression = regular_expression + regular_expression_this_word
 31:             return regular_expression
 32:         <CURSOR>

*** End of source buffer ***
Saying: ['if', 'not', 'this', 'word', 'then', 'this', 'word', 'equals', 'single', 'quotes', 'hello']
Heard if not this word then this word equals single quotes hello
 30:                 regular_expression = regular_expression + regular_expression_this_word
 31:             return regular_expression
 32:         if not this_word:
 33:             this_word = 'hello<CURSOR>'

*** End of source buffer ***
Saying: ['else', 'if', 'this', 'word', 'is', 'equal', 'to', 'hi', 'then']
Heard else if this word is equal to hi then
 32:         if not this_word:
 33:             this_word = 'hello'
 34:         elif this_word == hi:
 35:             <CURSOR>

*** End of source buffer ***
Saying: ['this', 'word', 'equals', 'greetings', 'else']
Heard this word equals greetings else
 34:         elif this_word == hi:
 35:             this_word = greetings
 36:         else:
 37:             <CURSOR>

*** End of source buffer ***
Saying: ['this', 'word', 'equals', 'single', 'quotes', 'done', 'new', 'statement']
Heard this word equals single quotes done new statement
 35:             this_word = greetings
 36:         else:
 37:             this_word = 'done'
 38:             <CURSOR>

*** End of source buffer ***
Saying: ['try', 'some', 'function', 'with', 'arguments']
Heard try some function with arguments
 36:         else:
 37:             this_word = 'done'
 38:             try:
 39:                 some_function(<CURSOR>)

*** End of source buffer ***
Saying: ['except', 'do', 'the', 'following', 'print', 'single', 'quotes', 'error']
Heard except do the following print single quotes error
 38:             try:
 39:                 some_function()
 40:             except :
 41:                 print 'error<CURSOR>'

*** End of source buffer ***
Saying: ['finally', 'do', 'print', 'single', 'quotes', 'all', 'right']
Heard finally do print single quotes all right
 40:             except :
 41:                 print 'error'
 42:             finally:
 43:                 print 'all_right<CURSOR>'

*** End of source buffer ***


*******************************************************************************
* Name        : python_compilation
* Description : testing parsing of python symbols.
*******************************************************************************

*** Compiling symbols from file: %VCODE_HOME%\Data\TestData\used_to_test_python_parsing.py ***
Compiling symbols for file '%VCODE_HOME%\Data\TestData\test_py_std_sym.py'


Parsed symbols are: 
ISASYMBOL: ['isasymbol']
ISASYMBOL2: ['isasymbol 2']
IS_A_SYMBOL: ['is A. symbol', 'is a symbol']
IS_A_SYMBOL2: ['is A. symbol 2', 'is a symbol 2']
ISasymbol: ['I. sasymbol']
IsASymbol: ['is A. symbol', 'is a symbol']
IsASymbol2: ['is A. symbol 2', 'is a symbol 2']
Is_A_Symbol: ['is A. symbol', 'is a symbol']
THIS_SYMBOL_WAS_PARSED_FROM_test_py_std_sym: ['this symbol was parsed from test P. Y. standard sym', 'this symbol was parsed from test P. Y. standard symbol', 'this symbol was parsed from test P. Y. std sym', 'this symbol was parsed from test P. Y. std symbol', 'this symbol was parsed from test pie standard sym', 'this symbol was parsed from test pie standard symbol', 'this symbol was parsed from test pie std sym', 'this symbol was parsed from test pie std symbol', 'this symbol was parsed from test py standard sym', 'this symbol was parsed from test py standard symbol', 'this symbol was parsed from test py std sym', 'this symbol was parsed from test py std symbol', 'this symbol was parsed from test python standard sym', 'this symbol was parsed from test python standard symbol', 'this symbol was parsed from test python std sym', 'this symbol was parsed from test python std symbol']
_isASymbol: ['is A. symbol', 'is a symbol']
_isASymbol2: ['is A. symbol 2', 'is a symbol 2']
_is_a_symbol: ['is A. symbol', 'is a symbol']
_is_a_symbol2: ['is A. symbol 2', 'is a symbol 2']
isASYMBOL: ['is asymbol']
isASymbol: ['is A. symbol', 'is a symbol']
isASymbol2: ['is A. symbol 2', 'is a symbol 2']
is_a_symbol: ['is A. symbol', 'is a symbol']
is_a_symbol2: ['is A. symbol 2', 'is a symbol 2']
isasymbol: ['isasymbol']
isasymbol2: ['isasymbol 2']
not_a_symbol: ['not A. symbol', 'not a symbol']
_cached_symbols_as_one_string[i] is:
    is_a_symbol  is_a_symbol2  _is_a_symbol  _is_a_symbol2  isASymbol  isASymbol2  _isASymbol  _isASymbol2  IsASymbol  IsASymbol2  ISASYMBOL  ISASYMBOL2  isasymbol  isasymbol2  IS_A_SYMBOL  IS_A_SYMBOL2  Is_A_Symbol  isASYMBOL  ISasymbol 
_cached_symbols_as_one_string[n] is:
    not_a_symbol 
_cached_symbols_as_one_string[t] is:
    THIS_SYMBOL_WAS_PARSED_FROM_test_py_std_sym 
Unresolved abbreviations are:
'asymbol': appears in ['isASYMBOL']
'isasymbol': appears in ['ISASYMBOL', 'ISASYMBOL2', 'isasymbol', 'isasymbol2']
'sasymbol': appears in ['ISasymbol']

*** End of compilation test ***



*******************************************************************************
* Name        : python_editing
* Description : testing the various CSCs and LSAs for editing Python
*******************************************************************************

Compiling symbols for file '%VCODE_HOME%\Data\TestData\edit_this_buff.py'
>>> Known symbols are: 
AClass: ['A. class', 'a class']
ASuper: ['A. super', 'a super']
SomeOtherClass: ['some other class']
THIS_SYMBOL_WAS_PARSED_FROM_test_py_std_sym: ['this symbol was parsed from test P. Y. standard sym', 'this symbol was parsed from test P. Y. standard symbol', 'this symbol was parsed from test P. Y. std sym', 'this symbol was parsed from test P. Y. std symbol', 'this symbol was parsed from test pie standard sym', 'this symbol was parsed from test pie standard symbol', 'this symbol was parsed from test pie std sym', 'this symbol was parsed from test pie std symbol', 'this symbol was parsed from test py standard sym', 'this symbol was parsed from test py standard symbol', 'this symbol was parsed from test py std sym', 'this symbol was parsed from test py std symbol', 'this symbol was parsed from test python standard sym', 'this symbol was parsed from test python standard symbol', 'this symbol was parsed from test python std sym', 'this symbol was parsed from test python std symbol']
__abs__: ['abs', 'underscore abs', 'underscore absolute', 'underscore absolute value']
a_method: ['A. method', 'a method']
a_method_with_no_arguments: ['A. method with no arguments', 'A. method with number arguments', 'a method with no arguments', 'a method with number arguments']
abs: ['abs', 'absolute', 'absolute value']
abspath: ['abs path', 'absolute path', 'abspath']
accept: ['accept']
accept2dyear: ['accept 2 dyear', 'accept two D. year']
access: ['access']
acos: ['A. cos', 'acos', 'arc cos', 'arc cosine']
acosh: ['A. cos H.', 'acosh', 'arc cos H.', 'arc cosine H.', 'hyperbolic arc cosine']
acquire: ['acquire']
class: ['class']
def: ['deaf', 'def', 'default', 'define', 'defined', 'definition']
do_some_more: ['do some more']
do_some_stuff: ['do some stuff']
if: ['if']
pass: ['pass']
self: ['self']
some_argument: ['some argument']
some_array: ['some array']
some_other_method: ['some other method']
some_variable: ['some variable']
try: ['try']
yet_another_method: ['yet another method']
_cached_symbols_as_one_string[a] is:
    access  abs  acosh  acos  abspath  acquire  accept2dyear  accept  __abs__  AClass  ASuper  a_method  a_method_with_no_arguments 
_cached_symbols_as_one_string[c] is:
    class 
_cached_symbols_as_one_string[d] is:
    def  do_some_stuff  do_some_more 
_cached_symbols_as_one_string[i] is:
    if 
_cached_symbols_as_one_string[p] is:
    pass 
_cached_symbols_as_one_string[s] is:
    self  some_argument  some_variable  some_array  SomeOtherClass  some_other_method 
_cached_symbols_as_one_string[t] is:
    THIS_SYMBOL_WAS_PARSED_FROM_test_py_std_sym  try 
_cached_symbols_as_one_string[y] is:
    yet_another_method 

*********************
*** Executing edit test: insert an import statement in middle of a file ***
*********************

*** Start of source buffer ***
  1: <CURSOR># This is a small buffer for testing editing of Python code
  2: 
  3: 
  4: class AClass(ASuper):
*** Start of source buffer ***
  1: # This is a small buffer for testing editing of Python code
  2: <CURSOR>
  3: 
  4: class AClass(ASuper):
  5:     """This is a dummy class"""
Heard import some module
*** Start of source buffer ***
  1: # This is a small buffer for testing editing of Python code
  2: import some_module<CURSOR>
  3: 
  4: class AClass(ASuper):
  5:     """This is a dummy class"""

*********************
*** DONE with edit test: insert an import statement in middle of a file ***
*********************


*********************
*** Executing edit test: create new class ***
*********************

*** Start of source buffer ***
  1: <CURSOR># This is a small buffer for testing editing of Python code
  2: 
  3: 
  4: class AClass(ASuper):
 17:         pass
 18:            
 19: 
 20: <CURSOR>
 21: 
 22: class SomeOtherClass():
 23: 
Heard class dummy class body
 18:            
 19: 
 20: class Dummy:
 21:     <CURSOR>
 22: 
 23: class SomeOtherClass():
 24: 
Heard define method new method method body pass
 20: class Dummy:
 21:     def new_method(self):
 22:         pass
 23:     <CURSOR>
 24: 
 25: class SomeOtherClass():
 26: 

*********************
*** DONE with edit test: create new class ***
*********************


*********************
*** Executing edit test: change subclass of existing class ***
*********************

*** Start of source buffer ***
  1: <CURSOR># This is a small buffer for testing editing of Python code
  2: 
  3: 
  4: class AClass(ASuper):
*** Start of source buffer ***
  1: # This is a small buffer for testing editing of Python code
  2: 
  3: 
  4: <CURSOR>class AClass(ASuper):
  5:     """This is a dummy class"""
  6:     
  7:     def a_method(self, some_argument):
Heard select a super
*** Start of source buffer ***
  1: # This is a small buffer for testing editing of Python code
  2: 
  3: 
  4: class AClass(<SEL_START>ASuper<SEL_END>):
  5:     """This is a dummy class"""
  6:     
  7:     def a_method(self, some_argument):
Heard new super class
*** Start of source buffer ***
  1: # This is a small buffer for testing editing of Python code
  2: 
  3: 
  4: class AClass(new_super_class<CURSOR>):
  5:     """This is a dummy class"""
  6:     
  7:     def a_method(self, some_argument):

*********************
*** DONE with edit test: change subclass of existing class ***
*********************


*********************
*** Executing edit test: add_method_to_existing_class_test ***
*********************

*** Start of source buffer ***
  1: <CURSOR># This is a small buffer for testing editing of Python code
  2: 
  3: 
  4: class AClass(ASuper):
 16:     def a_method_with_no_arguments():
 17:         pass
 18:            
 19: <CURSOR>
 20: 
 21: 
 22: class SomeOtherClass():
Heard add method some method method body pass
 18:            
 19: def some_method(self):
 20:     pass
 21: <CURSOR>
 22: 
 23: 
 24: class SomeOtherClass():

*********************
*** DONE with edit test: add_method_to_existing_class_test ***
*********************


*********************
*** Executing edit test: add_argument_to_existing_method_test ***
*********************

*** Start of source buffer ***
  1: <CURSOR># This is a small buffer for testing editing of Python code
  2: 
  3: 
  4: class AClass(ASuper):
  4: class AClass(ASuper):
  5:     """This is a dummy class"""
  6:     
  7: <CURSOR>    def a_method(self, some_argument):
  8:         some_variable = some_array[0]
  9:         if some_variable:
 10:             do_some_stuff(some_array)
Heard add argument extra argument
  4: class AClass(ASuper):
  5:     """This is a dummy class"""
  6:     
  7:     def a_method(self, some_argument, extra_argument<CURSOR>):
  8:         some_variable = some_array[0]
  9:         if some_variable:
 10:             do_some_stuff(some_array)

*********************
*** DONE with edit test: add_argument_to_existing_method_test ***
*********************


*********************
*** Executing edit test: change_existing_argument_of_a_method_test ***
*********************

*** Start of source buffer ***
  1: <CURSOR># This is a small buffer for testing editing of Python code
  2: 
  3: 
  4: class AClass(ASuper):
  4: class AClass(ASuper):
  5:     """This is a dummy class"""
  6:     
  7: <CURSOR>    def a_method(self, some_argument):
  8:         some_variable = some_array[0]
  9:         if some_variable:
 10:             do_some_stuff(some_array)
Heard select some argument
  4: class AClass(ASuper):
  5:     """This is a dummy class"""
  6:     
  7:     def a_method(self, <SEL_START>some_argument<SEL_END>):
  8:         some_variable = some_array[0]
  9:         if some_variable:
 10:             do_some_stuff(some_array)
Heard new argument
  4: class AClass(ASuper):
  5:     """This is a dummy class"""
  6:     
  7:     def a_method(self, new_argument<CURSOR>):
  8:         some_variable = some_array[0]
  9:         if some_variable:
 10:             do_some_stuff(some_array)

*********************
*** DONE with edit test: change_existing_argument_of_a_method_test ***
*********************


*********************
*** Executing edit test: insert_line_of_code_in_method_test ***
*********************

*** Start of source buffer ***
  1: <CURSOR># This is a small buffer for testing editing of Python code
  2: 
  3: 
  4: class AClass(ASuper):
  5:     """This is a dummy class"""
  6:     
  7:     def a_method(self, some_argument):
  8: <CURSOR>        some_variable = some_array[0]
  9:         if some_variable:
 10:             do_some_stuff(some_array)
 11:             do_some_more()
Heard new statement
  6:     
  7:     def a_method(self, some_argument):
  8:         some_variable = some_array[0]
  9:         <CURSOR>
 10:         if some_variable:
 11:             do_some_stuff(some_array)
 12:             do_some_more()
Heard some array equals none
  6:     
  7:     def a_method(self, some_argument):
  8:         some_variable = some_array[0]
  9:         some_array = None<CURSOR>
 10:         if some_variable:
 11:             do_some_stuff(some_array)
 12:             do_some_more()

*********************
*** DONE with edit test: insert_line_of_code_in_method_test ***
*********************


*********************
*** Executing edit test: change_arguments_in_method_call_test ***
*********************

*** Start of source buffer ***
  1: <CURSOR># This is a small buffer for testing editing of Python code
  2: 
  3: 
  4: class AClass(ASuper):
  7:     def a_method(self, some_argument):
  8:         some_variable = some_array[0]
  9:         if some_variable:
 10: <CURSOR>            do_some_stuff(some_array)
 11:             do_some_more()
 12:            
 13:         try:
Heard select some array
  7:     def a_method(self, some_argument):
  8:         some_variable = some_array[0]
  9:         if some_variable:
 10:             do_some_stuff(<SEL_START>some_array<SEL_END>)
 11:             do_some_more()
 12:            
 13:         try:
Heard none
  7:     def a_method(self, some_argument):
  8:         some_variable = some_array[0]
  9:         if some_variable:
 10:             do_some_stuff(None<CURSOR>)
 11:             do_some_more()
 12:            
 13:         try:
  8:         some_variable = some_array[0]
  9:         if some_variable:
 10:             do_some_stuff(None)
 11: <CURSOR>            do_some_more()
 12:            
 13:         try:
 14:             do_some_stuff()
Heard after paren none
  8:         some_variable = some_array[0]
  9:         if some_variable:
 10:             do_some_stuff(None)
 11:             do_some_more(None<CURSOR>)
 12:            
 13:         try:
 14:             do_some_stuff()

*********************
*** DONE with edit test: change_arguments_in_method_call_test ***
*********************


*********************
*** Executing edit test: nested_if_then_else_test ***
*********************

*** Start of source buffer ***
  1: <CURSOR># This is a small buffer for testing editing of Python code
  2: 
  3: 
  4: class AClass(ASuper):
  8:         some_variable = some_array[0]
  9:         if some_variable:
 10:             do_some_stuff(some_array)
 11: <CURSOR>            do_some_more()
 12:            
 13:         try:
 14:             do_some_stuff()
Heard new statement if some flag then
 10:             do_some_stuff(some_array)
 11:             do_some_more()
 12:             if some_flag:
 13:                 <CURSOR>
 14:            
 15:         try:
 16:             do_some_stuff()
Heard do some more stuff with arguments some argument
 10:             do_some_stuff(some_array)
 11:             do_some_more()
 12:             if some_flag:
 13:                 do_some_more_stuff(some_argument<CURSOR>)
 14:            
 15:         try:
 16:             do_some_stuff()
Heard else do some stuff again with arguments some other argument
 12:             if some_flag:
 13:                 do_some_more_stuff(some_argument)
 14:             else:
 15:                 do_some_stuff_again(some_other_argument<CURSOR>)
 16:            
 17:         try:
 18:             do_some_stuff()
Heard bug below dot following one will not be inserted at the right level
 12:             if some_flag:
 13:                 do_some_more_stuff(some_argument)
 14:             else:
 15:                 do_some_stuff_again(some_other_argumentbug_below.following1willnot be_inserted_at_the_right_level<CURSOR>)
 16:            
 17:         try:
 18:             do_some_stuff()
Heard else do some stuff without arguments
 14:             else:
 15:                 do_some_stuff_again(some_other_argumentbug_below.following1willnot be_inserted_at_the_right_level)
 16:             else:
 17:                 do_some_stuff()<CURSOR>
 18:            
 19:         try:
 20:             do_some_stuff()

*********************
*** DONE with edit test: nested_if_then_else_test ***
*********************


*********************
*** Executing edit test: add_else_clause_test ***
*********************

*** Start of source buffer ***
  1: <CURSOR># This is a small buffer for testing editing of Python code
  2: 
  3: 
  4: class AClass(ASuper):
  8:         some_variable = some_array[0]
  9:         if some_variable:
 10:             do_some_stuff(some_array)
 11: <CURSOR>            do_some_more()
 12:            
 13:         try:
 14:             do_some_stuff()
Heard else clause
 10:             do_some_stuff(some_array)
 11:             do_some_more()
 12:         else:
 13:             <CURSOR>
 14:            
 15:         try:
 16:             do_some_stuff()

*********************
*** DONE with edit test: add_else_clause_test ***
*********************


*********************
*** Executing edit test: add_except_clause_test ***
*********************

*** Start of source buffer ***
  1: <CURSOR># This is a small buffer for testing editing of Python code
  2: 
  3: 
  4: class AClass(ASuper):
 23: 
 24:     def some_other_method(self):
 25:         try:
 26: <CURSOR>            do_some_stuff()
 27: 	       
 28:     def yet_another_method(self):
 29:         pass

*** End of source buffer ***
Heard catch exceptions
 24:     def some_other_method(self):
 25:         try:
 26:             do_some_stuff()
 27:         except <CURSOR>:
 28:             
 29: 	       
 30:     def yet_another_method(self):

*********************
*** DONE with edit test: add_except_clause_test ***
*********************



*******************************************************************************
* Name        : redundant_translation
* Description : testing redundant translation of LSAs and symbols at SR and Mediator level
*******************************************************************************



>>> Testing console command: open_file('blah.c')

WARNING: source file 'blah.c' doesn't exist.
*** Start of source buffer ***
  1: <CURSOR>

*** End of source buffer ***


>>> Testing console command: compile_symbols([r'N:\DavidFox\Code\VoiceCode\VCode\Data\TestData\small_buff.c'])

Compiling symbols for file '%VCODE_HOME%\Data\TestData\small_buff.c'
>>> Known symbols are: 
API_function: ['A. P. I. function', 'API function']
THIS_SYMBOL_WAS_PARSED_FROM_test_py_std_sym: ['this symbol was parsed from test P. Y. standard sym', 'this symbol was parsed from test P. Y. standard symbol', 'this symbol was parsed from test P. Y. std sym', 'this symbol was parsed from test P. Y. std symbol', 'this symbol was parsed from test pie standard sym', 'this symbol was parsed from test pie standard symbol', 'this symbol was parsed from test pie std sym', 'this symbol was parsed from test pie std symbol', 'this symbol was parsed from test py standard sym', 'this symbol was parsed from test py standard symbol', 'this symbol was parsed from test py std sym', 'this symbol was parsed from test py std symbol', 'this symbol was parsed from test python standard sym', 'this symbol was parsed from test python standard symbol', 'this symbol was parsed from test python std sym', 'this symbol was parsed from test python std symbol']
__abs__: ['abs', 'underscore abs', 'underscore absolute', 'underscore absolute value']
abs: ['abs', 'absolute', 'absolute value']
abspath: ['abs path', 'absolute path', 'abspath']
accept: ['accept']
accept2dyear: ['accept 2 dyear', 'accept two D. year']
access: ['access']
acos: ['A. cos', 'acos', 'arc cos', 'arc cosine']
acosh: ['A. cos H.', 'acosh', 'arc cos H.', 'arc cosine H.', 'hyperbolic arc cosine']
acquire: ['acquire']
f_name: ['F. name']
f_name2: ['F. name 2']
float: ['float']
horiz_pos: ['horiz pos', 'horiz position', 'horiz positioning', 'horizontal pos', 'horizontal position', 'horizontal positioning', 'horizontally pos', 'horizontally position', 'horizontally positioning']
move: ['move']
move_horiz: ['move horiz', 'move horizontal', 'move horizontally']
move_vert: ['move vert', 'move vertical', 'move vertically']
this_sym_has_an_other_abbrev: ['this sym has an other abbrev', 'this symbol has an other abbrev']
this_sym_is_unres: ['this sym is unres', 'this symbol is unres']
this_sym_is_unres_too: ['this sym is unres too', 'this symbol is unres too']
void: ['void']
x: ['X.']
y: ['Y.']
_cached_symbols_as_one_string[a] is:
    access  abs  acosh  acos  abspath  acquire  accept2dyear  accept  __abs__  API_function 
_cached_symbols_as_one_string[f] is:
    float  f_name  f_name2 
_cached_symbols_as_one_string[h] is:
    horiz_pos 
_cached_symbols_as_one_string[m] is:
    move  move_horiz  move_vert 
_cached_symbols_as_one_string[t] is:
    THIS_SYMBOL_WAS_PARSED_FROM_test_py_std_sym  this_sym_is_unres  this_sym_is_unres_too  this_sym_has_an_other_abbrev 
_cached_symbols_as_one_string[v] is:
    void 
_cached_symbols_as_one_string[x] is:
    x 
_cached_symbols_as_one_string[y] is:
    y 


>>> Testing console command: say(['index', '!=\\not equal to', '0\\zero'], user_input='0
0
')
Heard index not equal to zero
*** Start of source buffer ***
  1: index != 0<CURSOR>

*** End of source buffer ***


>>> Testing console command: say(['index', 'not', 'equal', 'to', '0\\zero'], user_input='0
0
')
Heard index not equal to zero
*** Start of source buffer ***
  1: index != 0index != 0<CURSOR>

*** End of source buffer ***


>>> Testing console command: say(['move_horiz\\move horizontally'], user_input='0
0
')
Heard move horizontally
*** Start of source buffer ***
  1: index != 0index != 0move_horiz<CURSOR>

*** End of source buffer ***


>>> Testing console command: say(['move', 'horizontally'], user_input='0
0
')
Heard move horizontally
*** Start of source buffer ***
  1: index != 0index != 0move_horizmove_horiz<CURSOR>

*** End of source buffer ***


>>> Testing console command: quit(save_speech_files=0, disconnect=0)



*******************************************************************************
* Name        : repeat_last
* Description : testing repetition of last command
*******************************************************************************



>>> Testing console command: open_file(r'N:\DavidFox\Code\VoiceCode\VCode\Data\TestData\large_buff.py')

*** Start of source buffer ***
  1: <CURSOR>
  2: # This symbol is here because it is homophonic with auto_test. Just checking
  3: # to make sure that symbol match works with homophonic symbols.
  4: autoTst = 0


>>> Testing console command: say(['after hyphen'])

Heard after hyphen
 11:     This class implements various useful behaviors for generic
 12:     objects, such as:
 13: 
 14:     - <CURSOR>safe attribute setting
 15:     - deep constructor
 16:     - pretty printing???
 17:     


>>> Testing console command: say(['again'])

Heard again
 12:     objects, such as:
 13: 
 14:     - safe attribute setting
 15:     - <CURSOR>deep constructor
 16:     - pretty printing???
 17:     
 18: 


>>> Testing console command: goto_line(1)

*** Start of source buffer ***
  1: <CURSOR>
  2: # This symbol is here because it is homophonic with auto_test. Just checking
  3: # to make sure that symbol match works with homophonic symbols.
  4: autoTst = 0


>>> Testing console command: say(['after hyphen'])

Heard after hyphen
 11:     This class implements various useful behaviors for generic
 12:     objects, such as:
 13: 
 14:     - <CURSOR>safe attribute setting
 15:     - deep constructor
 16:     - pretty printing???
 17:     


>>> Testing console command: say(['again 3 times'])

Heard again 3 times
 35: 
 36:     Profile tests on NT indicate that:
 37: 
 38:     - <CURSOR>the speed of constructors for Object and non-Object instances are the same
 39:     - the speed of attribute *gets* is the same for Object and non-Object instances
 40:     - when *$PY_DEBUG_OBJECT=0*, the performance of attribute *sets* is the same for Object and non-Object instances
 41:     - when *$PY_DEBUG_OBJECT=1*, attribute *sets* are slower by a factor of about 15 for Object instances than for non-Object instances


>>> Testing console command: goto_line(1)

*** Start of source buffer ***
  1: <CURSOR>
  2: # This symbol is here because it is homophonic with auto_test. Just checking
  3: # to make sure that symbol match works with homophonic symbols.
  4: autoTst = 0


>>> Testing console command: say(['after hyphen'])

Heard after hyphen
 11:     This class implements various useful behaviors for generic
 12:     objects, such as:
 13: 
 14:     - <CURSOR>safe attribute setting
 15:     - deep constructor
 16:     - pretty printing???
 17:     


>>> Testing console command: say(['3 times'])

Heard 3 times
 13: 
 14:     - safe attribute setting
 15:     - deep constructor
 16:     - <CURSOR>pretty printing???
 17:     
 18: 
 19:     **SAFE ATTRIBUTE SETTING***


*******************************************************************************
* Name        : rsm_algorithm
* Description : Testing RecogStartMgr algorithm.
*******************************************************************************

new instance in window 14
new instance of emacs 1
with window 14
SelectWinGramDummy for buffer None, window 14
init

instance emacs(0)
running in module emacs
windows:  [14]
window #14:
all instances for window:
emacs(0)

new window 20
new buffer fish.C for instance 1
*** Start of source buffer ***
  1: /* This is a small test buffer for C */
  2: 
  3: void move(float x, y)
  4: <CURSOR>{
  5:   move_horiz(x);
  6:   move_vert(y)
  7:   horiz_pos = 0;

instance emacs(0)
running in module emacs
windows:  [14]
window #14:
all instances for window:
emacs(0)

starting recognition in  (20, 'emacs - (Yak 0) - fish.C', 'emacs')
SelectWinGramDummy for buffer None, window 20
init
DictWinGramDummy for buffer = 'fish.C', window 20
init
SelectWinGramDummy for buffer 'fish.C', window 20
activating:  20  
DictWinGramDummy for buffer = 'fish.C', window 20
setting context: before = [ x, y)
], after = [{]
DictWinGramDummy for buffer = 'fish.C', window 20
activating:  20  

instance emacs(0)
running in module emacs
windows:  [14, 20]
window #14:
all instances for window:
emacs(0)
window #20:
all instances for window:
emacs(0)


Setting text mode on
starting recognition in  (20, 'emacs - (Yak 0) - fish.C', 'emacs')
SelectWinGramDummy for buffer 'fish.C', window 20
activating:  20  
DictWinGramDummy for buffer = 'fish.C', window 20
deactivating

Setting text mode off
starting recognition in  (20, 'emacs - (Yak 0) - fish.C', 'emacs')
SelectWinGramDummy for buffer 'fish.C', window 20
activating:  20  
DictWinGramDummy for buffer = 'fish.C', window 20
setting context: before = [ x, y)
], after = [{]
DictWinGramDummy for buffer = 'fish.C', window 20
activating:  20  
starting recognition in  (50, 'D:\\Projects', 'browseui')

instance emacs(0)
running in module emacs
windows:  [14, 20]
window #14:
all instances for window:
emacs(0)
window #20:
all instances for window:
emacs(0)

new instance in telnet window 5
new instance of emacs 5
with window 5

instance emacs(1)
(unknown module)
windows:  []


state {
application:  emacs
instance:  emacs(0)
window 14
window 20
instance:  emacs(1)
known windows [14, 20]
} state

now specifying window
SelectWinGramDummy for buffer None, window 5
init
success

instance emacs(1)
running in module telnet
windows:  [5]
window #5:
shared
all instances for window:
emacs(1)

starting recognition in  (8, 'ttssh - acappella', 'telnet')

instance emacs(1)
running in module telnet
windows:  [5]
window #5:
shared
all instances for window:
emacs(1)

starting recognition in  (5, 'ttssh - acappella', 'telnet')
DictWinGramDummy for buffer = 'bug.c', window 5
init
SelectWinGramDummy for buffer 'bug.c', window 5
activating:  5  
DictWinGramDummy for buffer = 'bug.c', window 5
setting context: before = [], after = []
DictWinGramDummy for buffer = 'bug.c', window 5
activating:  5  

instance emacs(1)
running in module telnet
windows:  [5]
window #5:
shared
all instances for window:
emacs(1)

suspending  emacs(1)
starting recognition in  (5, 'ttssh - acappella', 'telnet')
SelectWinGramDummy for buffer 'bug.c', window 5
deactivating
DictWinGramDummy for buffer = 'bug.c', window 5
deactivating

instance emacs(1)
running in module telnet
windows:  [5]
window #5:
shared
all instances for window:
emacs(1)

new instance of emacs 6

instance emacs(2)
(unknown module)
windows:  []


instance emacs(1)
running in module telnet
windows:  [5]
window #5:
shared
all instances for window:
emacs(1)

now specifying window
SelectWinGramDummy for buffer None, window 5
init
success

instance emacs(2)
running in module telnet
windows:  [5]
window #5:
shared
all instances for window:
emacs(2)
emacs(1)


instance emacs(1)
running in module telnet
windows:  [5]
window #5:
shared
all instances for window:
emacs(2)
emacs(1)

starting recognition in  (5, 'ttssh - acappella', 'telnet')
DictWinGramDummy for buffer = 'dog.q', window 5
init
SelectWinGramDummy for buffer 'dog.q', window 5
activating:  5  
DictWinGramDummy for buffer = 'dog.q', window 5
setting context: before = [], after = []
DictWinGramDummy for buffer = 'dog.q', window 5
activating:  5  
SelectWinGramDummy for buffer 'bug.c', window 5
deactivating
DictWinGramDummy for buffer = 'bug.c', window 5
deactivating

instance emacs(1)
running in module telnet
windows:  [5]
window #5:
shared
all instances for window:
emacs(2)
emacs(1)


instance emacs(2)
running in module telnet
windows:  [5]
window #5:
shared
all instances for window:
emacs(2)
emacs(1)

suspending  emacs(2)
starting recognition in  (5, 'ttssh - acappella', 'telnet')
SelectWinGramDummy for buffer 'dog.q', window 5
deactivating
DictWinGramDummy for buffer = 'dog.q', window 5
deactivating
SelectWinGramDummy for buffer 'bug.c', window 5
deactivating
DictWinGramDummy for buffer = 'bug.c', window 5
deactivating

instance emacs(1)
running in module telnet
windows:  [5]
window #5:
shared
all instances for window:
emacs(2)
emacs(1)


instance emacs(2)
running in module telnet
windows:  [5]
window #5:
shared
all instances for window:
emacs(2)
emacs(1)

resuming  emacs(1)
starting recognition in  (5, 'ttssh - acappella', 'telnet')
SelectWinGramDummy for buffer 'bug.c', window 5
activating:  5  
DictWinGramDummy for buffer = 'bug.c', window 5
setting context: before = [], after = []
DictWinGramDummy for buffer = 'bug.c', window 5
activating:  5  
SelectWinGramDummy for buffer 'dog.q', window 5
deactivating
DictWinGramDummy for buffer = 'dog.q', window 5
deactivating

instance emacs(1)
running in module telnet
windows:  [5]
window #5:
shared
all instances for window:
emacs(1)
emacs(2)


instance emacs(2)
running in module telnet
windows:  [5]
window #5:
shared
all instances for window:
emacs(1)
emacs(2)

new Vim instance in exceed window 15
new instance of Vim 10
with window 15
SelectWinGramDummy for buffer None, window 15
init
new buffer dog.pl for instance 10
 10:     $dirSep = "\";
 11:     $curDirCom = 'cd';
 12: } else {
 13:     $dirSep = <CURSOR>'/';
 14:     $curDirCom = 'pwd';
 15: };
 16: 

*** End of source buffer ***

instance Vim(0)
running in module exceed
windows:  [15]
window #15:
shared
all instances for window:
Vim(0)


state {
application:  Vim
instance:  Vim(0)
window 15
application:  emacs
instance:  emacs(0)
window 14
window 20
instance:  emacs(1)
window 5
instance:  emacs(2)
window 5
known windows [5, 14, 15, 20]
} state

starting recognition in  (15, 'Vim - (Oldie 0) - dog.pl', 'exceed')
DictWinGramDummy for buffer = 'dog.pl', window 15
init
SelectWinGramDummy for buffer 'dog.pl', window 15
activating:  15  
DictWinGramDummy for buffer = 'dog.pl', window 15
setting context: before = [
    $dirSep = ], after = ['/';]
DictWinGramDummy for buffer = 'dog.pl', window 15
activating:  15  

instance Vim(0)
running in module exceed
windows:  [15]
window #15:
shared
all instances for window:
Vim(0)

suspending  Vim(0)
starting recognition in  (15, 'xterm - acappella', 'exceed')
SelectWinGramDummy for buffer 'dog.pl', window 15
deactivating
DictWinGramDummy for buffer = 'dog.pl', window 15
deactivating

instance Vim(0)
running in module exceed
windows:  [15]
window #15:
shared
all instances for window:
Vim(0)

new emacs instance in exceed window 15
new instance of emacs 7
with window 15

instance emacs(3)
(unknown module)
windows:  []

starting recognition in  (15, 'xterm - acappella', 'exceed')
SelectWinGramDummy for buffer 'dog.pl', window 15
deactivating
DictWinGramDummy for buffer = 'dog.pl', window 15
deactivating

instance emacs(3)
(unknown module)
windows:  []

now specifying window
SelectWinGramDummy for buffer None, window 15
init
success

instance emacs(3)
running in module exceed
windows:  [15]
window #15:
shared
all instances for window:
emacs(3)
Vim(0)

starting recognition in  (15, 'xterm - acappella', 'exceed')
DictWinGramDummy for buffer = 'nothing.py', window 15
init
SelectWinGramDummy for buffer 'nothing.py', window 15
activating:  15  
DictWinGramDummy for buffer = 'nothing.py', window 15
setting context: before = [], after = []
DictWinGramDummy for buffer = 'nothing.py', window 15
activating:  15  
SelectWinGramDummy for buffer 'dog.pl', window 15
deactivating
DictWinGramDummy for buffer = 'dog.pl', window 15
deactivating

instance emacs(3)
running in module exceed
windows:  [15]
window #15:
shared
all instances for window:
emacs(3)
Vim(0)

suspending  emacs(3)
starting recognition in  (15, 'xterm - acappella', 'exceed')
SelectWinGramDummy for buffer 'nothing.py', window 15
deactivating
DictWinGramDummy for buffer = 'nothing.py', window 15
deactivating
SelectWinGramDummy for buffer 'dog.pl', window 15
deactivating
DictWinGramDummy for buffer = 'dog.pl', window 15
deactivating

instance emacs(3)
running in module exceed
windows:  [15]
window #15:
shared
all instances for window:
emacs(3)
Vim(0)

resuming  Vim(0)
starting recognition in  (15, 'Vim - (Oldie 0) - dog.pl', 'exceed')
SelectWinGramDummy for buffer 'dog.pl', window 15
activating:  15  
DictWinGramDummy for buffer = 'dog.pl', window 15
setting context: before = [
    $dirSep = ], after = ['/';]
DictWinGramDummy for buffer = 'dog.pl', window 15
activating:  15  
SelectWinGramDummy for buffer 'nothing.py', window 15
deactivating
DictWinGramDummy for buffer = 'nothing.py', window 15
deactivating

instance Vim(0)
running in module exceed
windows:  [15]
window #15:
shared
all instances for window:
Vim(0)
emacs(3)

new emacs instance in exceed window 25
new instance of emacs 9
with window 25
SelectWinGramDummy for buffer None, window 25
init

instance emacs(4)
running in module exceed
windows:  [25]
window #25:
all instances for window:
emacs(4)

starting recognition in  (25, 'emacs - (Yak 4) - .cshrc', 'exceed')
DictWinGramDummy for buffer = '.cshrc', window 25
init
SelectWinGramDummy for buffer '.cshrc', window 25
activating:  25  
DictWinGramDummy for buffer = '.cshrc', window 25
setting context: before = [], after = []
DictWinGramDummy for buffer = '.cshrc', window 25
activating:  25  

instance emacs(4)
running in module exceed
windows:  [25]
window #25:
all instances for window:
emacs(4)

app reports new window (is current)
current is (26, 'emacs - (Yak 4) - .cshrc', 'exceed')
SelectWinGramDummy for buffer None, window 26
init

instance emacs(4)
running in module exceed
windows:  [25, 26]
window #25:
all instances for window:
emacs(4)
window #26:
all instances for window:
emacs(4)

starting recognition in  (26, 'emacs - (Yak 4) - .cshrc', 'exceed')
DictWinGramDummy for buffer = '.cshrc', window 26
init
SelectWinGramDummy for buffer '.cshrc', window 26
activating:  26  
DictWinGramDummy for buffer = '.cshrc', window 26
setting context: before = [], after = []
DictWinGramDummy for buffer = '.cshrc', window 26
activating:  26  

instance emacs(4)
running in module exceed
windows:  [25, 26]
window #25:
all instances for window:
emacs(4)
window #26:
all instances for window:
emacs(4)

app reports new window (is not current)
current is (15, 'xterm - acappella', 'exceed')

instance emacs(4)
running in module exceed
windows:  [25, 26]
window #25:
all instances for window:
emacs(4)
window #26:
all instances for window:
emacs(4)


instance Vim(0)
running in module exceed
windows:  [15]
window #15:
shared
all instances for window:
Vim(0)
emacs(3)

but now it is
current is (27, 'emacs - (Yak 4) - .cshrc', 'exceed')
starting recognition in  (27, 'emacs - (Yak 4) - .cshrc', 'exceed')
SelectWinGramDummy for buffer None, window 27
init
DictWinGramDummy for buffer = '.cshrc', window 27
init
SelectWinGramDummy for buffer '.cshrc', window 27
activating:  27  
DictWinGramDummy for buffer = '.cshrc', window 27
setting context: before = [], after = []
DictWinGramDummy for buffer = '.cshrc', window 27
activating:  27  

instance emacs(4)
running in module exceed
windows:  [25, 26, 27]
window #25:
all instances for window:
emacs(4)
window #26:
all instances for window:
emacs(4)
window #27:
all instances for window:
emacs(4)

new universal instance of WaxEdit 12
now it is on WaxEdit
starting recognition in  (99, 'WaxEdit - (Floor 0) - large_buff.py', 'python')
SelectWinGramDummy for buffer None, global
init
DictWinGramDummy for buffer = 'large_buff.py', global
init
SelectWinGramDummy for buffer 'large_buff.py', global
activating:  global  exclusive 

DictWinGramDummy for buffer = 'large_buff.py', global
setting context: before = [], after = []
DictWinGramDummy for buffer = 'large_buff.py', global
activating:  global  exclusive 


instance WaxEdit(0)
(unknown module)
windows:  []

but now it is
current is (27, 'emacs - (Yak 4) - .cshrc', 'exceed')
starting recognition in  (27, 'emacs - (Yak 4) - .cshrc', 'exceed')
SelectWinGramDummy for buffer 'large_buff.py', global
activating:  global  exclusive 

DictWinGramDummy for buffer = 'large_buff.py', global
setting context: before = [], after = []
DictWinGramDummy for buffer = 'large_buff.py', global
activating:  global  exclusive 

SelectWinGramDummy for buffer '.cshrc', window 27
deactivating
DictWinGramDummy for buffer = '.cshrc', window 27
deactivating

instance emacs(4)
running in module exceed
windows:  [25, 26, 27]
window #25:
all instances for window:
emacs(4)
window #26:
all instances for window:
emacs(4)
window #27:
all instances for window:
emacs(4)


instance WaxEdit(0)
(unknown module)
windows:  []

SelectWinGramDummy for buffer 'large_buff.py', global
deactivating
DictWinGramDummy for buffer = 'large_buff.py', global
deactivating
SelectWinGramDummy for buffer 'large_buff.py', global
del
DictWinGramDummy for buffer = 'large_buff.py', global
del
and now the WaxEdit is gone
current is (27, 'emacs - (Yak 4) - .cshrc', 'exceed')
starting recognition in  (27, 'emacs - (Yak 4) - .cshrc', 'exceed')
SelectWinGramDummy for buffer '.cshrc', window 27
activating:  27  
DictWinGramDummy for buffer = '.cshrc', window 27
setting context: before = [], after = []
DictWinGramDummy for buffer = '.cshrc', window 27
activating:  27  

instance emacs(4)
running in module exceed
windows:  [25, 26, 27]
window #25:
all instances for window:
emacs(4)
window #26:
all instances for window:
emacs(4)
window #27:
all instances for window:
emacs(4)



*******************************************************************************
* Name        : rsm_algorithm_trust
* Description : Testing RecogStartMgr algorithm.
*******************************************************************************

new instance in window 14
new instance of emacs 1
with window 14
SelectWinGramDummy for buffer None, window 14
init

instance emacs(0)
running in module emacs
windows:  [14]
window #14:
all instances for window:
emacs(0)

new window 20
new buffer fish.C for instance 1
*** Start of source buffer ***
  1: /* This is a small test buffer for C */
  2: 
  3: void move(float x, y)
  4: <CURSOR>{
  5:   move_horiz(x);
  6:   move_vert(y)
  7:   horiz_pos = 0;

instance emacs(0)
running in module emacs
windows:  [14]
window #14:
all instances for window:
emacs(0)

starting recognition in  (20, 'emacs - (Yak 0) - fish.C', 'emacs')
SelectWinGramDummy for buffer None, window 20
init
DictWinGramDummy for buffer = 'fish.C', window 20
init
SelectWinGramDummy for buffer 'fish.C', window 20
activating:  20  
DictWinGramDummy for buffer = 'fish.C', window 20
setting context: before = [ x, y)
], after = [{]
DictWinGramDummy for buffer = 'fish.C', window 20
activating:  20  

instance emacs(0)
running in module emacs
windows:  [14, 20]
window #14:
all instances for window:
emacs(0)
window #20:
all instances for window:
emacs(0)


Setting text mode on
starting recognition in  (20, 'emacs - (Yak 0) - fish.C', 'emacs')
SelectWinGramDummy for buffer 'fish.C', window 20
activating:  20  
DictWinGramDummy for buffer = 'fish.C', window 20
deactivating

Setting text mode off
starting recognition in  (20, 'emacs - (Yak 0) - fish.C', 'emacs')
SelectWinGramDummy for buffer 'fish.C', window 20
activating:  20  
DictWinGramDummy for buffer = 'fish.C', window 20
setting context: before = [ x, y)
], after = [{]
DictWinGramDummy for buffer = 'fish.C', window 20
activating:  20  
starting recognition in  (50, 'D:\\Projects', 'browseui')

instance emacs(0)
running in module emacs
windows:  [14, 20]
window #14:
all instances for window:
emacs(0)
window #20:
all instances for window:
emacs(0)

new instance in telnet window 5
new instance of emacs 5
with window 5
SelectWinGramDummy for buffer None, window 5
init

instance emacs(1)
running in module telnet
windows:  [5]
window #5:
shared
all instances for window:
emacs(1)


state {
application:  emacs
instance:  emacs(0)
window 14
window 20
instance:  emacs(1)
window 5
known windows [5, 14, 20]
} state

now specifying window
failed

instance emacs(1)
running in module telnet
windows:  [5]
window #5:
shared
all instances for window:
emacs(1)

starting recognition in  (8, 'ttssh - acappella', 'telnet')

instance emacs(1)
running in module telnet
windows:  [5]
window #5:
shared
all instances for window:
emacs(1)

starting recognition in  (5, 'ttssh - acappella', 'telnet')
DictWinGramDummy for buffer = 'bug.c', window 5
init
SelectWinGramDummy for buffer 'bug.c', window 5
activating:  5  
DictWinGramDummy for buffer = 'bug.c', window 5
setting context: before = [], after = []
DictWinGramDummy for buffer = 'bug.c', window 5
activating:  5  

instance emacs(1)
running in module telnet
windows:  [5]
window #5:
shared
all instances for window:
emacs(1)

suspending  emacs(1)
starting recognition in  (5, 'ttssh - acappella', 'telnet')
SelectWinGramDummy for buffer 'bug.c', window 5
deactivating
DictWinGramDummy for buffer = 'bug.c', window 5
deactivating

instance emacs(1)
running in module telnet
windows:  [5]
window #5:
shared
all instances for window:
emacs(1)

new instance of emacs 6

instance emacs(2)
(unknown module)
windows:  []


instance emacs(1)
running in module telnet
windows:  [5]
window #5:
shared
all instances for window:
emacs(1)

now specifying window
SelectWinGramDummy for buffer None, window 5
init
success

instance emacs(2)
running in module telnet
windows:  [5]
window #5:
shared
all instances for window:
emacs(2)
emacs(1)


instance emacs(1)
running in module telnet
windows:  [5]
window #5:
shared
all instances for window:
emacs(2)
emacs(1)

starting recognition in  (5, 'ttssh - acappella', 'telnet')
DictWinGramDummy for buffer = 'dog.q', window 5
init
SelectWinGramDummy for buffer 'dog.q', window 5
activating:  5  
DictWinGramDummy for buffer = 'dog.q', window 5
setting context: before = [], after = []
DictWinGramDummy for buffer = 'dog.q', window 5
activating:  5  
SelectWinGramDummy for buffer 'bug.c', window 5
deactivating
DictWinGramDummy for buffer = 'bug.c', window 5
deactivating

instance emacs(1)
running in module telnet
windows:  [5]
window #5:
shared
all instances for window:
emacs(2)
emacs(1)


instance emacs(2)
running in module telnet
windows:  [5]
window #5:
shared
all instances for window:
emacs(2)
emacs(1)

suspending  emacs(2)
starting recognition in  (5, 'ttssh - acappella', 'telnet')
SelectWinGramDummy for buffer 'dog.q', window 5
deactivating
DictWinGramDummy for buffer = 'dog.q', window 5
deactivating
SelectWinGramDummy for buffer 'bug.c', window 5
deactivating
DictWinGramDummy for buffer = 'bug.c', window 5
deactivating

instance emacs(1)
running in module telnet
windows:  [5]
window #5:
shared
all instances for window:
emacs(2)
emacs(1)


instance emacs(2)
running in module telnet
windows:  [5]
window #5:
shared
all instances for window:
emacs(2)
emacs(1)

resuming  emacs(1)
starting recognition in  (5, 'ttssh - acappella', 'telnet')
SelectWinGramDummy for buffer 'bug.c', window 5
activating:  5  
DictWinGramDummy for buffer = 'bug.c', window 5
setting context: before = [], after = []
DictWinGramDummy for buffer = 'bug.c', window 5
activating:  5  
SelectWinGramDummy for buffer 'dog.q', window 5
deactivating
DictWinGramDummy for buffer = 'dog.q', window 5
deactivating

instance emacs(1)
running in module telnet
windows:  [5]
window #5:
shared
all instances for window:
emacs(1)
emacs(2)


instance emacs(2)
running in module telnet
windows:  [5]
window #5:
shared
all instances for window:
emacs(1)
emacs(2)

new Vim instance in exceed window 15
new instance of Vim 10
with window 15
SelectWinGramDummy for buffer None, window 15
init
new buffer dog.pl for instance 10
 10:     $dirSep = "\";
 11:     $curDirCom = 'cd';
 12: } else {
 13:     $dirSep = <CURSOR>'/';
 14:     $curDirCom = 'pwd';
 15: };
 16: 

*** End of source buffer ***

instance Vim(0)
running in module exceed
windows:  [15]
window #15:
shared
all instances for window:
Vim(0)


state {
application:  Vim
instance:  Vim(0)
window 15
application:  emacs
instance:  emacs(0)
window 14
window 20
instance:  emacs(1)
window 5
instance:  emacs(2)
window 5
known windows [5, 14, 15, 20]
} state

starting recognition in  (15, 'Vim - (Oldie 0) - dog.pl', 'exceed')
DictWinGramDummy for buffer = 'dog.pl', window 15
init
SelectWinGramDummy for buffer 'dog.pl', window 15
activating:  15  
DictWinGramDummy for buffer = 'dog.pl', window 15
setting context: before = [
    $dirSep = ], after = ['/';]
DictWinGramDummy for buffer = 'dog.pl', window 15
activating:  15  

instance Vim(0)
running in module exceed
windows:  [15]
window #15:
shared
all instances for window:
Vim(0)

suspending  Vim(0)
starting recognition in  (15, 'xterm - acappella', 'exceed')
SelectWinGramDummy for buffer 'dog.pl', window 15
deactivating
DictWinGramDummy for buffer = 'dog.pl', window 15
deactivating

instance Vim(0)
running in module exceed
windows:  [15]
window #15:
shared
all instances for window:
Vim(0)

new emacs instance in exceed window 15
new instance of emacs 7
with window 15
SelectWinGramDummy for buffer None, window 15
init

instance emacs(3)
running in module exceed
windows:  [15]
window #15:
shared
all instances for window:
emacs(3)
Vim(0)

starting recognition in  (15, 'xterm - acappella', 'exceed')
DictWinGramDummy for buffer = 'nothing.py', window 15
init
SelectWinGramDummy for buffer 'nothing.py', window 15
activating:  15  
DictWinGramDummy for buffer = 'nothing.py', window 15
setting context: before = [], after = []
DictWinGramDummy for buffer = 'nothing.py', window 15
activating:  15  
SelectWinGramDummy for buffer 'dog.pl', window 15
deactivating
DictWinGramDummy for buffer = 'dog.pl', window 15
deactivating

instance emacs(3)
running in module exceed
windows:  [15]
window #15:
shared
all instances for window:
emacs(3)
Vim(0)

now specifying window
failed

instance emacs(3)
running in module exceed
windows:  [15]
window #15:
shared
all instances for window:
emacs(3)
Vim(0)

starting recognition in  (15, 'xterm - acappella', 'exceed')
SelectWinGramDummy for buffer 'nothing.py', window 15
activating:  15  
DictWinGramDummy for buffer = 'nothing.py', window 15
setting context: before = [], after = []
DictWinGramDummy for buffer = 'nothing.py', window 15
activating:  15  
SelectWinGramDummy for buffer 'dog.pl', window 15
deactivating
DictWinGramDummy for buffer = 'dog.pl', window 15
deactivating

instance emacs(3)
running in module exceed
windows:  [15]
window #15:
shared
all instances for window:
emacs(3)
Vim(0)

suspending  emacs(3)
starting recognition in  (15, 'xterm - acappella', 'exceed')
SelectWinGramDummy for buffer 'nothing.py', window 15
deactivating
DictWinGramDummy for buffer = 'nothing.py', window 15
deactivating
SelectWinGramDummy for buffer 'dog.pl', window 15
deactivating
DictWinGramDummy for buffer = 'dog.pl', window 15
deactivating

instance emacs(3)
running in module exceed
windows:  [15]
window #15:
shared
all instances for window:
emacs(3)
Vim(0)

resuming  Vim(0)
starting recognition in  (15, 'Vim - (Oldie 0) - dog.pl', 'exceed')
SelectWinGramDummy for buffer 'dog.pl', window 15
activating:  15  
DictWinGramDummy for buffer = 'dog.pl', window 15
setting context: before = [
    $dirSep = ], after = ['/';]
DictWinGramDummy for buffer = 'dog.pl', window 15
activating:  15  
SelectWinGramDummy for buffer 'nothing.py', window 15
deactivating
DictWinGramDummy for buffer = 'nothing.py', window 15
deactivating

instance Vim(0)
running in module exceed
windows:  [15]
window #15:
shared
all instances for window:
Vim(0)
emacs(3)

new emacs instance in exceed window 25
new instance of emacs 9
with window 25
SelectWinGramDummy for buffer None, window 25
init

instance emacs(4)
running in module exceed
windows:  [25]
window #25:
all instances for window:
emacs(4)

starting recognition in  (25, 'emacs - (Yak 4) - .cshrc', 'exceed')
DictWinGramDummy for buffer = '.cshrc', window 25
init
SelectWinGramDummy for buffer '.cshrc', window 25
activating:  25  
DictWinGramDummy for buffer = '.cshrc', window 25
setting context: before = [], after = []
DictWinGramDummy for buffer = '.cshrc', window 25
activating:  25  

instance emacs(4)
running in module exceed
windows:  [25]
window #25:
all instances for window:
emacs(4)

app reports new window (is current)
current is (26, 'emacs - (Yak 4) - .cshrc', 'exceed')
SelectWinGramDummy for buffer None, window 26
init

instance emacs(4)
running in module exceed
windows:  [25, 26]
window #25:
all instances for window:
emacs(4)
window #26:
all instances for window:
emacs(4)

starting recognition in  (26, 'emacs - (Yak 4) - .cshrc', 'exceed')
DictWinGramDummy for buffer = '.cshrc', window 26
init
SelectWinGramDummy for buffer '.cshrc', window 26
activating:  26  
DictWinGramDummy for buffer = '.cshrc', window 26
setting context: before = [], after = []
DictWinGramDummy for buffer = '.cshrc', window 26
activating:  26  

instance emacs(4)
running in module exceed
windows:  [25, 26]
window #25:
all instances for window:
emacs(4)
window #26:
all instances for window:
emacs(4)

app reports new window (is not current)
current is (15, 'xterm - acappella', 'exceed')

instance emacs(4)
running in module exceed
windows:  [25, 26]
window #25:
all instances for window:
emacs(4)
window #26:
all instances for window:
emacs(4)


instance Vim(0)
running in module exceed
windows:  [15]
window #15:
shared
all instances for window:
Vim(0)
emacs(3)

but now it is
current is (27, 'emacs - (Yak 4) - .cshrc', 'exceed')
starting recognition in  (27, 'emacs - (Yak 4) - .cshrc', 'exceed')
SelectWinGramDummy for buffer None, window 27
init
DictWinGramDummy for buffer = '.cshrc', window 27
init
SelectWinGramDummy for buffer '.cshrc', window 27
activating:  27  
DictWinGramDummy for buffer = '.cshrc', window 27
setting context: before = [], after = []
DictWinGramDummy for buffer = '.cshrc', window 27
activating:  27  

instance emacs(4)
running in module exceed
windows:  [25, 26, 27]
window #25:
all instances for window:
emacs(4)
window #26:
all instances for window:
emacs(4)
window #27:
all instances for window:
emacs(4)

new universal instance of WaxEdit 12
now it is on WaxEdit
starting recognition in  (99, 'WaxEdit - (Floor 0) - large_buff.py', 'python')
SelectWinGramDummy for buffer None, global
init
DictWinGramDummy for buffer = 'large_buff.py', global
init
SelectWinGramDummy for buffer 'large_buff.py', global
activating:  global  exclusive 

DictWinGramDummy for buffer = 'large_buff.py', global
setting context: before = [], after = []
DictWinGramDummy for buffer = 'large_buff.py', global
activating:  global  exclusive 


instance WaxEdit(0)
(unknown module)
windows:  []

but now it is
current is (27, 'emacs - (Yak 4) - .cshrc', 'exceed')
starting recognition in  (27, 'emacs - (Yak 4) - .cshrc', 'exceed')
SelectWinGramDummy for buffer 'large_buff.py', global
activating:  global  exclusive 

DictWinGramDummy for buffer = 'large_buff.py', global
setting context: before = [], after = []
DictWinGramDummy for buffer = 'large_buff.py', global
activating:  global  exclusive 

SelectWinGramDummy for buffer '.cshrc', window 27
deactivating
DictWinGramDummy for buffer = '.cshrc', window 27
deactivating

instance emacs(4)
running in module exceed
windows:  [25, 26, 27]
window #25:
all instances for window:
emacs(4)
window #26:
all instances for window:
emacs(4)
window #27:
all instances for window:
emacs(4)


instance WaxEdit(0)
(unknown module)
windows:  []

SelectWinGramDummy for buffer 'large_buff.py', global
deactivating
DictWinGramDummy for buffer = 'large_buff.py', global
deactivating
SelectWinGramDummy for buffer 'large_buff.py', global
del
DictWinGramDummy for buffer = 'large_buff.py', global
del
and now the WaxEdit is gone
current is (27, 'emacs - (Yak 4) - .cshrc', 'exceed')
starting recognition in  (27, 'emacs - (Yak 4) - .cshrc', 'exceed')
SelectWinGramDummy for buffer '.cshrc', window 27
activating:  27  
DictWinGramDummy for buffer = '.cshrc', window 27
setting context: before = [], after = []
DictWinGramDummy for buffer = '.cshrc', window 27
activating:  27  

instance emacs(4)
running in module exceed
windows:  [25, 26, 27]
window #25:
all instances for window:
emacs(4)
window #26:
all instances for window:
emacs(4)
window #27:
all instances for window:
emacs(4)



*******************************************************************************
* Name        : select_pseudocode
* Description : testing select pseudocode commands
*******************************************************************************



>>> Testing console command: open_file('blah.py')

WARNING: source file 'blah.py' doesn't exist.
*** Start of source buffer ***
  1: <CURSOR>

*** End of source buffer ***


>>> Testing console command: say(['index', 'equals', '0\\zero', 'new statement'], user_input='1\n')
Heard index equals zero new statement
*** Start of source buffer ***
  1: index = 0
  2: <CURSOR>

*** End of source buffer ***


>>> Testing console command: say(['index', 'equals', '1\\one', 'new statement'], user_input='1\n')
Heard index equals one new statement
*** Start of source buffer ***
  1: index = 0
  2: index = 1
  3: <CURSOR>

*** End of source buffer ***


>>> Testing console command: say(['index', 'equals', '0\\zero', 'new statement'], user_input='1\n')
Heard index equals zero new statement
*** Start of source buffer ***
  1: index = 0
  2: index = 1
  3: index = 0
  4: <CURSOR>

*** End of source buffer ***


>>> Testing console command: say(['index', 'equals', '1\\one', 'new statement'], user_input='1\n')
Heard index equals one new statement
  2: index = 1
  3: index = 0
  4: index = 1
  5: <CURSOR>

*** End of source buffer ***


>>> Testing console command: say(['index', 'equals', '0\\zero', 'new statement'], user_input='1\n')
Heard index equals zero new statement
  3: index = 0
  4: index = 1
  5: index = 0
  6: <CURSOR>

*** End of source buffer ***


>>> Testing console command: goto_line(2)

*** Start of source buffer ***
  1: index = 0
  2: <CURSOR>index = 1
  3: index = 0
  4: index = 1
  5: index = 0


>>> Testing console command: say(['go after next', 'index', '=\\equals', '0\\zero'], user_input='None')
Heard go after next index equals zero
*** Start of source buffer ***
  1: index = 0
  2: index = 1
  3: index = 0<CURSOR>
  4: index = 1
  5: index = 0
  6: 

*** End of source buffer ***


>>> Testing console command: goto_line(2)

*** Start of source buffer ***
  1: index = 0
  2: <CURSOR>index = 1
  3: index = 0
  4: index = 1
  5: index = 0


>>> Testing console command: say(['go after previous', 'index', '=\\equals', '0\\zero'], user_input='None')
Heard go after previous index equals zero
*** Start of source buffer ***
  1: index = 0<CURSOR>
  2: index = 1
  3: index = 0
  4: index = 1


>>> Testing console command: goto_line(2)

*** Start of source buffer ***
  1: index = 0
  2: <CURSOR>index = 1
  3: index = 0
  4: index = 1
  5: index = 0


>>> Testing console command: say(['go before', 'index', '=\\equals', '0\\zero'], user_input='None')
Heard go before index equals zero
*** Start of source buffer ***
  1: <CURSOR>index = 0
  2: index = 1
  3: index = 0
  4: index = 1


>>> Testing console command: goto_line(2)

*** Start of source buffer ***
  1: index = 0
  2: <CURSOR>index = 1
  3: index = 0
  4: index = 1
  5: index = 0


>>> Testing console command: say(['go before next', 'index', '=\\equals', '0\\zero'], user_input='None')
Heard go before next index equals zero
*** Start of source buffer ***
  1: index = 0
  2: index = 1
  3: <CURSOR>index = 0
  4: index = 1
  5: index = 0
  6: 

*** End of source buffer ***


>>> Testing console command: goto_line(2)

*** Start of source buffer ***
  1: index = 0
  2: <CURSOR>index = 1
  3: index = 0
  4: index = 1
  5: index = 0


>>> Testing console command: say(['go before previous', 'index', '=\\equals', '0\\zero'], user_input='None')
Heard go before previous index equals zero
*** Start of source buffer ***
  1: <CURSOR>index = 0
  2: index = 1
  3: index = 0
  4: index = 1


>>> Testing console command: goto_line(2)

*** Start of source buffer ***
  1: index = 0
  2: <CURSOR>index = 1
  3: index = 0
  4: index = 1
  5: index = 0


>>> Testing console command: say(['after next', 'index', '=\\equals', '0\\zero'], user_input='None')
Heard after next index equals zero
*** Start of source buffer ***
  1: index = 0
  2: index = 1
  3: index = 0<CURSOR>
  4: index = 1
  5: index = 0
  6: 

*** End of source buffer ***


>>> Testing console command: goto_line(2)

*** Start of source buffer ***
  1: index = 0
  2: <CURSOR>index = 1
  3: index = 0
  4: index = 1
  5: index = 0


>>> Testing console command: say(['after previous', 'index', '=\\equals', '0\\zero'], user_input='None')
Heard after previous index equals zero
*** Start of source buffer ***
  1: index = 0<CURSOR>
  2: index = 1
  3: index = 0
  4: index = 1


>>> Testing console command: goto_line(2)

*** Start of source buffer ***
  1: index = 0
  2: <CURSOR>index = 1
  3: index = 0
  4: index = 1
  5: index = 0


>>> Testing console command: say(['before', 'index', '=\\equals', '0\\zero'], user_input='None')
Heard before index equals zero
*** Start of source buffer ***
  1: <CURSOR>index = 0
  2: index = 1
  3: index = 0
  4: index = 1


>>> Testing console command: goto_line(2)

*** Start of source buffer ***
  1: index = 0
  2: <CURSOR>index = 1
  3: index = 0
  4: index = 1
  5: index = 0


>>> Testing console command: say(['before next', 'index', '=\\equals', '0\\zero'], user_input='None')
Heard before next index equals zero
*** Start of source buffer ***
  1: index = 0
  2: index = 1
  3: <CURSOR>index = 0
  4: index = 1
  5: index = 0
  6: 

*** End of source buffer ***


>>> Testing console command: goto_line(2)

*** Start of source buffer ***
  1: index = 0
  2: <CURSOR>index = 1
  3: index = 0
  4: index = 1
  5: index = 0


>>> Testing console command: say(['before previous', 'index', '=\\equals', '0\\zero'], user_input='None')
Heard before previous index equals zero
*** Start of source buffer ***
  1: <CURSOR>index = 0
  2: index = 1
  3: index = 0
  4: index = 1


>>> Testing console command: goto_line(2)

*** Start of source buffer ***
  1: index = 0
  2: <CURSOR>index = 1
  3: index = 0
  4: index = 1
  5: index = 0


>>> Testing console command: goto_line(2)

*** Start of source buffer ***
  1: index = 0
  2: <CURSOR>index = 1
  3: index = 0
  4: index = 1
  5: index = 0


>>> Testing console command: say(['select', 'index', '=\\equals', '0\\zero'], user_input='None')
Heard select index equals zero
*** Start of source buffer ***
  1: <SEL_START>index = 0<SEL_END>
  2: index = 1
  3: index = 0
  4: index = 1


>>> Testing console command: goto_line(2)

*** Start of source buffer ***
  1: index = 0
  2: <CURSOR>index = 1
  3: index = 0
  4: index = 1
  5: index = 0


>>> Testing console command: say(['select next', 'index', '=\\equals', '0\\zero'], user_input='None')
Heard select next index equals zero
*** Start of source buffer ***
  1: index = 0
  2: index = 1
  3: <SEL_START>index = 0<SEL_END>
  4: index = 1
  5: index = 0
  6: 

*** End of source buffer ***


>>> Testing console command: goto_line(2)

*** Start of source buffer ***
  1: index = 0
  2: <CURSOR>index = 1
  3: index = 0
  4: index = 1
  5: index = 0


>>> Testing console command: say(['select previous', 'index', '=\\equals', '0\\zero'], user_input='None')
Heard select previous index equals zero
*** Start of source buffer ***
  1: <SEL_START>index = 0<SEL_END>
  2: index = 1
  3: index = 0
  4: index = 1


>>> Testing console command: goto_line(1)

*** Start of source buffer ***
  1: <CURSOR>index = 0
  2: index = 1
  3: index = 0
  4: index = 1


>>> Testing console command: say(['select next', 'index', '=\\equals', '0\\zero'], user_input='None')
Heard select next index equals zero
*** Start of source buffer ***
  1: <SEL_START>index = 0<SEL_END>
  2: index = 1
  3: index = 0
  4: index = 1


>>> Testing console command: say(['select next', 'index', '=\\equals', '0\\zero'], user_input='None')
Heard select next index equals zero
*** Start of source buffer ***
  1: index = 0
  2: index = 1
  3: <SEL_START>index = 0<SEL_END>
  4: index = 1
  5: index = 0
  6: 

*** End of source buffer ***


>>> Testing console command: goto_line(6)

  3: index = 0
  4: index = 1
  5: index = 0
  6: <CURSOR>

*** End of source buffer ***


>>> Testing console command: say(['select previous', 'index', '=\\equals', '0\\zero'], user_input='None')
Heard select previous index equals zero
  2: index = 1
  3: index = 0
  4: index = 1
  5: <SEL_START>index = 0<SEL_END>
  6: 

*** End of source buffer ***


>>> Testing console command: say(['select previous', 'index', '=\\equals', '0\\zero'], user_input='None')
Heard select previous index equals zero
*** Start of source buffer ***
  1: index = 0
  2: index = 1
  3: <SEL_START>index = 0<SEL_END>
  4: index = 1
  5: index = 0
  6: 

*** End of source buffer ***


>>> Testing console command: goto_line(1)

*** Start of source buffer ***
  1: <CURSOR>index = 0
  2: index = 1
  3: index = 0
  4: index = 1


>>> Testing console command: say(['select', 'index', '=\\equals', '0\\zero'], user_input='None')
Heard select index equals zero
*** Start of source buffer ***
  1: <SEL_START>index = 0<SEL_END>
  2: index = 1
  3: index = 0
  4: index = 1


>>> Testing console command: say(['next', 'one'], user_input='None')
Heard next one
*** Start of source buffer ***
  1: index = 0
  2: index = 1
  3: <SEL_START>index = 0<SEL_END>
  4: index = 1
  5: index = 0
  6: 

*** End of source buffer ***


>>> Testing console command: say(['previous', 'one'], user_input='None')
Heard previous one
*** Start of source buffer ***
  1: <SEL_START>index = 0<SEL_END>
  2: index = 1
  3: index = 0
  4: index = 1


>>> Testing console command: say(['go after next', 'index', '=\\equals', '0\\zero'], user_input='None')
Heard go after next index equals zero
*** Start of source buffer ***
  1: index = 0
  2: index = 1
  3: index = 0<CURSOR>
  4: index = 1
  5: index = 0
  6: 

*** End of source buffer ***


>>> Testing console command: say(['next', 'one'], user_input='None')
Heard next one
  2: index = 1
  3: index = 0
  4: index = 1
  5: index = 0<CURSOR>
  6: 

*** End of source buffer ***


>>> Testing console command: say(['previous', 'one'], user_input='None')
Heard previous one
*** Start of source buffer ***
  1: index = 0
  2: index = 1
  3: index = 0<CURSOR>
  4: index = 1
  5: index = 0
  6: 

*** End of source buffer ***


>>> Testing console command: quit(save_speech_files=0, disconnect=0)



>>> Testing console command: quit(save_speech_files=0, disconnect=0)



*******************************************************************************
* Name        : set_text
* Description : Testing set_text.
*******************************************************************************

*** Start of source buffer ***
  1: <CURSOR># This is a small test buffer for Python
  2: 
  3: 
  4: 
*** Start of source buffer ***
  1: <CURSOR>nothing left

*** End of source buffer ***
*** Start of source buffer ***
  1: <CURSOR>almost nothing left

*** End of source buffer ***
*** Start of source buffer ***
  1: <CURSOR>almost nobody left

*** End of source buffer ***


*******************************************************************************
* Name        : std_func_calls
* Description : Testing CSCs for calling standard functions.
*******************************************************************************

WARNING: source file 'blah1.py' doesn't exist.
*** Start of source buffer ***
  1: <CURSOR>

*** End of source buffer ***
Saying: ['absolute', 'value', 'with', 'arguments', 'one']
Heard absolute value with arguments one
*** Start of source buffer ***
  1: abs(1<CURSOR>)

*** End of source buffer ***
Saying: ['new', 'statement']
Heard new statement
*** Start of source buffer ***
  1: abs(1)
  2: <CURSOR>

*** End of source buffer ***
Saying: ['absolute', 'value', 'of', 'one']
Heard absolute value of one
*** Start of source buffer ***
  1: abs(1)
  2: abs(1<CURSOR>)

*** End of source buffer ***
Saying: ['new', 'statement']
Heard new statement
*** Start of source buffer ***
  1: abs(1)
  2: abs(1)
  3: <CURSOR>

*** End of source buffer ***
Saying: ['absolute', 'value', 'without', 'arguments']
Heard absolute value without arguments
*** Start of source buffer ***
  1: abs(1)
  2: abs(1)
  3: abs()<CURSOR>

*** End of source buffer ***
Saying: ['new', 'statement']
Heard new statement
*** Start of source buffer ***
  1: abs(1)
  2: abs(1)
  3: abs()
  4: <CURSOR>

*** End of source buffer ***
Saying: ['some', 'function', 'with', 'argument', 'some', 'argument']
Heard some function with argument some argument
*** Start of source buffer ***
  1: abs(1)
  2: abs(1)
  3: abs()
  4: some_function(some_argument<CURSOR>)

*** End of source buffer ***
Saying: ['new', 'statement']
Heard new statement
  2: abs(1)
  3: abs()
  4: some_function(some_argument)
  5: <CURSOR>

*** End of source buffer ***
Saying: ['absolute', 'value']
Heard absolute value
  2: abs(1)
  3: abs()
  4: some_function(some_argument)
  5: abs<CURSOR>

*** End of source buffer ***
Saying: ['new', 'statement']
Heard new statement
  3: abs()
  4: some_function(some_argument)
  5: abs
  6: <CURSOR>

*** End of source buffer ***
Saying: ['some', 'function', 'of', 'some', 'argument']
Heard some function of some argument
  3: abs()
  4: some_function(some_argument)
  5: abs
  6: some_function_of_some_argument<CURSOR>

*** End of source buffer ***


*******************************************************************************
* Name        : symbol_formatting
* Description : Testing styling and manual formatting of new symbols.
*******************************************************************************

WARNING: source file 'blah.py' doesn't exist.
*** Start of source buffer ***
  1: <CURSOR>

*** End of source buffer ***
Testing styles



>>> Testing console command: say(['ordinary', 'formatting', 'equals', 'one'], user_input='None')
Heard ordinary formatting equals one
*** Start of source buffer ***
  1: ordinary_formatting = 1<CURSOR>

*** End of source buffer ***
Heard new statement
*** Start of source buffer ***
  1: ordinary_formatting = 1
  2: <CURSOR>

*** End of source buffer ***


>>> Testing console command: say(['lower', 'Hungarian', 'ugly', 'Java', 'convention'], user_input='None')
Heard lower Hungarian ugly Java convention
*** Start of source buffer ***
  1: ordinary_formatting = 1
  2: uglyJavaConvention<CURSOR>

*** End of source buffer ***
Heard new statement
*** Start of source buffer ***
  1: ordinary_formatting = 1
  2: uglyJavaConvention
  3: <CURSOR>

*** End of source buffer ***


>>> Testing console command: say(['animal', 'equals', 'Hungarian', 'friendly', 'dolphin', 'empty', 'function'], user_input='None')
Heard animal equals Hungarian friendly dolphin empty function
*** Start of source buffer ***
  1: ordinary_formatting = 1
  2: uglyJavaConvention
  3: animal = FriendlyDolphin()<CURSOR>

*** End of source buffer ***
Heard new statement
*** Start of source buffer ***
  1: ordinary_formatting = 1
  2: uglyJavaConvention
  3: animal = FriendlyDolphin()
  4: <CURSOR>

*** End of source buffer ***


>>> Testing console command: say(['\\All-Caps', 'style', 'W.', 'M.', 'user'], user_input='None')
Heard All-Caps style W. M. user
*** Start of source buffer ***
  1: ordinary_formatting = 1
  2: uglyJavaConvention
  3: animal = FriendlyDolphin()
  4: WM_USER<CURSOR>

*** End of source buffer ***
Heard new statement
  2: uglyJavaConvention
  3: animal = FriendlyDolphin()
  4: WM_USER
  5: <CURSOR>

*** End of source buffer ***
Testing styling across utterances


>>> Testing console command: say(['Hungarian'], user_input='None')
Heard Hungarian
  2: uglyJavaConvention
  3: animal = FriendlyDolphin()
  4: WM_USER
  5: <CURSOR>

*** End of source buffer ***


>>> Testing console command: say(['delayed', 'name'], user_input='None')
Heard delayed name
  2: uglyJavaConvention
  3: animal = FriendlyDolphin()
  4: WM_USER
  5: DelayedName<CURSOR>

*** End of source buffer ***
Heard new statement
  3: animal = FriendlyDolphin()
  4: WM_USER
  5: DelayedName
  6: <CURSOR>

*** End of source buffer ***
Testing manual formatting



>>> Testing console command: say(['no', 'space', 'style', 'W.', 'X.', 'cap', 'python'], user_input='None')
Heard no space style W. X. cap python
  3: animal = FriendlyDolphin()
  4: WM_USER
  5: DelayedName
  6: wxPython<CURSOR>

*** End of source buffer ***
Heard new statement
  4: WM_USER
  5: DelayedName
  6: wxPython
  7: <CURSOR>

*** End of source buffer ***


>>> Testing console command: say(['send', 'to', '\\Caps-On', 'the', 'boss'], user_input='None')
Heard send to Caps-On the boss
  4: WM_USER
  5: DelayedName
  6: wxPython
  7: send_to_The_Boss<CURSOR>

*** End of source buffer ***
Heard new statement
  5: DelayedName
  6: wxPython
  7: send_to_The_Boss
  8: <CURSOR>

*** End of source buffer ***


>>> Testing console command: say(['caps', 'on', 'matters', '\\No-Caps', 'of', 'state'], user_input='None')
Heard caps on matters No-Caps of state
  5: DelayedName
  6: wxPython
  7: send_to_The_Boss
  8: Matters_of_State<CURSOR>

*** End of source buffer ***
Heard new statement
  6: wxPython
  7: send_to_The_Boss
  8: Matters_of_State
  9: <CURSOR>

*** End of source buffer ***


>>> Testing console command: say(['inter', 'caps', 'fish', '_\\underscore', 'food'], user_input='None')
Heard inter caps fish underscore food
  6: wxPython
  7: send_to_The_Boss
  8: Matters_of_State
  9: Fish_Food<CURSOR>

*** End of source buffer ***
Heard new statement
  7: send_to_The_Boss
  8: Matters_of_State
  9: Fish_Food
 10: <CURSOR>

*** End of source buffer ***


>>> Testing console command: say(['Hungarian', 'notation', '\\No-Caps', 'dog', 'food'], user_input='None')
Heard Hungarian notation No-Caps dog food
  7: send_to_The_Boss
  8: Matters_of_State
  9: Fish_Food
 10: dogFood<CURSOR>

*** End of source buffer ***
Heard new statement
  8: Matters_of_State
  9: Fish_Food
 10: dogFood
 11: <CURSOR>

*** End of source buffer ***
Making sure manual underscores suppress automatic ones


>>> Testing console command: say(['_\\underscore', 'private', '_\\underscore', 'variable', '_\\underscore'], user_input='None')
Heard underscore private underscore variable underscore
  8: Matters_of_State
  9: Fish_Food
 10: dogFood
 11: _private_variable_<CURSOR>

*** End of source buffer ***
Heard new statement
  9: Fish_Food
 10: dogFood
 11: _private_variable_
 12: <CURSOR>

*** End of source buffer ***
Making sure consecutive letters are treated as part of the same word


>>> Testing console command: say(['windows', 'X.', 'P.'], user_input='None')
Heard windows X. P.
  9: Fish_Food
 10: dogFood
 11: _private_variable_
 12: windows_xp<CURSOR>

*** End of source buffer ***
Heard new statement
 10: dogFood
 11: _private_variable_
 12: windows_xp
 13: <CURSOR>

*** End of source buffer ***


*******************************************************************************
* Name        : symbol_matching
* Description : Test special cases for the symbol matching algorithm.
*******************************************************************************

WARNING: source file 'blah1.py' doesn't exist.
*** Start of source buffer ***
  1: <CURSOR>

*** End of source buffer ***
Saying: ['editor', 'simulator']
Heard editor simulator
*** Start of source buffer ***
  1: EdSim<CURSOR>

*** End of source buffer ***
Saying: ['new', 'statement']
Heard new statement
*** Start of source buffer ***
  1: EdSim
  2: <CURSOR>

*** End of source buffer ***
Saying: ['purple', 'bunny']
Heard purple bunny
*** Start of source buffer ***
  1: EdSim
  2: symbolWithUnmatchableExplicitSpokenForm<CURSOR>

*** End of source buffer ***
Saying: ['new', 'statement']
Heard new statement
*** Start of source buffer ***
  1: EdSim
  2: symbolWithUnmatchableExplicitSpokenForm
  3: <CURSOR>

*** End of source buffer ***
Saying: ['application', 'state']
Heard application state
*** Start of source buffer ***
  1: EdSim
  2: symbolWithUnmatchableExplicitSpokenForm
  3: application_state<CURSOR>

*** End of source buffer ***
Saying: ['new', 'statement']
Heard new statement
*** Start of source buffer ***
  1: EdSim
  2: symbolWithUnmatchableExplicitSpokenForm
  3: application_state
  4: <CURSOR>

*** End of source buffer ***
Saying: ['file', 'path']
Heard file path
*** Start of source buffer ***
  1: EdSim
  2: symbolWithUnmatchableExplicitSpokenForm
  3: application_state
  4: filepath<CURSOR>

*** End of source buffer ***
Saying: ['new', 'statement']
Heard new statement
  2: symbolWithUnmatchableExplicitSpokenForm
  3: application_state
  4: filepath
  5: <CURSOR>

*** End of source buffer ***
Saying: ['directory', 'path']
Heard directory path
  2: symbolWithUnmatchableExplicitSpokenForm
  3: application_state
  4: filepath
  5: dpath<CURSOR>

*** End of source buffer ***
Saying: ['new', 'statement']
Heard new statement
  3: application_state
  4: filepath
  5: dpath
  6: <CURSOR>

*** End of source buffer ***
Saying: ['Toronto', 'transit', 'corporation']
Heard Toronto transit corporation
  3: application_state
  4: filepath
  5: dpath
  6: TTCorp<CURSOR>

*** End of source buffer ***
Saying: ['new', 'statement']
Heard new statement
  4: filepath
  5: dpath
  6: TTCorp
  7: <CURSOR>

*** End of source buffer ***
Saying: ['random', 'number']
Heard random number
  4: filepath
  5: dpath
  6: TTCorp
  7: rannum<CURSOR>

*** End of source buffer ***
Saying: ['new', 'statement']
Heard new statement
  5: dpath
  6: TTCorp
  7: rannum
  8: <CURSOR>

*** End of source buffer ***
Saying: ['green', 'rabbit']
Heard green rabbit
  5: dpath
  6: TTCorp
  7: rannum
  8: GrnRab<CURSOR>

*** End of source buffer ***
Saying: ['new', 'statement']
Heard new statement
  6: TTCorp
  7: rannum
  8: GrnRab
  9: <CURSOR>

*** End of source buffer ***
Saying: ['integer', 'format']
Heard integer format
  6: TTCorp
  7: rannum
  8: GrnRab
  9: integer_format<CURSOR>

*** End of source buffer ***
Saying: ['new', 'statement']
Heard new statement
  7: rannum
  8: GrnRab
  9: integer_format
 10: <CURSOR>

*** End of source buffer ***
Saying: ['rabbit']
Heard rabbit
  7: rannum
  8: GrnRab
  9: integer_format
 10: rabbit<CURSOR>

*** End of source buffer ***
Saying: ['new', 'statement']
Heard new statement
  8: GrnRab
  9: integer_format
 10: rabbit
 11: <CURSOR>

*** End of source buffer ***
Saying: ['data', 'processing']
Heard data processing
  8: GrnRab
  9: integer_format
 10: rabbit
 11: datap<CURSOR>

*** End of source buffer ***
Saying: ['new', 'statement']
Heard new statement
  9: integer_format
 10: rabbit
 11: datap
 12: <CURSOR>

*** End of source buffer ***


*******************************************************************************
* Name        : unusual_symbols
* Description : compilation and dictation of unusual symbols
*******************************************************************************

*** Compiling symbols from file: %VCODE_HOME%\Data\TestData\unusual_symbols.py ***
Compiling symbols for file '%VCODE_HOME%\Data\TestData\test_py_std_sym.py'


Parsed symbols are: 
THIS_SYMBOL_WAS_PARSED_FROM_test_py_std_sym: ['this symbol was parsed from test P. Y. standard sym', 'this symbol was parsed from test P. Y. standard symbol', 'this symbol was parsed from test P. Y. std sym', 'this symbol was parsed from test P. Y. std symbol', 'this symbol was parsed from test pie standard sym', 'this symbol was parsed from test pie standard symbol', 'this symbol was parsed from test pie std sym', 'this symbol was parsed from test pie std symbol', 'this symbol was parsed from test py standard sym', 'this symbol was parsed from test py standard symbol', 'this symbol was parsed from test py std sym', 'this symbol was parsed from test py std symbol', 'this symbol was parsed from test python standard sym', 'this symbol was parsed from test python standard symbol', 'this symbol was parsed from test python std sym', 'this symbol was parsed from test python std symbol']
openlog: ['openlog']
s: ['S.']
se: ['S. E.', 'se']
_cached_symbols_as_one_string[o] is:
    openlog 
_cached_symbols_as_one_string[s] is:
    s  se 
_cached_symbols_as_one_string[t] is:
    THIS_SYMBOL_WAS_PARSED_FROM_test_py_std_sym 
Unresolved abbreviations are:
'openlog': appears in ['openlog']
's': appears in ['s']
'se': appears in ['se']

*** End of compilation test ***

WARNING: source file 'blah.py' doesn't exist.
*** Start of source buffer ***
  1: <CURSOR>

*** End of source buffer ***
Next utterance should not match short symbol 'se'
Got command: say(['software', 'engineering', 'comma'],1
,0,0,)
Heard software engineering comma
*** Start of source buffer ***
  1: software_engineering, <CURSOR>

*** End of source buffer ***
Next utterance should match non-separable symbol 'openlog'
Got command: say(['open', 'log'],1
,0,0,)
Heard open log
*** Start of source buffer ***
  1: software_engineering, openlog<CURSOR>

*** End of source buffer ***


*******************************************************************************
* Name        : v7_select
* Description : testing oddities in select pseudocode with Natspeak 7
*******************************************************************************



>>> Testing console command: open_file('blah.py')

WARNING: source file 'blah.py' doesn't exist.
*** Start of source buffer ***
  1: <CURSOR>

*** End of source buffer ***


>>> Testing console command: say(['index', 'equals', '0\\zero', 'new statement'], user_input='1\n')
Heard index equals zero new statement
*** Start of source buffer ***
  1: index = 0
  2: <CURSOR>

*** End of source buffer ***


>>> Testing console command: say(['index', 'equals', '1\\one', 'new statement'], user_input='1\n')
Heard index equals one new statement
*** Start of source buffer ***
  1: index = 0
  2: index = 1
  3: <CURSOR>

*** End of source buffer ***


>>> Testing console command: say(['index', '=\\equals', '0\\zero', 'new statement'], user_input='1\n')
Heard index equals zero new statement
*** Start of source buffer ***
  1: index = 0
  2: index = 1
  3: index = 0
  4: <CURSOR>

*** End of source buffer ***


>>> Testing console command: say(['index', '=\\equals', '1\\one', 'new statement'], user_input='1\n')
Heard index equals one new statement
  2: index = 1
  3: index = 0
  4: index = 1
  5: <CURSOR>

*** End of source buffer ***


>>> Testing console command: goto_line(2)

*** Start of source buffer ***
  1: index = 0
  2: <CURSOR>index = 1
  3: index = 0
  4: index = 1
  5: 

*** End of source buffer ***


>>> Testing console command: say(['select', 'index', '=\\equals', '0\\zero'], user_input='None')
Heard select index equals zero
*** Start of source buffer ***
  1: <SEL_START>index = 0<SEL_END>
  2: index = 1
  3: index = 0
  4: index = 1


>>> Testing console command: goto_line(2)

*** Start of source buffer ***
  1: index = 0
  2: <CURSOR>index = 1
  3: index = 0
  4: index = 1
  5: 

*** End of source buffer ***


>>> Testing console command: say(['select next', 'index', '=\\equals', '0\\zero'], user_input='None')
Heard select next index equals zero
*** Start of source buffer ***
  1: index = 0
  2: index = 1
  3: <SEL_START>index = 0<SEL_END>
  4: index = 1
  5: 

*** End of source buffer ***


>>> Testing console command: goto_line(2)

*** Start of source buffer ***
  1: index = 0
  2: <CURSOR>index = 1
  3: index = 0
  4: index = 1
  5: 

*** End of source buffer ***


>>> Testing console command: say(['select previous', 'index', '=\\equals', '0\\zero'], user_input='None')
Heard select previous index equals zero
*** Start of source buffer ***
  1: <SEL_START>index = 0<SEL_END>
  2: index = 1
  3: index = 0
  4: index = 1



-----------------------------------------------
Test suite completed in:  1818.60500002 secs
-----------------------------------------------
MessTransporter_Socket.receive_string: no data received in Thread-6