

*******************************************************************************
* Name        : CmdInterp
* Description : self-test for CmdInterp.py
*******************************************************************************



>>> Testing command interpreter



>>> Interpreting in a C buffer

>>> Current buffer is:

*** Start of source buffer ***
  1: /* This is a small test buffer for C */
  2: 
  3: <CURSOR>
  6: void move(float x, y)
  7: {

*** End of source buffer ***
>>> Interpreting: ['for loop', 'loop body']








>>> Interpreting: ['for', 'loop', 'loop', 'body']









>>> Buffer is now:
*** Start of source buffer ***
  3:    for (=0;  <= ; ++)
  4:    {
  5:    for (=0;  <= ; ++)
  6:    {
  7: <CURSOR>   
  9:    }
 10:       

*** End of source buffer ***

>>> Interpreting in a Python buffer

>>> Current buffer is:

*** Start of source buffer ***
  1: # This is a small test buffer for Python
  2: 
  3: 
  4: <CURSOR>
  7: class AClass(ASuper):
  8:     """This is a dummy class"""

*** End of source buffer ***
>>> Interpreting: ['for loop', 'loop body']



>>> Buffer is now:
*** Start of source buffer ***
  2: 
  3: 
  4:    for :
  5:    <CURSOR>
  8: class AClass(ASuper):
  9:     """This is a dummy class"""
 10:     

*** End of source buffer ***


*******************************************************************************
* Name        : EdSim
* Description : self-test for EdSim.py
*******************************************************************************

>>> Testing EdSim.py


>>> Opening a buffer
*** Start of source buffer ***
<CURSOR>/* This is a small test buffer for C */
  2: 
  3: 
  4: void move(float x, y)
  5: {

*** End of source buffer ***


>>> Moving to position 5
*** Start of source buffer ***
  1: /* Th<CURSOR>is is a small test buffer for C */
  3: 
  4: 
  5: void move(float x, y)

*** End of source buffer ***


>>> Testing breadcrumbs

>>> Dropping one here
*** Start of source buffer ***
  1: /* Th<CURSOR>is is a small test buffer for C */
  3: 
  4: 
  5: void move(float x, y)

*** End of source buffer ***

>>> Dropping one here
*** Start of source buffer ***
  1: /* This is<CURSOR> a small test buffer for C */
  3: 
  4: 
  5: void move(float x, y)

*** End of source buffer ***

>>> Popping 2 crumbs -> end up here:
*** Start of source buffer ***
  1: /* Th<CURSOR>is is a small test buffer for C */
  3: 
  4: 
  5: void move(float x, y)

*** End of source buffer ***

>>> Dropping one here
*** Start of source buffer ***
  1: /* Th<CURSOR>is is a small test buffer for C */
  3: 
  4: 
  5: void move(float x, y)

*** End of source buffer ***

>>> Dropping one here
*** Start of source buffer ***
  1: /* This is<CURSOR> a small test buffer for C */
  3: 
  4: 
  5: void move(float x, y)

*** End of source buffer ***
*** Start of source buffer ***
  1: /* This is a small t<CURSOR>est buffer for C */
  3: 
  4: 
  5: void move(float x, y)

*** End of source buffer ***

>>> Popping 1 crumb -> end up here...
*** Start of source buffer ***
  1: /* This is<CURSOR> a small test buffer for C */
  3: 
  4: 
  5: void move(float x, y)

*** End of source buffer ***


>>> Testing code indentation. Inserting for loop.








*** Start of source buffer ***
  3: 
  4:    for (ii=0; ii <= maxValue; ii++)
  5:    {
  6:    <CURSOR>
  9:    }
 10:    void move(float x, y)
 11: {

*** End of source buffer ***


*******************************************************************************
* Name        : Object
* Description : self-test for Object.py
*******************************************************************************

Testing exceptions for get/set


Trying to get the value of attribute 'name', $PY_DEBUG_OBJECT=None
   -> Caught NO AttributeError exception. obj.name=Alain, x=Alain


Trying to set the value of attribute 'name', $PY_DEBUG_OBJECT=None
   -> Caught NO AttributeError exception. obj.name=999, x=0


Trying to get the value of attribute 'nonexistant', $PY_DEBUG_OBJECT=None
   -> Caught AttributeError exception: '[{'args': ('nonexistant',)}]'


Trying to set the value of attribute 'nonexistant', $PY_DEBUG_OBJECT=None
   -> Caught NO AttributeError exception. obj.nonexistant=999, x=0

Testing inheritance of constructor arguments
   Employee1(name='Alain', salary='not enough') -> {'salary': 'not enough', 'name': 'Alain', 'citizenship': None}

Omitting an inherited compulsory argument
   Employee1(salary='not enough') -> Test OK. Correct exception was raised: 'Bad call to __main__.Person1.__init__.
Called with arguments: {}
Did you forget to specify the value of a compulsory  argument inherited from __main__.Person1.__init__?'

Redefining default value of *citizenship*
   MyPerson(name='Alain') -> result={'marital_status': None, 'name': 'Alain', 'citizenship': 'Canadian eh?'}

Overriding redefined default value of *citizenship*
   MyPerson(name='Alain', citizenship='US citizen') -> result={'marital_status': None, 'name': 'Alain', 'citizenship': 'US citizen'}

Enforcing 'Canadian eh?' as the value of *citizenship*
   Canadian(name='Alain') -> result={'name': 'Alain', 'citizenship': 'Canadian eh?'}

Trying to change enforced value 'Canadian eh?' of *citizenship*
   Canadian(citizenship='US') -> Test OK. EnforcedConstrArg was correctly raised: 'The value of argument citizenship in <class __main__.Canadian at 844cf0>.__init__ is enforced at 'Canadian eh?', and cannot be changed.'

Person2.__init__ received init_file=C:/temp.txt
Class with private *init_file* attribute*
   Person2(init_file='C:/temp.txt') -> result={'name': None, 'citizenship': None}

Subclassing from non-standard class AnimatedCharacter.*
   AnimatedPerson(name='Alain', animation_file='C:/People/Alain.dat') -> result={'name': 'Alain', 'frames_per_sec': 40, 'animation_file': 'C:/People/Alain.dat', 'citizenship': None}


*******************************************************************************
* Name        : SymDict
* Description : self-test for SymDict.py
*******************************************************************************

Compiling symbols for file 'e:\Projects\VoiceCode\VCode\Config\py_std_sym.py'
*** Compiling symbols from file: e:\Projects\VoiceCode\VCode\Data\TestData\small_buff.c ***
Compiling symbols for file 'e:\Projects\VoiceCode\VCode\Config\py_std_sym.py'


Parsed symbols are: 
API_function: ['api function']
f_name: ['f name']
f_name2: ['f name 2']
float: ['float']
horiz_pos: ['horiz pos', 'horiz position', 'horiz positionning', 'horizontal pos', 'horizontal position', 'horizontal positionning', 'horizontally pos', 'horizontally position', 'horizontally positionning']
move: ['move']
move_horiz: ['move horiz', 'move horizontal', 'move horizontally']
move_vert: ['move vert', 'move vertical', 'move vertically']
this_sym_has_an_other_abbrev: ['this sym has an other abbrev', 'this symbol has an other abbrev']
this_sym_is_unres: ['this sym is unres', 'this symbol is unres']
this_sym_is_unres_too: ['this sym is unres too', 'this symbol is unres too']
void: ['void']
x: ['x']
y: ['y']
_cached_symbols_as_one_string is:
    void  move  float  x  y  move_horiz  move_vert  horiz_pos  this_sym_is_unres  this_sym_is_unres_too  this_sym_has_an_other_abbrev  f_name  f_name2  API_function 
Unresolved abbreviations are:
'abbrev': appears in ['this_sym_has_an_other_abbrev']
'f': appears in ['f_name', 'f_name2']
'unres': appears in ['this_sym_is_unres', 'this_sym_is_unres_too']

*** End of compilation test ***

*** Compiling symbols from file: e:\Projects\VoiceCode\VCode\Data\TestData\large_buff.py ***
Compiling symbols for file 'e:\Projects\VoiceCode\VCode\Config\py_std_sym.py'


Parsed symbols are: 
AttributeError: ['attribute error']
LargeNonObject: ['large non object']
LargeObject: ['large object']
Object: ['object']
SmallNonObject: ['small non object']
SmallObject: ['small object']
__bases__: ['bases']
__dict__: ['dict', 'dictionary']
__init__: ['init', 'initial', 'initialize', 'intial']
__name__: ['name']
a_base: ['a base']
add_test: ['add test']
age: ['age']
an_attr_def: ['an attr def', 'an attr definition', 'an attr default', 'an attr define', 'an attr defined', 'an attr deaf', 'an attribute def', 'an attribute definition', 'an attribute default', 'an attribute define', 'an attribute defined', 'an attribute deaf']
an_attr_init: ['an attr init', 'an attr initial', 'an attr initialize', 'an attr intial', 'an attribute init', 'an attribute initial', 'an attribute initialize', 'an attribute intial']
and: ['and']
attrs: ['attributes']
attrs_superclasses: ['attributes superclasses']
attrs_this_class: ['attributes this class']
autoTst: ['auto tst']
auto_test: ['auto test']
class: ['class']
code: ['code']
code_file: ['code file']
deep_construct: ['deep construct']
def: ['def', 'definition', 'default', 'define', 'defined', 'deaf']
else: ['else']
environ: ['environ', 'environment']
exc: ['exc', 'exception']
except: ['except']
exceptions: ['exceptions']
exclude_bases: ['exclude bases']
exec: ['exec', 'execute', 'executable']
execfile: ['execfile']
expandvars: ['expandvars']
for: ['for']
has_key: ['has key']
her_age: ['her age']
if: ['if']
import: ['import']
in: ['in']
index: ['index']
init_attrs: ['init attributes', 'initial attributes', 'initialize attributes', 'intial attributes']
items: ['items']
name: ['name']
not: ['not']
num_times: ['num times', 'number times']
obj: ['obj', 'object']
operation: ['operation']
os: ['os', 'operating system', 'o. s.']
pass: ['pass']
posixpath: ['posixpath']
profConstrLargeNonObj: ['prof constr large non obj', 'prof constr large non object', 'profile constr large non obj', 'profile constr large non object', 'profiling constr large non obj', 'profiling constr large non object', 'professional constr large non obj', 'professional constr large non object']
profConstrLargeObj: ['prof constr large obj', 'prof constr large object', 'profile constr large obj', 'profile constr large object', 'profiling constr large obj', 'profiling constr large object', 'professional constr large obj', 'professional constr large object']
profConstrSmallNonObj: ['prof constr small non obj', 'prof constr small non object', 'profile constr small non obj', 'profile constr small non object', 'profiling constr small non obj', 'profiling constr small non object', 'professional constr small non obj', 'professional constr small non object']
profConstrSmallObj: ['prof constr small obj', 'prof constr small object', 'profile constr small obj', 'profile constr small object', 'profiling constr small obj', 'profiling constr small object', 'professional constr small obj', 'professional constr small object']
profGetLargeNonObj: ['prof get large non obj', 'prof get large non object', 'profile get large non obj', 'profile get large non object', 'profiling get large non obj', 'profiling get large non object', 'professional get large non obj', 'professional get large non object']
profGetLargeObj: ['prof get large obj', 'prof get large object', 'profile get large obj', 'profile get large object', 'profiling get large obj', 'profiling get large object', 'professional get large obj', 'professional get large object']
profGetSmallNonObj: ['prof get small non obj', 'prof get small non object', 'profile get small non obj', 'profile get small non object', 'profiling get small non obj', 'profiling get small non object', 'professional get small non obj', 'professional get small non object']
profGetSmallObj: ['prof get small obj', 'prof get small object', 'profile get small obj', 'profile get small object', 'profiling get small obj', 'profiling get small object', 'professional get small obj', 'professional get small object']
profObject: ['prof object', 'profile object', 'profiling object', 'professional object']
profSetLargeNonObj: ['prof set large non obj', 'prof set large non object', 'profile set large non obj', 'profile set large non object', 'profiling set large non obj', 'profiling set large non object', 'professional set large non obj', 'professional set large non object']
profSetLargeObj: ['prof set large obj', 'prof set large object', 'profile set large obj', 'profile set large object', 'profiling set large obj', 'profiling set large object', 'professional set large obj', 'professional set large object']
profSetSmallNonObj: ['prof set small non obj', 'prof set small non object', 'profile set small non obj', 'profile set small non object', 'profiling set small non obj', 'profiling set small non object', 'professional set small non obj', 'professional set small non object']
profSetSmallObj: ['prof set small obj', 'prof set small object', 'profile set small obj', 'profile set small object', 'profiling set small obj', 'profiling set small object', 'professional set small obj', 'professional set small object']
prof_test: ['prof test', 'profile test', 'profiling test', 'professional test']
profile: ['profile']
range: ['range']
run: ['run']
self: ['self']
self_test: ['self test']
sep: ['sep', 'separator']
setattr: ['setattr']
stdout: ['stdout']
str: ['str', 'string']
sys: ['sys', 'system']
this_class: ['this class']
try: ['try']
try_attribute: ['try attribute']
write: ['write']
x: ['x']
_cached_symbols_as_one_string is:
    autoTst  import  auto_test  exceptions  os  posixpath  profile  sys  class  Object  if  environ  has_key  and  code_file  expandvars  sep  execfile  def  __init__  self  pass  deep_construct  this_class  attrs_this_class  attrs_superclasses  exclude_bases  for  a_base  in  __bases__  not  an_attr_def  items  __dict__  init_attrs  attrs  an_attr_init  setattr  SmallObject  name  age  LargeObject  SmallNonObject  LargeNonObject  profConstrSmallObj  num_times  index  range  obj  profConstrLargeObj  profConstrSmallNonObj  profConstrLargeNonObj  profGetSmallObj  her_age  profGetLargeObj  profGetSmallNonObj  profGetLargeNonObj  profSetSmallObj  profSetLargeObj  profSetSmallNonObj  profSetLargeNonObj  profObject  try_attribute  operation  stdout  write  code  else  x  try  exec  except  AttributeError  exc  str  prof_test  run  self_test  add_test  __name__ 
Unresolved abbreviations are:
'constr': appears in ['profConstrLargeNonObj', 'profConstrSmallObj', 'profConstrLargeObj', 'profConstrSmallNonObj']
'execfile': appears in ['execfile']
'expandvars': appears in ['expandvars']
'posixpath': appears in ['posixpath']
'setattr': appears in ['setattr']
'stdout': appears in ['stdout']
'superclasses': appears in ['attrs_superclasses']
'tst': appears in ['autoTst']

*** End of compilation test ***

*** Pseudo symbol match test***
   Source files are: ['e:\\Projects\\VoiceCode\\VCode\\Data\\TestData\\large_buff.py']
   Symbols are: ['set attribute', 'expand variables', 'execute file', 'profile Constructor Large Object', 'profile construct large object', 'auto test']


Compiling symbols for file 'e:\Projects\VoiceCode\VCode\Config\py_std_sym.py'
'set attribute' matches: [setattr, set_attribute, SetAttribute, setAttribute, SET_ATTRIBUTE, setattribute, SETATTRIBUTE, ]
'expand variables' matches: [expandvars, expand_variables, ExpandVariables, expandVariables, EXPAND_VARIABLES, expandvariables, EXPANDVARIABLES, ]
'execute file' matches: [execfile, execute_file, ExecuteFile, executeFile, EXECUTE_FILE, executefile, EXECUTEFILE, ]
'profile Constructor Large Object' matches: [profConstrLargeObj, profile_constructor_large_object, ProfileConstructorLargeObject, profileConstructorLargeObject, PROFILE_CONSTRUCTOR_LARGE_OBJECT, profileconstructorlargeobject, PROFILECONSTRUCTORLARGEOBJECT, ]
'profile construct large object' matches: [profConstrLargeObj, profile_construct_large_object, ProfileConstructLargeObject, profileConstructLargeObject, PROFILE_CONSTRUCT_LARGE_OBJECT, profileconstructlargeobject, PROFILECONSTRUCTLARGEOBJECT, ]
'auto test' matches: [auto_test, autoTst, AutoTest, autoTest, AUTO_TEST, autotest, AUTOTEST, ]

*** End of Pseudo Symbol Match test ***


*** Accept symbol match test. source='e:\Projects\VoiceCode\VCode\Data\TestData\small_buff.c' ***
Compiling symbols for file 'e:\Projects\VoiceCode\VCode\Config\py_std_sym.py'
Parsed symbols are: 
API_function: ['api function']
f_name: ['f name']
f_name2: ['f name 2']
float: ['float']
horiz_pos: ['horiz pos', 'horiz position', 'horiz positionning', 'horizontal pos', 'horizontal position', 'horizontal positionning', 'horizontally pos', 'horizontally position', 'horizontally positionning']
move: ['move']
move_horiz: ['move horiz', 'move horizontal', 'move horizontally']
move_vert: ['move vert', 'move vertical', 'move vertically']
this_sym_has_an_other_abbrev: ['this sym has an other abbrev', 'this symbol has an other abbrev']
this_sym_is_unres: ['this sym is unres', 'this symbol is unres']
this_sym_is_unres_too: ['this sym is unres too', 'this symbol is unres too']
void: ['void']
x: ['x']
y: ['y']
_cached_symbols_as_one_string is:
    void  move  float  x  y  move_horiz  move_vert  horiz_pos  this_sym_is_unres  this_sym_is_unres_too  this_sym_has_an_other_abbrev  f_name  f_name2  API_function 


Unresolved abbreviations are:
'abbrev': appears in ['this_sym_has_an_other_abbrev']
'f': appears in ['f_name', 'f_name2']
'unres': appears in ['this_sym_is_unres', 'this_sym_is_unres_too']


Accepting: 'this symbol is unresolved' -> 'this_sym_is_unres', 


After accepting those symbols, known symbols are:

API_function: ['api function']
f_name: ['f name']
f_name2: ['f name 2']
float: ['float']
horiz_pos: ['horiz pos', 'horiz position', 'horiz positionning', 'horizontal pos', 'horizontal position', 'horizontal positionning', 'horizontally pos', 'horizontally position', 'horizontally positionning']
move: ['move']
move_horiz: ['move horiz', 'move horizontal', 'move horizontally']
move_vert: ['move vert', 'move vertical', 'move vertically']
this_sym_has_an_other_abbrev: ['this sym has an other abbrev', 'this symbol has an other abbrev']
this_sym_is_unres: ['this sym is unres', 'this sym is unresolved', 'this symbol is unres', 'this symbol is unresolved']
this_sym_is_unres_too: ['this sym is unres too', 'this sym is unresolved too', 'this symbol is unres too', 'this symbol is unresolved too']
void: ['void']
x: ['x']
y: ['y']
_cached_symbols_as_one_string is:
    void  move  float  x  y  move_horiz  move_vert  horiz_pos  this_sym_is_unres  this_sym_is_unres_too  this_sym_has_an_other_abbrev  f_name  f_name2  API_function 


Unresolved abbreviations are:
'abbrev': appears in ['this_sym_has_an_other_abbrev']
'f': appears in ['f_name', 'f_name2']

*** End of accept symbol match test ***



*******************************************************************************
* Name        : automatic_abbreviations
* Description : testing automatic creation of abbreviations
*******************************************************************************

Compiling symbols for file 'e:\Projects\VoiceCode\VCode\Config\py_std_sym.py'


>>> Testing console command: open_file('D:/blah.c')

WARNING: source file 'D:/blah.c' doesn't exist.
*** Start of source buffer ***
<CURSOR>
*** End of source buffer ***


>>> Testing console command: compile_symbols(['e:\Projects\VoiceCode\VCode\Data\TestData\small_buff.c'])

Compiling symbols for file 'e:\Projects\VoiceCode\VCode\Data\TestData\small_buff.c'
>>> Known symbols are: 
API_function: ['api function']
f_name: ['f name']
f_name2: ['f name 2']
float: ['float']
horiz_pos: ['horiz pos', 'horiz position', 'horiz positionning', 'horizontal pos', 'horizontal position', 'horizontal positionning', 'horizontally pos', 'horizontally position', 'horizontally positionning']
move: ['move']
move_horiz: ['move horiz', 'move horizontal', 'move horizontally']
move_vert: ['move vert', 'move vertical', 'move vertically']
this_sym_has_an_other_abbrev: ['this sym has an other abbrev', 'this symbol has an other abbrev']
this_sym_is_unres: ['this sym is unres', 'this symbol is unres']
this_sym_is_unres_too: ['this sym is unres too', 'this symbol is unres too']
void: ['void']
x: ['x']
y: ['y']
_cached_symbols_as_one_string is:
    void  move  float  x  y  move_horiz  move_vert  horiz_pos  this_sym_is_unres  this_sym_is_unres_too  this_sym_has_an_other_abbrev  f_name  f_name2  API_function 


>>> Testing console command: print_abbreviations(1)

List of abbreviations

'abs' expands to ['absolute']
'addr' expands to ['address']
'alnum' expands to ['all numeric', 'all numberical']
'alt' expands to ['alternate', 'alternative']
'arg' expands to ['argument']
'argv' expands to ['arg v.', 'argument value']
'asc' expands to ['ascii']
'atan' expands to ['arc tangent']
'atof' expands to ['a. to f.']
'atol' expands to ['a. to l.']
'attr' expands to ['attribute']
'avail' expands to ['available']
'avg' expands to ['average']
'beg' expands to ['begin', 'beginning']
'bg' expands to ['back ground']
'blk' expands to ['block', 'blocking']
'buf' expands to ['buffer']
'buff' expands to ['buffer']
'builtin' expands to ['built in']
'calc' expands to ['calculate', 'calculated', 'calculation']
'cgi' expands to ['c. g. i.']
'char' expands to ['character']
'chdir' expands to ['change dir', 'change directory']
'chg' expands to ['change', 'changed']
'chmod' expands to ['change mode']
'chr' expands to ['character']
'clr' expands to ['clear']
'cmd' expands to ['command']
'cmp' expands to ['compare']
'cntrl' expands to ['control']
'col' expands to ['column']
'concat' expands to ['concatenate']
'cond' expands to ['condition']
'conf' expands to ['configure', 'configuration']
'config' expands to ['configuration', 'configure']
'conn' expands to ['connection', 'connected']
'cont' expands to ['control']
'cos' expands to ['co sine']
'cpp' expands to ['c. plus plus']
'ctl' expands to ['control']
'ctrl' expands to ['control']
'cur' expands to ['cursor', 'current']
'curr' expands to ['current']
'db' expands to ['d. b.', 'data base']
'decl' expands to ['declaration', 'declare']
'def' expands to ['definition', 'default', 'define', 'defined', 'deaf']
'delim' expands to ['delimiter']
'dev' expands to ['develop', 'development', 'device']
'dict' expands to ['dictionary']
'dir' expands to ['directory', 'direction']
'div' expands to ['divide']
'doc' expands to ['document', 'documentation']
'dom' expands to ['domain']
'dst' expands to ['distance']
'dtd' expands to ['d. t. d.']
'elem' expands to ['element']
'ent' expands to ['entry']
'env' expands to ['environment']
'environ' expands to ['environment']
'eol' expands to ['e. o. l.', 'end of line']
'eval' expands to ['e. val', 'evaluate']
'ex' expands to ['example']
'exc' expands to ['exception']
'exec' expands to ['execute', 'executable']
'expr' expands to ['expression']
'fg' expands to ['foreground']
'fifo' expands to ['first in first out']
'fmt' expands to ['format']
'fp' expands to ['file pointer']
'func' expands to ['function']
'gen' expands to ['general', 'generic']
'getattr' expands to ['get attribute']
'gid' expands to ['g. i. d.', 'group i. d.']
'glob' expands to ['global']
'goto' expands to ['go to']
'gr' expands to ['group']
'hex' expands to ['hexadecimal']
'horiz' expands to ['horizontal', 'horizontally']
'html' expands to ['h. t. m. l.']
'http' expands to ['h. t. t. p.']
'imap' expands to ['i. map']
'impl' expands to ['implementation']
'inc' expands to ['increment', 'include']
'incl' expands to ['include', 'included']
'info' expands to ['information']
'init' expands to ['initial', 'initialize', 'intial']
'ins' expands to ['insert']
'int' expands to ['integer']
'interp' expands to ['interpreter']
'intro' expands to ['introduction']
'io' expands to ['i. o.']
'ip' expands to ['i. p.']
'lambd' expands to ['lambda']
'len' expands to ['length']
'ln' expands to ['line']
'lnk' expands to ['link']
'loc' expands to ['location']
'login' expands to ['log in']
'mem' expands to ['memory']
'mk' expands to ['make']
'mnt' expands to ['mount', 'mounted']
'mod' expands to ['mode', 'modify']
'msec' expands to ['millisecond']
'msg' expands to ['message']
'mtime' expands to ['m. time']
'nam' expands to ['name']
'nntp' expands to ['n. n. t. p.']
'no' expands to ['number']
'num' expands to ['number']
'obj' expands to ['object']
'oct' expands to ['octal']
'opt' expands to ['optional', 'option', 'optimize']
'os' expands to ['operating system', 'o. s.']
'osf' expands to ['o. s. f.']
'par' expands to ['parameter']
'param' expands to ['parameter']
'pat' expands to ['pattern']
'perm' expands to ['permission']
'pkg' expands to ['package']
'pos' expands to ['position', 'positionning']
'prof' expands to ['profile', 'profiling', 'professional']
'proto' expands to ['prototype', 'protocol']
'pty' expands to ['p. t. y.']
'punct' expands to ['punctuation']
'py' expands to ['python', 'p. y.']
'rand' expands to ['random']
'rd' expands to ['read']
'rect' expands to ['rectangle']
'ref' expands to ['reference']
'reg' expands to ['regular', 'regular expression']
'regexp' expands to ['regular expression']
'rel' expands to ['relative']
'repr' expands to ['represent', 'representation']
'req' expands to ['request']
'rexp' expands to ['regular expression']
'rgb' expands to ['r. g. b.']
'rm' expands to ['remove']
'scr' expands to ['screen']
'sec' expands to ['second']
'sep' expands to ['separator']
'seq' expands to ['sequence']
'serv' expands to ['server']
'sig' expands to ['signal', 'special interest group']
'sin' expands to ['sine']
'smtp' expands to ['s. m. t. p.']
'sock' expands to ['socket']
'soundex' expands to ['soundex']
'spc' expands to ['space']
'src' expands to ['source']
'st' expands to ['standard']
'stat' expands to ['statistic', 'static']
'stdin' expands to ['s. t. d. in', 'standard input']
'str' expands to ['string']
'sub' expands to ['sub routine']
'sym' expands to ['symbol']
'sync' expands to ['synchronize']
'sys' expands to ['system']
'temp' expands to ['temporary']
'termid' expands to ['term i. d.', 'terminal i. d.']
'tmp' expands to ['temporary']
'tok' expands to ['token']
'trans' expands to ['transition', 'transport', 'transform', 'transformation']
'tty' expands to ['t. t. y.']
'uid' expands to ['u. i. d.', 'user i. d.']
'undef' expands to ['undefined']
'uniq' expands to ['unique']
'url' expands to ['u. r. l.']
'uu' expands to ['u. u.']
'var' expands to ['variable']
'vert' expands to ['vertical', 'vertically']
'win' expands to ['window']
'xml' expands to ['x. m. l.']


List of unresolved abbreviations

'f': appears in ['f_name', 'f_name2']
'abbrev': appears in ['this_sym_has_an_other_abbrev']
'unres': appears in ['this_sym_is_unres', 'this_sym_is_unres_too']


>>> Testing console command: say(['this', 'symbol', 'is', 'unresolved', ', \\comma'], user_input='1\n')
Associate 'this symbol is unresolved' with symbol (Enter selection):

  '0': no association
  '1': this_sym_is_unres
  '2': this_symbol_is_unresolved (*new*)
  '3': ThisSymbolIsUnresolved (*new*)
  '4': thisSymbolIsUnresolved (*new*)
  '5': THIS_SYMBOL_IS_UNRESOLVED (*new*)
  '6': thissymbolisunresolved (*new*)
  '7': THISSYMBOLISUNRESOLVED (*new*)

> *** Start of source buffer ***
  1:    this_sym_is_unres, <CURSOR>
*** End of source buffer ***


>>> Testing console command: print_abbreviations(1)

List of abbreviations

'abs' expands to ['absolute']
'addr' expands to ['address']
'alnum' expands to ['all numeric', 'all numberical']
'alt' expands to ['alternate', 'alternative']
'arg' expands to ['argument']
'argv' expands to ['arg v.', 'argument value']
'asc' expands to ['ascii']
'atan' expands to ['arc tangent']
'atof' expands to ['a. to f.']
'atol' expands to ['a. to l.']
'attr' expands to ['attribute']
'avail' expands to ['available']
'avg' expands to ['average']
'beg' expands to ['begin', 'beginning']
'bg' expands to ['back ground']
'blk' expands to ['block', 'blocking']
'buf' expands to ['buffer']
'buff' expands to ['buffer']
'builtin' expands to ['built in']
'calc' expands to ['calculate', 'calculated', 'calculation']
'cgi' expands to ['c. g. i.']
'char' expands to ['character']
'chdir' expands to ['change dir', 'change directory']
'chg' expands to ['change', 'changed']
'chmod' expands to ['change mode']
'chr' expands to ['character']
'clr' expands to ['clear']
'cmd' expands to ['command']
'cmp' expands to ['compare']
'cntrl' expands to ['control']
'col' expands to ['column']
'concat' expands to ['concatenate']
'cond' expands to ['condition']
'conf' expands to ['configure', 'configuration']
'config' expands to ['configuration', 'configure']
'conn' expands to ['connection', 'connected']
'cont' expands to ['control']
'cos' expands to ['co sine']
'cpp' expands to ['c. plus plus']
'ctl' expands to ['control']
'ctrl' expands to ['control']
'cur' expands to ['cursor', 'current']
'curr' expands to ['current']
'db' expands to ['d. b.', 'data base']
'decl' expands to ['declaration', 'declare']
'def' expands to ['definition', 'default', 'define', 'defined', 'deaf']
'delim' expands to ['delimiter']
'dev' expands to ['develop', 'development', 'device']
'dict' expands to ['dictionary']
'dir' expands to ['directory', 'direction']
'div' expands to ['divide']
'doc' expands to ['document', 'documentation']
'dom' expands to ['domain']
'dst' expands to ['distance']
'dtd' expands to ['d. t. d.']
'elem' expands to ['element']
'ent' expands to ['entry']
'env' expands to ['environment']
'environ' expands to ['environment']
'eol' expands to ['e. o. l.', 'end of line']
'eval' expands to ['e. val', 'evaluate']
'ex' expands to ['example']
'exc' expands to ['exception']
'exec' expands to ['execute', 'executable']
'expr' expands to ['expression']
'fg' expands to ['foreground']
'fifo' expands to ['first in first out']
'fmt' expands to ['format']
'fp' expands to ['file pointer']
'func' expands to ['function']
'gen' expands to ['general', 'generic']
'getattr' expands to ['get attribute']
'gid' expands to ['g. i. d.', 'group i. d.']
'glob' expands to ['global']
'goto' expands to ['go to']
'gr' expands to ['group']
'hex' expands to ['hexadecimal']
'horiz' expands to ['horizontal', 'horizontally']
'html' expands to ['h. t. m. l.']
'http' expands to ['h. t. t. p.']
'imap' expands to ['i. map']
'impl' expands to ['implementation']
'inc' expands to ['increment', 'include']
'incl' expands to ['include', 'included']
'info' expands to ['information']
'init' expands to ['initial', 'initialize', 'intial']
'ins' expands to ['insert']
'int' expands to ['integer']
'interp' expands to ['interpreter']
'intro' expands to ['introduction']
'io' expands to ['i. o.']
'ip' expands to ['i. p.']
'lambd' expands to ['lambda']
'len' expands to ['length']
'ln' expands to ['line']
'lnk' expands to ['link']
'loc' expands to ['location']
'login' expands to ['log in']
'mem' expands to ['memory']
'mk' expands to ['make']
'mnt' expands to ['mount', 'mounted']
'mod' expands to ['mode', 'modify']
'msec' expands to ['millisecond']
'msg' expands to ['message']
'mtime' expands to ['m. time']
'nam' expands to ['name']
'nntp' expands to ['n. n. t. p.']
'no' expands to ['number']
'num' expands to ['number']
'obj' expands to ['object']
'oct' expands to ['octal']
'opt' expands to ['optional', 'option', 'optimize']
'os' expands to ['operating system', 'o. s.']
'osf' expands to ['o. s. f.']
'par' expands to ['parameter']
'param' expands to ['parameter']
'pat' expands to ['pattern']
'perm' expands to ['permission']
'pkg' expands to ['package']
'pos' expands to ['position', 'positionning']
'prof' expands to ['profile', 'profiling', 'professional']
'proto' expands to ['prototype', 'protocol']
'pty' expands to ['p. t. y.']
'punct' expands to ['punctuation']
'py' expands to ['python', 'p. y.']
'rand' expands to ['random']
'rd' expands to ['read']
'rect' expands to ['rectangle']
'ref' expands to ['reference']
'reg' expands to ['regular', 'regular expression']
'regexp' expands to ['regular expression']
'rel' expands to ['relative']
'repr' expands to ['represent', 'representation']
'req' expands to ['request']
'rexp' expands to ['regular expression']
'rgb' expands to ['r. g. b.']
'rm' expands to ['remove']
'scr' expands to ['screen']
'sec' expands to ['second']
'sep' expands to ['separator']
'seq' expands to ['sequence']
'serv' expands to ['server']
'sig' expands to ['signal', 'special interest group']
'sin' expands to ['sine']
'smtp' expands to ['s. m. t. p.']
'sock' expands to ['socket']
'soundex' expands to ['soundex']
'spc' expands to ['space']
'src' expands to ['source']
'st' expands to ['standard']
'stat' expands to ['statistic', 'static']
'stdin' expands to ['s. t. d. in', 'standard input']
'str' expands to ['string']
'sub' expands to ['sub routine']
'sym' expands to ['symbol']
'sync' expands to ['synchronize']
'sys' expands to ['system']
'temp' expands to ['temporary']
'termid' expands to ['term i. d.', 'terminal i. d.']
'tmp' expands to ['temporary']
'tok' expands to ['token']
'trans' expands to ['transition', 'transport', 'transform', 'transformation']
'tty' expands to ['t. t. y.']
'uid' expands to ['u. i. d.', 'user i. d.']
'undef' expands to ['undefined']
'uniq' expands to ['unique']
'unres' expands to ['unresolved']
'url' expands to ['u. r. l.']
'uu' expands to ['u. u.']
'var' expands to ['variable']
'vert' expands to ['vertical', 'vertically']
'win' expands to ['window']
'xml' expands to ['x. m. l.']


List of unresolved abbreviations

'f': appears in ['f_name', 'f_name2']
'abbrev': appears in ['this_sym_has_an_other_abbrev']


>>> Testing console command: print_symbols()

API_function: ['api function']
f_name: ['f name']
f_name2: ['f name 2']
float: ['float']
horiz_pos: ['horiz pos', 'horiz position', 'horiz positionning', 'horizontal pos', 'horizontal position', 'horizontal positionning', 'horizontally pos', 'horizontally position', 'horizontally positionning']
move: ['move']
move_horiz: ['move horiz', 'move horizontal', 'move horizontally']
move_vert: ['move vert', 'move vertical', 'move vertically']
this_sym_has_an_other_abbrev: ['this sym has an other abbrev', 'this symbol has an other abbrev']
this_sym_is_unres: ['this sym is unres', 'this sym is unresolved', 'this symbol is unres', 'this symbol is unresolved']
this_sym_is_unres_too: ['this sym is unres too', 'this sym is unresolved too', 'this symbol is unres too', 'this symbol is unresolved too']
void: ['void']
x: ['x']
y: ['y']
_cached_symbols_as_one_string is:
    void  move  float  x  y  move_horiz  move_vert  horiz_pos  this_sym_is_unres  this_sym_is_unres_too  this_sym_has_an_other_abbrev  f_name  f_name2  API_function 


>>> Testing console command: say(['this_sym_is_unres_too\\this symbol is unresolved too', ', \\comma'], user_input='None')
*** Start of source buffer ***
  1:    this_sym_is_unres, this_sym_is_unres_too, <CURSOR>
*** End of source buffer ***


>>> Testing console command: print_symbols()

API_function: ['api function']
f_name: ['f name']
f_name2: ['f name 2']
float: ['float']
horiz_pos: ['horiz pos', 'horiz position', 'horiz positionning', 'horizontal pos', 'horizontal position', 'horizontal positionning', 'horizontally pos', 'horizontally position', 'horizontally positionning']
move: ['move']
move_horiz: ['move horiz', 'move horizontal', 'move horizontally']
move_vert: ['move vert', 'move vertical', 'move vertically']
this_sym_has_an_other_abbrev: ['this sym has an other abbrev', 'this symbol has an other abbrev']
this_sym_is_unres: ['this sym is unres', 'this sym is unresolved', 'this symbol is unres', 'this symbol is unresolved']
this_sym_is_unres_too: ['this sym is unres too', 'this sym is unresolved too', 'this symbol is unres too', 'this symbol is unresolved too']
void: ['void']
x: ['x']
y: ['y']
_cached_symbols_as_one_string is:
    void  move  float  x  y  move_horiz  move_vert  horiz_pos  this_sym_is_unres  this_sym_is_unres_too  this_sym_has_an_other_abbrev  f_name  f_name2  API_function 


>>> Testing console command: print_abbreviations(1)

List of abbreviations

'abs' expands to ['absolute']
'addr' expands to ['address']
'alnum' expands to ['all numeric', 'all numberical']
'alt' expands to ['alternate', 'alternative']
'arg' expands to ['argument']
'argv' expands to ['arg v.', 'argument value']
'asc' expands to ['ascii']
'atan' expands to ['arc tangent']
'atof' expands to ['a. to f.']
'atol' expands to ['a. to l.']
'attr' expands to ['attribute']
'avail' expands to ['available']
'avg' expands to ['average']
'beg' expands to ['begin', 'beginning']
'bg' expands to ['back ground']
'blk' expands to ['block', 'blocking']
'buf' expands to ['buffer']
'buff' expands to ['buffer']
'builtin' expands to ['built in']
'calc' expands to ['calculate', 'calculated', 'calculation']
'cgi' expands to ['c. g. i.']
'char' expands to ['character']
'chdir' expands to ['change dir', 'change directory']
'chg' expands to ['change', 'changed']
'chmod' expands to ['change mode']
'chr' expands to ['character']
'clr' expands to ['clear']
'cmd' expands to ['command']
'cmp' expands to ['compare']
'cntrl' expands to ['control']
'col' expands to ['column']
'concat' expands to ['concatenate']
'cond' expands to ['condition']
'conf' expands to ['configure', 'configuration']
'config' expands to ['configuration', 'configure']
'conn' expands to ['connection', 'connected']
'cont' expands to ['control']
'cos' expands to ['co sine']
'cpp' expands to ['c. plus plus']
'ctl' expands to ['control']
'ctrl' expands to ['control']
'cur' expands to ['cursor', 'current']
'curr' expands to ['current']
'db' expands to ['d. b.', 'data base']
'decl' expands to ['declaration', 'declare']
'def' expands to ['definition', 'default', 'define', 'defined', 'deaf']
'delim' expands to ['delimiter']
'dev' expands to ['develop', 'development', 'device']
'dict' expands to ['dictionary']
'dir' expands to ['directory', 'direction']
'div' expands to ['divide']
'doc' expands to ['document', 'documentation']
'dom' expands to ['domain']
'dst' expands to ['distance']
'dtd' expands to ['d. t. d.']
'elem' expands to ['element']
'ent' expands to ['entry']
'env' expands to ['environment']
'environ' expands to ['environment']
'eol' expands to ['e. o. l.', 'end of line']
'eval' expands to ['e. val', 'evaluate']
'ex' expands to ['example']
'exc' expands to ['exception']
'exec' expands to ['execute', 'executable']
'expr' expands to ['expression']
'fg' expands to ['foreground']
'fifo' expands to ['first in first out']
'fmt' expands to ['format']
'fp' expands to ['file pointer']
'func' expands to ['function']
'gen' expands to ['general', 'generic']
'getattr' expands to ['get attribute']
'gid' expands to ['g. i. d.', 'group i. d.']
'glob' expands to ['global']
'goto' expands to ['go to']
'gr' expands to ['group']
'hex' expands to ['hexadecimal']
'horiz' expands to ['horizontal', 'horizontally']
'html' expands to ['h. t. m. l.']
'http' expands to ['h. t. t. p.']
'imap' expands to ['i. map']
'impl' expands to ['implementation']
'inc' expands to ['increment', 'include']
'incl' expands to ['include', 'included']
'info' expands to ['information']
'init' expands to ['initial', 'initialize', 'intial']
'ins' expands to ['insert']
'int' expands to ['integer']
'interp' expands to ['interpreter']
'intro' expands to ['introduction']
'io' expands to ['i. o.']
'ip' expands to ['i. p.']
'lambd' expands to ['lambda']
'len' expands to ['length']
'ln' expands to ['line']
'lnk' expands to ['link']
'loc' expands to ['location']
'login' expands to ['log in']
'mem' expands to ['memory']
'mk' expands to ['make']
'mnt' expands to ['mount', 'mounted']
'mod' expands to ['mode', 'modify']
'msec' expands to ['millisecond']
'msg' expands to ['message']
'mtime' expands to ['m. time']
'nam' expands to ['name']
'nntp' expands to ['n. n. t. p.']
'no' expands to ['number']
'num' expands to ['number']
'obj' expands to ['object']
'oct' expands to ['octal']
'opt' expands to ['optional', 'option', 'optimize']
'os' expands to ['operating system', 'o. s.']
'osf' expands to ['o. s. f.']
'par' expands to ['parameter']
'param' expands to ['parameter']
'pat' expands to ['pattern']
'perm' expands to ['permission']
'pkg' expands to ['package']
'pos' expands to ['position', 'positionning']
'prof' expands to ['profile', 'profiling', 'professional']
'proto' expands to ['prototype', 'protocol']
'pty' expands to ['p. t. y.']
'punct' expands to ['punctuation']
'py' expands to ['python', 'p. y.']
'rand' expands to ['random']
'rd' expands to ['read']
'rect' expands to ['rectangle']
'ref' expands to ['reference']
'reg' expands to ['regular', 'regular expression']
'regexp' expands to ['regular expression']
'rel' expands to ['relative']
'repr' expands to ['represent', 'representation']
'req' expands to ['request']
'rexp' expands to ['regular expression']
'rgb' expands to ['r. g. b.']
'rm' expands to ['remove']
'scr' expands to ['screen']
'sec' expands to ['second']
'sep' expands to ['separator']
'seq' expands to ['sequence']
'serv' expands to ['server']
'sig' expands to ['signal', 'special interest group']
'sin' expands to ['sine']
'smtp' expands to ['s. m. t. p.']
'sock' expands to ['socket']
'soundex' expands to ['soundex']
'spc' expands to ['space']
'src' expands to ['source']
'st' expands to ['standard']
'stat' expands to ['statistic', 'static']
'stdin' expands to ['s. t. d. in', 'standard input']
'str' expands to ['string']
'sub' expands to ['sub routine']
'sym' expands to ['symbol']
'sync' expands to ['synchronize']
'sys' expands to ['system']
'temp' expands to ['temporary']
'termid' expands to ['term i. d.', 'terminal i. d.']
'tmp' expands to ['temporary']
'tok' expands to ['token']
'trans' expands to ['transition', 'transport', 'transform', 'transformation']
'tty' expands to ['t. t. y.']
'uid' expands to ['u. i. d.', 'user i. d.']
'undef' expands to ['undefined']
'uniq' expands to ['unique']
'unres' expands to ['unresolved']
'url' expands to ['u. r. l.']
'uu' expands to ['u. u.']
'var' expands to ['variable']
'vert' expands to ['vertical', 'vertically']
'win' expands to ['window']
'xml' expands to ['x. m. l.']


List of unresolved abbreviations

'f': appears in ['f_name', 'f_name2']
'abbrev': appears in ['this_sym_has_an_other_abbrev']


>>> Testing console command: say(['file', 'name', ', \\comma'], user_input='1\n')
Associate 'file name' with symbol (Enter selection):

  '0': no association
  '1': f_name
  '2': file_name (*new*)
  '3': FileName (*new*)
  '4': fileName (*new*)
  '5': FILE_NAME (*new*)
  '6': filename (*new*)
  '7': FILENAME (*new*)

> WARNING: abbreviation 'f' not added (length < 2)
*** Start of source buffer ***
  1:    this_sym_is_unres, this_sym_is_unres_too, f_name, <CURSOR>
*** End of source buffer ***


>>> Testing console command: print_symbols()

API_function: ['api function']
f_name: ['f name']
f_name2: ['f name 2']
float: ['float']
horiz_pos: ['horiz pos', 'horiz position', 'horiz positionning', 'horizontal pos', 'horizontal position', 'horizontal positionning', 'horizontally pos', 'horizontally position', 'horizontally positionning']
move: ['move']
move_horiz: ['move horiz', 'move horizontal', 'move horizontally']
move_vert: ['move vert', 'move vertical', 'move vertically']
this_sym_has_an_other_abbrev: ['this sym has an other abbrev', 'this symbol has an other abbrev']
this_sym_is_unres: ['this sym is unres', 'this sym is unresolved', 'this symbol is unres', 'this symbol is unresolved']
this_sym_is_unres_too: ['this sym is unres too', 'this sym is unresolved too', 'this symbol is unres too', 'this symbol is unresolved too']
void: ['void']
x: ['x']
y: ['y']
_cached_symbols_as_one_string is:
    void  move  float  x  y  move_horiz  move_vert  horiz_pos  this_sym_is_unres  this_sym_is_unres_too  this_sym_has_an_other_abbrev  f_name  f_name2  API_function 


>>> Testing console command: print_abbreviations(1)

List of abbreviations

'abs' expands to ['absolute']
'addr' expands to ['address']
'alnum' expands to ['all numeric', 'all numberical']
'alt' expands to ['alternate', 'alternative']
'arg' expands to ['argument']
'argv' expands to ['arg v.', 'argument value']
'asc' expands to ['ascii']
'atan' expands to ['arc tangent']
'atof' expands to ['a. to f.']
'atol' expands to ['a. to l.']
'attr' expands to ['attribute']
'avail' expands to ['available']
'avg' expands to ['average']
'beg' expands to ['begin', 'beginning']
'bg' expands to ['back ground']
'blk' expands to ['block', 'blocking']
'buf' expands to ['buffer']
'buff' expands to ['buffer']
'builtin' expands to ['built in']
'calc' expands to ['calculate', 'calculated', 'calculation']
'cgi' expands to ['c. g. i.']
'char' expands to ['character']
'chdir' expands to ['change dir', 'change directory']
'chg' expands to ['change', 'changed']
'chmod' expands to ['change mode']
'chr' expands to ['character']
'clr' expands to ['clear']
'cmd' expands to ['command']
'cmp' expands to ['compare']
'cntrl' expands to ['control']
'col' expands to ['column']
'concat' expands to ['concatenate']
'cond' expands to ['condition']
'conf' expands to ['configure', 'configuration']
'config' expands to ['configuration', 'configure']
'conn' expands to ['connection', 'connected']
'cont' expands to ['control']
'cos' expands to ['co sine']
'cpp' expands to ['c. plus plus']
'ctl' expands to ['control']
'ctrl' expands to ['control']
'cur' expands to ['cursor', 'current']
'curr' expands to ['current']
'db' expands to ['d. b.', 'data base']
'decl' expands to ['declaration', 'declare']
'def' expands to ['definition', 'default', 'define', 'defined', 'deaf']
'delim' expands to ['delimiter']
'dev' expands to ['develop', 'development', 'device']
'dict' expands to ['dictionary']
'dir' expands to ['directory', 'direction']
'div' expands to ['divide']
'doc' expands to ['document', 'documentation']
'dom' expands to ['domain']
'dst' expands to ['distance']
'dtd' expands to ['d. t. d.']
'elem' expands to ['element']
'ent' expands to ['entry']
'env' expands to ['environment']
'environ' expands to ['environment']
'eol' expands to ['e. o. l.', 'end of line']
'eval' expands to ['e. val', 'evaluate']
'ex' expands to ['example']
'exc' expands to ['exception']
'exec' expands to ['execute', 'executable']
'expr' expands to ['expression']
'fg' expands to ['foreground']
'fifo' expands to ['first in first out']
'fmt' expands to ['format']
'fp' expands to ['file pointer']
'func' expands to ['function']
'gen' expands to ['general', 'generic']
'getattr' expands to ['get attribute']
'gid' expands to ['g. i. d.', 'group i. d.']
'glob' expands to ['global']
'goto' expands to ['go to']
'gr' expands to ['group']
'hex' expands to ['hexadecimal']
'horiz' expands to ['horizontal', 'horizontally']
'html' expands to ['h. t. m. l.']
'http' expands to ['h. t. t. p.']
'imap' expands to ['i. map']
'impl' expands to ['implementation']
'inc' expands to ['increment', 'include']
'incl' expands to ['include', 'included']
'info' expands to ['information']
'init' expands to ['initial', 'initialize', 'intial']
'ins' expands to ['insert']
'int' expands to ['integer']
'interp' expands to ['interpreter']
'intro' expands to ['introduction']
'io' expands to ['i. o.']
'ip' expands to ['i. p.']
'lambd' expands to ['lambda']
'len' expands to ['length']
'ln' expands to ['line']
'lnk' expands to ['link']
'loc' expands to ['location']
'login' expands to ['log in']
'mem' expands to ['memory']
'mk' expands to ['make']
'mnt' expands to ['mount', 'mounted']
'mod' expands to ['mode', 'modify']
'msec' expands to ['millisecond']
'msg' expands to ['message']
'mtime' expands to ['m. time']
'nam' expands to ['name']
'nntp' expands to ['n. n. t. p.']
'no' expands to ['number']
'num' expands to ['number']
'obj' expands to ['object']
'oct' expands to ['octal']
'opt' expands to ['optional', 'option', 'optimize']
'os' expands to ['operating system', 'o. s.']
'osf' expands to ['o. s. f.']
'par' expands to ['parameter']
'param' expands to ['parameter']
'pat' expands to ['pattern']
'perm' expands to ['permission']
'pkg' expands to ['package']
'pos' expands to ['position', 'positionning']
'prof' expands to ['profile', 'profiling', 'professional']
'proto' expands to ['prototype', 'protocol']
'pty' expands to ['p. t. y.']
'punct' expands to ['punctuation']
'py' expands to ['python', 'p. y.']
'rand' expands to ['random']
'rd' expands to ['read']
'rect' expands to ['rectangle']
'ref' expands to ['reference']
'reg' expands to ['regular', 'regular expression']
'regexp' expands to ['regular expression']
'rel' expands to ['relative']
'repr' expands to ['represent', 'representation']
'req' expands to ['request']
'rexp' expands to ['regular expression']
'rgb' expands to ['r. g. b.']
'rm' expands to ['remove']
'scr' expands to ['screen']
'sec' expands to ['second']
'sep' expands to ['separator']
'seq' expands to ['sequence']
'serv' expands to ['server']
'sig' expands to ['signal', 'special interest group']
'sin' expands to ['sine']
'smtp' expands to ['s. m. t. p.']
'sock' expands to ['socket']
'soundex' expands to ['soundex']
'spc' expands to ['space']
'src' expands to ['source']
'st' expands to ['standard']
'stat' expands to ['statistic', 'static']
'stdin' expands to ['s. t. d. in', 'standard input']
'str' expands to ['string']
'sub' expands to ['sub routine']
'sym' expands to ['symbol']
'sync' expands to ['synchronize']
'sys' expands to ['system']
'temp' expands to ['temporary']
'termid' expands to ['term i. d.', 'terminal i. d.']
'tmp' expands to ['temporary']
'tok' expands to ['token']
'trans' expands to ['transition', 'transport', 'transform', 'transformation']
'tty' expands to ['t. t. y.']
'uid' expands to ['u. i. d.', 'user i. d.']
'undef' expands to ['undefined']
'uniq' expands to ['unique']
'unres' expands to ['unresolved']
'url' expands to ['u. r. l.']
'uu' expands to ['u. u.']
'var' expands to ['variable']
'vert' expands to ['vertical', 'vertically']
'win' expands to ['window']
'xml' expands to ['x. m. l.']


List of unresolved abbreviations

'f': appears in ['f_name', 'f_name2']
'abbrev': appears in ['this_sym_has_an_other_abbrev']


>>> Testing console command: say(['application', 'programming', 'interface', 'function', ', \\comma'], user_input='1\n')
Associate 'application programming interface function' with symbol (Enter selection):

  '0': no association
  '1': API_function
  '2': application_programming_interface_function (*new*)
  '3': ApplicationProgrammingInterfaceFunction (*new*)
  '4': applicationProgrammingInterfaceFunction (*new*)
  '5': APPLICATION_PROGRAMMING_INTERFACE_FUNCTION (*new*)
  '6': applicationprogramminginterfacefunction (*new*)
  '7': APPLICATIONPROGRAMMINGINTERFACEFUNCTION (*new*)

> *** Start of source buffer ***
  1:    this_sym_is_unres, this_sym_is_unres_too, f_name, API_function, <CURSOR>
*** End of source buffer ***


>>> Testing console command: print_abbreviations(1)

List of abbreviations

'abs' expands to ['absolute']
'addr' expands to ['address']
'alnum' expands to ['all numeric', 'all numberical']
'alt' expands to ['alternate', 'alternative']
'api' expands to ['application programming interface']
'arg' expands to ['argument']
'argv' expands to ['arg v.', 'argument value']
'asc' expands to ['ascii']
'atan' expands to ['arc tangent']
'atof' expands to ['a. to f.']
'atol' expands to ['a. to l.']
'attr' expands to ['attribute']
'avail' expands to ['available']
'avg' expands to ['average']
'beg' expands to ['begin', 'beginning']
'bg' expands to ['back ground']
'blk' expands to ['block', 'blocking']
'buf' expands to ['buffer']
'buff' expands to ['buffer']
'builtin' expands to ['built in']
'calc' expands to ['calculate', 'calculated', 'calculation']
'cgi' expands to ['c. g. i.']
'char' expands to ['character']
'chdir' expands to ['change dir', 'change directory']
'chg' expands to ['change', 'changed']
'chmod' expands to ['change mode']
'chr' expands to ['character']
'clr' expands to ['clear']
'cmd' expands to ['command']
'cmp' expands to ['compare']
'cntrl' expands to ['control']
'col' expands to ['column']
'concat' expands to ['concatenate']
'cond' expands to ['condition']
'conf' expands to ['configure', 'configuration']
'config' expands to ['configuration', 'configure']
'conn' expands to ['connection', 'connected']
'cont' expands to ['control']
'cos' expands to ['co sine']
'cpp' expands to ['c. plus plus']
'ctl' expands to ['control']
'ctrl' expands to ['control']
'cur' expands to ['cursor', 'current']
'curr' expands to ['current']
'db' expands to ['d. b.', 'data base']
'decl' expands to ['declaration', 'declare']
'def' expands to ['definition', 'default', 'define', 'defined', 'deaf']
'delim' expands to ['delimiter']
'dev' expands to ['develop', 'development', 'device']
'dict' expands to ['dictionary']
'dir' expands to ['directory', 'direction']
'div' expands to ['divide']
'doc' expands to ['document', 'documentation']
'dom' expands to ['domain']
'dst' expands to ['distance']
'dtd' expands to ['d. t. d.']
'elem' expands to ['element']
'ent' expands to ['entry']
'env' expands to ['environment']
'environ' expands to ['environment']
'eol' expands to ['e. o. l.', 'end of line']
'eval' expands to ['e. val', 'evaluate']
'ex' expands to ['example']
'exc' expands to ['exception']
'exec' expands to ['execute', 'executable']
'expr' expands to ['expression']
'fg' expands to ['foreground']
'fifo' expands to ['first in first out']
'fmt' expands to ['format']
'fp' expands to ['file pointer']
'func' expands to ['function']
'gen' expands to ['general', 'generic']
'getattr' expands to ['get attribute']
'gid' expands to ['g. i. d.', 'group i. d.']
'glob' expands to ['global']
'goto' expands to ['go to']
'gr' expands to ['group']
'hex' expands to ['hexadecimal']
'horiz' expands to ['horizontal', 'horizontally']
'html' expands to ['h. t. m. l.']
'http' expands to ['h. t. t. p.']
'imap' expands to ['i. map']
'impl' expands to ['implementation']
'inc' expands to ['increment', 'include']
'incl' expands to ['include', 'included']
'info' expands to ['information']
'init' expands to ['initial', 'initialize', 'intial']
'ins' expands to ['insert']
'int' expands to ['integer']
'interp' expands to ['interpreter']
'intro' expands to ['introduction']
'io' expands to ['i. o.']
'ip' expands to ['i. p.']
'lambd' expands to ['lambda']
'len' expands to ['length']
'ln' expands to ['line']
'lnk' expands to ['link']
'loc' expands to ['location']
'login' expands to ['log in']
'mem' expands to ['memory']
'mk' expands to ['make']
'mnt' expands to ['mount', 'mounted']
'mod' expands to ['mode', 'modify']
'msec' expands to ['millisecond']
'msg' expands to ['message']
'mtime' expands to ['m. time']
'nam' expands to ['name']
'nntp' expands to ['n. n. t. p.']
'no' expands to ['number']
'num' expands to ['number']
'obj' expands to ['object']
'oct' expands to ['octal']
'opt' expands to ['optional', 'option', 'optimize']
'os' expands to ['operating system', 'o. s.']
'osf' expands to ['o. s. f.']
'par' expands to ['parameter']
'param' expands to ['parameter']
'pat' expands to ['pattern']
'perm' expands to ['permission']
'pkg' expands to ['package']
'pos' expands to ['position', 'positionning']
'prof' expands to ['profile', 'profiling', 'professional']
'proto' expands to ['prototype', 'protocol']
'pty' expands to ['p. t. y.']
'punct' expands to ['punctuation']
'py' expands to ['python', 'p. y.']
'rand' expands to ['random']
'rd' expands to ['read']
'rect' expands to ['rectangle']
'ref' expands to ['reference']
'reg' expands to ['regular', 'regular expression']
'regexp' expands to ['regular expression']
'rel' expands to ['relative']
'repr' expands to ['represent', 'representation']
'req' expands to ['request']
'rexp' expands to ['regular expression']
'rgb' expands to ['r. g. b.']
'rm' expands to ['remove']
'scr' expands to ['screen']
'sec' expands to ['second']
'sep' expands to ['separator']
'seq' expands to ['sequence']
'serv' expands to ['server']
'sig' expands to ['signal', 'special interest group']
'sin' expands to ['sine']
'smtp' expands to ['s. m. t. p.']
'sock' expands to ['socket']
'soundex' expands to ['soundex']
'spc' expands to ['space']
'src' expands to ['source']
'st' expands to ['standard']
'stat' expands to ['statistic', 'static']
'stdin' expands to ['s. t. d. in', 'standard input']
'str' expands to ['string']
'sub' expands to ['sub routine']
'sym' expands to ['symbol']
'sync' expands to ['synchronize']
'sys' expands to ['system']
'temp' expands to ['temporary']
'termid' expands to ['term i. d.', 'terminal i. d.']
'tmp' expands to ['temporary']
'tok' expands to ['token']
'trans' expands to ['transition', 'transport', 'transform', 'transformation']
'tty' expands to ['t. t. y.']
'uid' expands to ['u. i. d.', 'user i. d.']
'undef' expands to ['undefined']
'uniq' expands to ['unique']
'unres' expands to ['unresolved']
'url' expands to ['u. r. l.']
'uu' expands to ['u. u.']
'var' expands to ['variable']
'vert' expands to ['vertical', 'vertically']
'win' expands to ['window']
'xml' expands to ['x. m. l.']


List of unresolved abbreviations

'f': appears in ['f_name', 'f_name2']
'abbrev': appears in ['this_sym_has_an_other_abbrev']


*******************************************************************************
* Name        : mediator_console
* Description : testing mediator console commands
*******************************************************************************

Compiling symbols for file 'e:\Projects\VoiceCode\VCode\Config\py_std_sym.py'
Compiling symbols for file 'e:\Projects\VoiceCode\VCode\Config\py_std_sym.py'


>>> Testing console command: clear_symbols()    

Compiling symbols for file 'e:\Projects\VoiceCode\VCode\Config\py_std_sym.py'


>>> Testing console command: open_file('D:/blah.c')

WARNING: source file 'D:/blah.c' doesn't exist.
*** Start of source buffer ***
<CURSOR>
*** End of source buffer ***
List of abbreviations

'abs' expands to ['absolute']
'addr' expands to ['address']
'alnum' expands to ['all numeric', 'all numberical']
'alt' expands to ['alternate', 'alternative']
'arg' expands to ['argument']
'argv' expands to ['arg v.', 'argument value']
'asc' expands to ['ascii']
'atan' expands to ['arc tangent']
'atof' expands to ['a. to f.']
'atol' expands to ['a. to l.']
'attr' expands to ['attribute']
'avail' expands to ['available']
'avg' expands to ['average']
'beg' expands to ['begin', 'beginning']
'bg' expands to ['back ground']
'blk' expands to ['block', 'blocking']
'buf' expands to ['buffer']
'buff' expands to ['buffer']
'builtin' expands to ['built in']
'calc' expands to ['calculate', 'calculated', 'calculation']
'cgi' expands to ['c. g. i.']
'char' expands to ['character']
'chdir' expands to ['change dir', 'change directory']
'chg' expands to ['change', 'changed']
'chmod' expands to ['change mode']
'chr' expands to ['character']
'clr' expands to ['clear']
'cmd' expands to ['command']
'cmp' expands to ['compare']
'cntrl' expands to ['control']
'col' expands to ['column']
'concat' expands to ['concatenate']
'cond' expands to ['condition']
'conf' expands to ['configure', 'configuration']
'config' expands to ['configuration', 'configure']
'conn' expands to ['connection', 'connected']
'cont' expands to ['control']
'cos' expands to ['co sine']
'cpp' expands to ['c. plus plus']
'ctl' expands to ['control']
'ctrl' expands to ['control']
'cur' expands to ['cursor', 'current']
'curr' expands to ['current']
'db' expands to ['d. b.', 'data base']
'decl' expands to ['declaration', 'declare']
'def' expands to ['definition', 'default', 'define', 'defined', 'deaf']
'delim' expands to ['delimiter']
'dev' expands to ['develop', 'development', 'device']
'dict' expands to ['dictionary']
'dir' expands to ['directory', 'direction']
'div' expands to ['divide']
'doc' expands to ['document', 'documentation']
'dom' expands to ['domain']
'dst' expands to ['distance']
'dtd' expands to ['d. t. d.']
'elem' expands to ['element']
'ent' expands to ['entry']
'env' expands to ['environment']
'environ' expands to ['environment']
'eol' expands to ['e. o. l.', 'end of line']
'eval' expands to ['e. val', 'evaluate']
'ex' expands to ['example']
'exc' expands to ['exception']
'exec' expands to ['execute', 'executable']
'expr' expands to ['expression']
'fg' expands to ['foreground']
'fifo' expands to ['first in first out']
'fmt' expands to ['format']
'fp' expands to ['file pointer']
'func' expands to ['function']
'gen' expands to ['general', 'generic']
'getattr' expands to ['get attribute']
'gid' expands to ['g. i. d.', 'group i. d.']
'glob' expands to ['global']
'goto' expands to ['go to']
'gr' expands to ['group']
'hex' expands to ['hexadecimal']
'horiz' expands to ['horizontal', 'horizontally']
'html' expands to ['h. t. m. l.']
'http' expands to ['h. t. t. p.']
'imap' expands to ['i. map']
'impl' expands to ['implementation']
'inc' expands to ['increment', 'include']
'incl' expands to ['include', 'included']
'info' expands to ['information']
'init' expands to ['initial', 'initialize', 'intial']
'ins' expands to ['insert']
'int' expands to ['integer']
'interp' expands to ['interpreter']
'intro' expands to ['introduction']
'io' expands to ['i. o.']
'ip' expands to ['i. p.']
'lambd' expands to ['lambda']
'len' expands to ['length']
'ln' expands to ['line']
'lnk' expands to ['link']
'loc' expands to ['location']
'login' expands to ['log in']
'mem' expands to ['memory']
'mk' expands to ['make']
'mnt' expands to ['mount', 'mounted']
'mod' expands to ['mode', 'modify']
'msec' expands to ['millisecond']
'msg' expands to ['message']
'mtime' expands to ['m. time']
'nam' expands to ['name']
'nntp' expands to ['n. n. t. p.']
'no' expands to ['number']
'num' expands to ['number']
'obj' expands to ['object']
'oct' expands to ['octal']
'opt' expands to ['optional', 'option', 'optimize']
'os' expands to ['operating system', 'o. s.']
'osf' expands to ['o. s. f.']
'par' expands to ['parameter']
'param' expands to ['parameter']
'pat' expands to ['pattern']
'perm' expands to ['permission']
'pkg' expands to ['package']
'pos' expands to ['position', 'positionning']
'prof' expands to ['profile', 'profiling', 'professional']
'proto' expands to ['prototype', 'protocol']
'pty' expands to ['p. t. y.']
'punct' expands to ['punctuation']
'py' expands to ['python', 'p. y.']
'rand' expands to ['random']
'rd' expands to ['read']
'rect' expands to ['rectangle']
'ref' expands to ['reference']
'reg' expands to ['regular', 'regular expression']
'regexp' expands to ['regular expression']
'rel' expands to ['relative']
'repr' expands to ['represent', 'representation']
'req' expands to ['request']
'rexp' expands to ['regular expression']
'rgb' expands to ['r. g. b.']
'rm' expands to ['remove']
'scr' expands to ['screen']
'sec' expands to ['second']
'sep' expands to ['separator']
'seq' expands to ['sequence']
'serv' expands to ['server']
'sig' expands to ['signal', 'special interest group']
'sin' expands to ['sine']
'smtp' expands to ['s. m. t. p.']
'sock' expands to ['socket']
'soundex' expands to ['soundex']
'spc' expands to ['space']
'src' expands to ['source']
'st' expands to ['standard']
'stat' expands to ['statistic', 'static']
'stdin' expands to ['s. t. d. in', 'standard input']
'str' expands to ['string']
'sub' expands to ['sub routine']
'sym' expands to ['symbol']
'sync' expands to ['synchronize']
'sys' expands to ['system']
'temp' expands to ['temporary']
'termid' expands to ['term i. d.', 'terminal i. d.']
'tmp' expands to ['temporary']
'tok' expands to ['token']
'trans' expands to ['transition', 'transport', 'transform', 'transformation']
'tty' expands to ['t. t. y.']
'uid' expands to ['u. i. d.', 'user i. d.']
'undef' expands to ['undefined']
'uniq' expands to ['unique']
'url' expands to ['u. r. l.']
'uu' expands to ['u. u.']
'var' expands to ['variable']
'vert' expands to ['vertical', 'vertically']
'win' expands to ['window']
'xml' expands to ['x. m. l.']


List of unresolved abbreviations



>>> Testing console command: compile_symbols(['e:\Projects\VoiceCode\VCode\Data\TestData\small_buff.c'])

Compiling symbols for file 'e:\Projects\VoiceCode\VCode\Data\TestData\small_buff.c'
>>> Known symbols are: 
API_function: ['api function']
f_name: ['f name']
f_name2: ['f name 2']
float: ['float']
horiz_pos: ['horiz pos', 'horiz position', 'horiz positionning', 'horizontal pos', 'horizontal position', 'horizontal positionning', 'horizontally pos', 'horizontally position', 'horizontally positionning']
move: ['move']
move_horiz: ['move horiz', 'move horizontal', 'move horizontally']
move_vert: ['move vert', 'move vertical', 'move vertically']
this_sym_has_an_other_abbrev: ['this sym has an other abbrev', 'this symbol has an other abbrev']
this_sym_is_unres: ['this sym is unres', 'this symbol is unres']
this_sym_is_unres_too: ['this sym is unres too', 'this symbol is unres too']
void: ['void']
x: ['x']
y: ['y']
_cached_symbols_as_one_string is:
    void  move  float  x  y  move_horiz  move_vert  horiz_pos  this_sym_is_unres  this_sym_is_unres_too  this_sym_has_an_other_abbrev  f_name  f_name2  API_function 


>>> Testing console command: say(['for', 'loop', 'horiz_pos\\horizontal position', 'loop', 'body'], user_input='None')








*** Start of source buffer ***
  1:    for (horiz_pos=0;  <= ; ++)
  2:    {
  3: <CURSOR>   
  5:    }
  6:    

*** End of source buffer ***


>>> Testing console command: say_select(['select', 'horiz_pos\horizontal position', '=\equals'])

*** Start of source buffer ***
  1:    for (<SEL_START>horiz_pos=
<SEL_END>0;  <= ; ++)
  3:    {
  4:    
  5:    }

*** End of source buffer ***


*******************************************************************************
* Name        : persistence
* Description : testing persistence between VoiceCode sessions
*******************************************************************************



>>> Starting mediator with persistence
Error reading <SymDict.SymDict instance at 8361f0> from file 'e:\Projects\VoiceCode\VCode\Data\Tmp\tmp_symdict.pkl'
[Errno 2] No such file or directory: 'e:\\Projects\\VoiceCode\\VCode\\Data\\Tmp\\tmp_symdict.pkl'
Compiling symbols for file 'e:\Projects\VoiceCode\VCode\Config\py_std_sym.py'


>>> Testing console command: compile_symbols(['e:\Projects\VoiceCode\VCode\Data\TestData\small_buff.c'])

Compiling symbols for file 'e:\Projects\VoiceCode\VCode\Data\TestData\small_buff.c'
>>> Known symbols are: 
API_function: ['api function']
f_name: ['f name']
f_name2: ['f name 2']
float: ['float']
horiz_pos: ['horiz pos', 'horiz position', 'horiz positionning', 'horizontal pos', 'horizontal position', 'horizontal positionning', 'horizontally pos', 'horizontally position', 'horizontally positionning']
move: ['move']
move_horiz: ['move horiz', 'move horizontal', 'move horizontally']
move_vert: ['move vert', 'move vertical', 'move vertically']
this_sym_has_an_other_abbrev: ['this sym has an other abbrev', 'this symbol has an other abbrev']
this_sym_is_unres: ['this sym is unres', 'this symbol is unres']
this_sym_is_unres_too: ['this sym is unres too', 'this symbol is unres too']
void: ['void']
x: ['x']
y: ['y']
_cached_symbols_as_one_string is:
    void  move  float  x  y  move_horiz  move_vert  horiz_pos  this_sym_is_unres  this_sym_is_unres_too  this_sym_has_an_other_abbrev  f_name  f_name2  API_function 


>>> Restarting mediator with persistence. Compiled symbols should still be in the dictionary.



>>> Testing console command: quit()

Compiling symbols for file 'e:\Projects\VoiceCode\VCode\Config\py_std_sym.py'


>>> Testing console command: print_symbols()

API_function: ['api function']
f_name: ['f name']
f_name2: ['f name 2']
float: ['float']
horiz_pos: ['horiz pos', 'horiz position', 'horiz positionning', 'horizontal pos', 'horizontal position', 'horizontal positionning', 'horizontally pos', 'horizontally position', 'horizontally positionning']
move: ['move']
move_horiz: ['move horiz', 'move horizontal', 'move horizontally']
move_vert: ['move vert', 'move vertical', 'move vertically']
this_sym_has_an_other_abbrev: ['this sym has an other abbrev', 'this symbol has an other abbrev']
this_sym_is_unres: ['this sym is unres', 'this symbol is unres']
this_sym_is_unres_too: ['this sym is unres too', 'this symbol is unres too']
void: ['void']
x: ['x']
y: ['y']
_cached_symbols_as_one_string is:
    void  move  float  x  y  move_horiz  move_vert  horiz_pos  this_sym_is_unres  this_sym_is_unres_too  this_sym_has_an_other_abbrev  f_name  f_name2  API_function 


>>> Restarting mediator WITHOUT persistence. There should be NO symbols in the dictionary.



>>> Testing console command: quit()

Compiling symbols for file 'e:\Projects\VoiceCode\VCode\Config\py_std_sym.py'
Compiling symbols for file 'e:\Projects\VoiceCode\VCode\Config\py_std_sym.py'


>>> Testing console command: print_symbols()

_cached_symbols_as_one_string is:
   


*******************************************************************************
* Name        : python
* Description : testing the various Python CSCs and LSAs
*******************************************************************************

>>> Dictating Python when all symbols are known <<<

Compiling symbols for file 'e:\Projects\VoiceCode\VCode\Config\py_std_sym.py'
Compiling symbols for file 'e:\Projects\VoiceCode\VCode\Config\py_std_sym.py'
Compiling symbols for file 'e:\\Projects\\VoiceCode\\VCode\\Data\\TestData\\native_python.py'
WARNING: source file 'e:\\Projects\\VoiceCode\\VCode\\Data\\TestData\\native_python.py' doesn't exist.
>>> Known symbols are: 
_cached_symbols_as_one_string is:
   
_cached_symbols_as_one_string is:
   
WARNING: source file 'D:/blah.py' doesn't exist.
*** Start of source buffer ***
<CURSOR>
*** End of source buffer ***
Saying: ['import', 'modules', 'O.', 'S.', ', \\comma', 'R.', 'E.', ', \\comma', 'string', ', \\comma', 'system', 'new', 'statement']
Associate 'O. S.' with symbol (Enter selection):

  '0': no association
  '1': os (*new*)
  '2': Os (*new*)
  '3': OS (*new*)

> Associate 'R. E.' with symbol (Enter selection):

  '0': no association
  '1': re (*new*)
  '2': Re (*new*)
  '3': RE (*new*)

> Associate 'string' with symbol (Enter selection):

  '0': no association
  '1': string (*new*)
  '2': String (*new*)
  '3': STRING (*new*)

> Associate 'system' with symbol (Enter selection):

  '0': no association
  '1': system (*new*)
  '2': System (*new*)
  '3': SYSTEM (*new*)

> 

*** Start of source buffer ***
  1:    import os, re, string, system
  2:    <CURSOR>
*** End of source buffer ***
Saying: ['import', 'modules', 'auto', 'test', ', \\comma', 'natural', 'link', ', \\comma', 'V.', 'C.', 'globals', 'new', 'statement']
Associate 'auto test' with symbol (Enter selection):

  '0': no association
  '1': auto_test (*new*)
  '2': AutoTest (*new*)
  '3': autoTest (*new*)
  '4': AUTO_TEST (*new*)
  '5': autotest (*new*)
  '6': AUTOTEST (*new*)

> Associate 'natural link' with symbol (Enter selection):

  '0': no association
  '1': natural_link (*new*)
  '2': NaturalLink (*new*)
  '3': naturalLink (*new*)
  '4': NATURAL_LINK (*new*)
  '5': naturallink (*new*)
  '6': NATURALLINK (*new*)

> Associate 'V. C. globals' with symbol (Enter selection):

  '0': no association
  '1': vc_globals (*new*)
  '2': VcGlobals (*new*)
  '3': vcGlobals (*new*)
  '4': VC_GLOBALS (*new*)
  '5': vcglobals (*new*)
  '6': VCGLOBALS (*new*)

> 

*** Start of source buffer ***
  1:    import os, re, string, system
  2:    import auto_test, natural_link, vc_globals
  3:    <CURSOR>
*** End of source buffer ***
Saying: ['from', 'module', 'actions', 'C.', 'C.', 'P.', 'P.', 'import', 'all', 'new', 'statement']
Associate 'actions C. C. P. P.' with symbol (Enter selection):

  '0': no association
  '1': actions_ccpp (*new*)
  '2': ActionsCcpp (*new*)
  '3': actionsCcpp (*new*)
  '4': ACTIONS_CCPP (*new*)
  '5': actionsccpp (*new*)
  '6': ACTIONSCCPP (*new*)

> Associate 'all' with symbol (Enter selection):

  '0': no association
  '1': all (*new*)
  '2': All (*new*)
  '3': ALL (*new*)

> 

*** Start of source buffer ***
  1:    import os, re, string, system
  2:    import auto_test, natural_link, vc_globals
  3:    from actions_ccppimport all
  4:    <CURSOR>
*** End of source buffer ***
Saying: ['from', 'module', 'application', 'state', 'import', 'symbols', 'application', 'state', 'new', 'statement']
Associate 'application state' with symbol (Enter selection):

  '0': no association
  '1': application_state (*new*)
  '2': ApplicationState (*new*)
  '3': applicationState (*new*)
  '4': APPLICATION_STATE (*new*)
  '5': applicationstate (*new*)
  '6': APPLICATIONSTATE (*new*)

> 

*** Start of source buffer ***
  2:    import auto_test, natural_link, vc_globals
  3:    from actions_ccppimport all
  4:    from application_state import application_state
  5:    <CURSOR>
*** End of source buffer ***
Saying: ['from', 'module', 'context', 'generic', 'import', 'symbols', 'context', 'C.', 'comma', 'context', 'python', 'new', 'statement']
Associate 'context generic' with symbol (Enter selection):

  '0': no association
  '1': context_generic (*new*)
  '2': ContextGeneric (*new*)
  '3': contextGeneric (*new*)
  '4': CONTEXT_GENERIC (*new*)
  '5': contextgeneric (*new*)
  '6': CONTEXTGENERIC (*new*)

> Associate 'context C.' with symbol (Enter selection):

  '0': no association
  '1': context_c (*new*)
  '2': ContextC (*new*)
  '3': contextC (*new*)
  '4': CONTEXT_C (*new*)
  '5': contextc (*new*)
  '6': CONTEXTC (*new*)

> Associate 'context python' with symbol (Enter selection):

  '0': no association
  '1': context_python (*new*)
  '2': ContextPython (*new*)
  '3': contextPython (*new*)
  '4': CONTEXT_PYTHON (*new*)
  '5': contextpython (*new*)
  '6': CONTEXTPYTHON (*new*)

> 

*** Start of source buffer ***
  3:    from actions_ccppimport all
  4:    from application_state import application_state
  5:    from context_generic import context_c, context_python
  6:    <CURSOR>
*** End of source buffer ***
Saying: ['from', 'module', 'context', 'sensitive', 'command', 'import', 'symbols', 'context', 'sensitive', 'command', 'new', 'statement']
Associate 'context sensitive command' with symbol (Enter selection):

  '0': no association
  '1': context_sensitive_command (*new*)
  '2': ContextSensitiveCommand (*new*)
  '3': contextSensitiveCommand (*new*)
  '4': CONTEXT_SENSITIVE_COMMAND (*new*)
  '5': contextsensitivecommand (*new*)
  '6': CONTEXTSENSITIVECOMMAND (*new*)

> 

*** Start of source buffer ***
  4:    from application_state import application_state
  5:    from context_generic import context_c, context_python
  6:    from context_sensitive_command import context_sensitive_command
  7:    <CURSOR>
*** End of source buffer ***
Saying: ['from', 'module', 'Ed', 'simulator', 'import', 'symbol', 'Ed', 'simulator', 'new', 'statement']
Associate 'Ed simulator' with symbol (Enter selection):

  '0': no association
  '1': ed_simulator (*new*)
  '2': EdSimulator (*new*)
  '3': edSimulator (*new*)
  '4': ED_SIMULATOR (*new*)
  '5': edsimulator (*new*)
  '6': EDSIMULATOR (*new*)

> 

*** Start of source buffer ***
  5:    from context_generic import context_c, context_python
  6:    from context_sensitive_command import context_sensitive_command
  7:    from ed_simulator import ed_simulator
  8:    <CURSOR>
*** End of source buffer ***
Saying: ['from', 'module', 'object', 'import', 'symbol', 'object', 'new', 'statement']
Associate 'object' with symbol (Enter selection):

  '0': no association
  '1': object (*new*)
  '2': Object (*new*)
  '3': OBJECT (*new*)

> 

*** Start of source buffer ***
  6:    from context_sensitive_command import context_sensitive_command
  7:    from ed_simulator import ed_simulator
  8:    from object import object
  9:    <CURSOR>
*** End of source buffer ***
Saying: ['import', 'modules', 'Ed', 'simulator', 'comma', 'symbol', 'dictionary', 'new', 'statement']
Associate 'symbol dictionary' with symbol (Enter selection):

  '0': no association
  '1': symbol_dictionary (*new*)
  '2': SymbolDictionary (*new*)
  '3': symbolDictionary (*new*)
  '4': SYMBOL_DICTIONARY (*new*)
  '5': symboldictionary (*new*)
  '6': SYMBOLDICTIONARY (*new*)

> 

*** Start of source buffer ***
  7:    from ed_simulator import ed_simulator
  8:    from object import object
  9:    import ed_simulator, symbol_dictionary
 10:    <CURSOR>
*** End of source buffer ***
Saying: ['import', 'module', 'S.', 'R.', 'interface', 'new', 'statement']
Associate 'S. R. interface' with symbol (Enter selection):

  '0': no association
  '1': sr_interface (*new*)
  '2': SrInterface (*new*)
  '3': srInterface (*new*)
  '4': SR_INTERFACE (*new*)
  '5': srinterface (*new*)
  '6': SRINTERFACE (*new*)

> 

*** Start of source buffer ***
  8:    from object import object
  9:    import ed_simulator, symbol_dictionary
 10:    import sr_interface
 11:    <CURSOR>
*** End of source buffer ***
Saying: ['define', 'class', 'command', 'interpreter', 'sub class\\sub class', 'of', 'object', 'class', 'body']


Associate 'command interpreter' with symbol (Enter selection):

  '0': no association
  '1': command_interpreter (*new*)
  '2': CommandInterpreter (*new*)
  '3': commandInterpreter (*new*)
  '4': COMMAND_INTERPRETER (*new*)
  '5': commandinterpreter (*new*)
  '6': COMMANDINTERPRETER (*new*)

> *** Start of source buffer ***
  9:    import ed_simulator, symbol_dictionary
 10:    import sr_interface
 11:    class command_interpreter(object):
 12:    <CURSOR>
*** End of source buffer ***
Saying: ['define', 'method', 'initialize', 'add', 'argument', 'on', 'application', 'equals', 'none', 'comma']


Associate 'initialize' with symbol (Enter selection):

  '0': no association
  '1': initialize (*new*)
  '2': Initialize (*new*)
  '3': INITIALIZE (*new*)

> Associate 'on application' with symbol (Enter selection):

  '0': no association
  '1': on_application (*new*)
  '2': OnApplication (*new*)
  '3': onApplication (*new*)
  '4': ON_APPLICATION (*new*)
  '5': onapplication (*new*)
  '6': ONAPPLICATION (*new*)

> Associate 'none' with symbol (Enter selection):

  '0': no association
  '1': none (*new*)
  '2': None (*new*)
  '3': NONE (*new*)

> *** Start of source buffer ***
  9:    import ed_simulator, symbol_dictionary
 10:    import sr_interface
 11:    class command_interpreter(object):
 12:    def initialize(self, on_application = none, <CURSOR>):
 14:    

*** End of source buffer ***
Saying: ['symbol', 'dictionary', 'pickle', 'file', 'equals', 'none', 'comma', 'double', 'asterisk', 'attributes', 'method', 'body']
Associate 'symbol_dictionary pickle file' with symbol (Enter selection):

  '0': no association
  '1': symbol_dictionary_pickle_file (*new*)
  '2': SymbolDictionaryPickleFile (*new*)
  '3': symbolDictionaryPickleFile (*new*)
  '4': SYMBOL_DICTIONARY_PICKLE_FILE (*new*)
  '5': symboldictionarypicklefile (*new*)
  '6': SYMBOLDICTIONARYPICKLEFILE (*new*)

> Associate 'attributes' with symbol (Enter selection):

  '0': no association
  '1': attributes (*new*)
  '2': Attributes (*new*)
  '3': ATTRIBUTES (*new*)

> *** Start of source buffer ***
 10:    import sr_interface
 11:    class command_interpreter(object):
 12:    def initialize(self, on_application = none, symbol_dictionary_pickle_file = none, **attributes):
 13:    <CURSOR>
*** End of source buffer ***
Saying: ['self', 'dot', 'declare', 'attributes', 'with', 'arguments', 'brace', 'pair']
Associate 'self' with symbol (Enter selection):

  '0': no association
  '1': self (*new*)
  '2': Self (*new*)
  '3': SELF (*new*)

> Associate 'declare attributes' with symbol (Enter selection):

  '0': no association
  '1': declare_attributes (*new*)
  '2': DeclareAttributes (*new*)
  '3': declareAttributes (*new*)
  '4': DECLARE_ATTRIBUTES (*new*)
  '5': declareattributes (*new*)
  '6': DECLAREATTRIBUTES (*new*)

> *** Start of source buffer ***
 10:    import sr_interface
 11:    class command_interpreter(object):
 12:    def initialize(self, on_application = none, symbol_dictionary_pickle_file = none, **attributes):
 13:    self.declare_attributes({<CURSOR>})

*** End of source buffer ***
Saying: ['single', 'quotes', 'un', 'translated', 'text', 'start', 'jump', 'out', ':\\colon', 'none', 'comma']
Associate 'un translated text start' with symbol (Enter selection):

  '0': no association
  '1': un_translated_text_start (*new*)
  '2': UnTranslatedTextStart (*new*)
  '3': unTranslatedTextStart (*new*)
  '4': UN_TRANSLATED_TEXT_START (*new*)
  '5': untranslatedtextstart (*new*)
  '6': UNTRANSLATEDTEXTSTART (*new*)

> *** Start of source buffer ***
 10:    import sr_interface
 11:    class command_interpreter(object):
 12:    def initialize(self, on_application = none, symbol_dictionary_pickle_file = none, **attributes):
 13:    self.declare_attributes({'un_translated_text_start': none, <CURSOR>})

*** End of source buffer ***
Saying: ['single', 'quotes', 'un', 'translated', 'text', 'end', 'jump', 'out', ':\\colon', 'none', 'new', 'statement']
Associate 'un translated text end' with symbol (Enter selection):

  '0': no association
  '1': un_translated_text_end (*new*)
  '2': UnTranslatedTextEnd (*new*)
  '3': unTranslatedTextEnd (*new*)
  '4': UN_TRANSLATED_TEXT_END (*new*)
  '5': untranslatedtextend (*new*)
  '6': UNTRANSLATEDTEXTEND (*new*)

> 

*** Start of source buffer ***
 11:    class command_interpreter(object):
 12:    def initialize(self, on_application = none, symbol_dictionary_pickle_file = none, **attributes):
 13:    self.declare_attributes({'un_translated_text_start': none, 'un_translated_text_end': none})
 14:    <CURSOR>
*** End of source buffer ***
Saying: ['self', 'dot', 'deep', 'construct', 'with', 'arguments', 'command', 'interpreter', 'comma', 'continue', 'statement']
Associate 'deep construct' with symbol (Enter selection):

  '0': no association
  '1': deep_construct (*new*)
  '2': DeepConstruct (*new*)
  '3': deepConstruct (*new*)
  '4': DEEP_CONSTRUCT (*new*)
  '5': deepconstruct (*new*)
  '6': DEEPCONSTRUCT (*new*)

> 

*** Start of source buffer ***
 12:    def initialize(self, on_application = none, symbol_dictionary_pickle_file = none, **attributes):
 13:    self.declare_attributes({'un_translated_text_start': none, 'un_translated_text_end': none})
 14:    self.deep_construct(command_interpreter, \
 15:    <CURSOR>)

*** End of source buffer ***
Saying: ['brace', 'pair', 'single', 'quotes', 'on', 'application', 'jump', 'out', ':\\colon', 'on', 'application', 'comma']
*** Start of source buffer ***
 12:    def initialize(self, on_application = none, symbol_dictionary_pickle_file = none, **attributes):
 13:    self.declare_attributes({'un_translated_text_start': none, 'un_translated_text_end': none})
 14:    self.deep_construct(command_interpreter, \
 15:    {'on_application': on_application, <CURSOR>})

*** End of source buffer ***
Saying: ['single', 'quotes', 'known', 'symbols', 'jump', 'out', ':\\colon', 'symbol', 'dictionary', 'dot', 'symbol', 'dictionary', 'without', 'arguments', 'comma', 'continue', 'statement']
Associate 'known symbols' with symbol (Enter selection):

  '0': no association
  '1': known_symbols (*new*)
  '2': KnownSymbols (*new*)
  '3': knownSymbols (*new*)
  '4': KNOWN_SYMBOLS (*new*)
  '5': knownsymbols (*new*)
  '6': KNOWNSYMBOLS (*new*)

> 

*** Start of source buffer ***
 13:    self.declare_attributes({'un_translated_text_start': none, 'un_translated_text_end': none})
 14:    self.deep_construct(command_interpreter, \
 15:    {'on_application': on_application, 'known_symbols': symbol_dictionary.symbol_dictionary(), \
 16:    <CURSOR>})

*** End of source buffer ***
Saying: ['single', 'quotes', 'language', 'specific', 'aliases', 'jump', 'out', ':\\colon', 'empty', 'dictionary', 'comma', 'continue', 'statement']
Associate 'language specific aliases' with symbol (Enter selection):

  '0': no association
  '1': language_specific_aliases (*new*)
  '2': LanguageSpecificAliases (*new*)
  '3': languageSpecificAliases (*new*)
  '4': LANGUAGE_SPECIFIC_ALIASES (*new*)
  '5': languagespecificaliases (*new*)
  '6': LANGUAGESPECIFICALIASES (*new*)

> 

*** Start of source buffer ***
 14:    self.deep_construct(command_interpreter, \
 15:    {'on_application': on_application, 'known_symbols': symbol_dictionary.symbol_dictionary(), \
 16:    'language_specific_aliases': {}, \
 17:    <CURSOR>})

*** End of source buffer ***
Saying: ['single', 'quotes', 'last', 'loaded', 'language', 'jump', 'out', ':\\colon', 'none', 'comma', 'continue', 'statement']
Associate 'last loaded language' with symbol (Enter selection):

  '0': no association
  '1': last_loaded_language (*new*)
  '2': LastLoadedLanguage (*new*)
  '3': lastLoadedLanguage (*new*)
  '4': LAST_LOADED_LANGUAGE (*new*)
  '5': lastloadedlanguage (*new*)
  '6': LASTLOADEDLANGUAGE (*new*)

> 

*** Start of source buffer ***
 15:    {'on_application': on_application, 'known_symbols': symbol_dictionary.symbol_dictionary(), \
 16:    'language_specific_aliases': {}, \
 17:    'last_loaded_language': none, \
 18:    <CURSOR>})

*** End of source buffer ***
Saying: ['single', 'quotes', 'symbol', 'dictionary', 'pickle', 'file', 'jump', 'out', ':\\colon', 'symbol', 'dictionary', 'pickle', 'file', 'jump', 'out', 'comma', 'continue', 'statement']


*** Start of source buffer ***
 16:    'language_specific_aliases': {}, \
 17:    'last_loaded_language': none, \
 18:    'symbol_dictionary_pickle_file': symbol_dictionary_pickle_file}, \
 19:    <CURSOR>)

*** End of source buffer ***
Saying: ['attributes', 'new', 'statement', 'new', 'statement']




*** Start of source buffer ***
 18:    'symbol_dictionary_pickle_file': symbol_dictionary_pickle_file}, \
 19:    attributes)
 20:    
 21:    <CURSOR>
*** End of source buffer ***
Saying: ['define', 'method', 'spoken', 'form', 'regular', 'expression', 'add', 'argument', 'spoken', 'form', 'method', 'body']


Associate 'spoken form regular expression' with symbol (Enter selection):

  '0': no association
  '1': spoken_form_regular_expression (*new*)
  '2': SpokenFormRegularExpression (*new*)
  '3': spokenFormRegularExpression (*new*)
  '4': SPOKEN_FORM_REGULAR_EXPRESSION (*new*)
  '5': spokenformregularexpression (*new*)
  '6': SPOKENFORMREGULAREXPRESSION (*new*)

> Associate 'spoken form' with symbol (Enter selection):

  '0': no association
  '1': spoken_form (*new*)
  '2': SpokenForm (*new*)
  '3': spokenForm (*new*)
  '4': SPOKEN_FORM (*new*)
  '5': spokenform (*new*)
  '6': SPOKENFORM (*new*)

> *** Start of source buffer ***
 19:    attributes)
 20:    
 21:    def spoken_form_regular_expression(self, spoken_form):
 22:    <CURSOR>
*** End of source buffer ***
Saying: ['words', 'equals', 'R.', 'E.', 'dot', 'split', 'with', 'arguments']
Associate 'words' with symbol (Enter selection):

  '0': no association
  '1': words (*new*)
  '2': Words (*new*)
  '3': WORDS (*new*)

> Associate 'R. E.' with symbol (Enter selection):

  '0': no association
  '1': re
  '2': Re (*new*)
  '3': RE (*new*)

> Associate 'split' with symbol (Enter selection):

  '0': no association
  '1': split (*new*)
  '2': Split (*new*)
  '3': SPLIT (*new*)

> *** Start of source buffer ***
 19:    attributes)
 20:    
 21:    def spoken_form_regular_expression(self, spoken_form):
 22:    words = re.split(<CURSOR>)

*** End of source buffer ***
Saying: ['single', 'quotes', 'back', 'slash', 'S.', 'plus', 'sign', 'jump', 'out', 'comma', 'spoken', 'form', 'new', 'statement']


*** Start of source buffer ***
 20:    
 21:    def spoken_form_regular_expression(self, spoken_form):
 22:    words = re.split('\s+', spoken_form)
 23:    <CURSOR>
*** End of source buffer ***
Saying: ['regular', 'expression', 'equals', 'empty', 'single', 'quotes', 'new', 'statement']
Associate 'regular expression' with symbol (Enter selection):

  '0': no association
  '1': re
  '2': regular_expression (*new*)
  '3': RegularExpression (*new*)
  '4': regularExpression (*new*)
  '5': REGULAR_EXPRESSION (*new*)
  '6': regularexpression (*new*)
  '7': REGULAREXPRESSION (*new*)

> 

*** Start of source buffer ***
 21:    def spoken_form_regular_expression(self, spoken_form):
 22:    words = re.split('\s+', spoken_form)
 23:    re = ''
 24:    <CURSOR>
*** End of source buffer ***
Saying: ['for', 'loop', 'a', 'word', 'in', 'list', 'words', 'loop', 'body']


Associate 'a word' with symbol (Enter selection):

  '0': no association
  '1': a_word (*new*)
  '2': AWord (*new*)
  '3': aWord (*new*)
  '4': A_WORD (*new*)
  '5': aword (*new*)
  '6': AWORD (*new*)

> *** Start of source buffer ***
 22:    words = re.split('\s+', spoken_form)
 23:    re = ''
 24:    for a_word in words:
 25:    <CURSOR>
*** End of source buffer ***
Saying: ['first', 'equals', 'a', 'word', 'at', 'index', '0', 'new', 'statement']
Associate 'first' with symbol (Enter selection):

  '0': no association
  '1': first (*new*)
  '2': First (*new*)
  '3': FIRST (*new*)

> 

*** Start of source buffer ***
 23:    re = ''
 24:    for a_word in words:
 25:    first = a_word[0]
 26:    <CURSOR>
*** End of source buffer ***
Saying: ['rest', 'equals', 'a', 'word', 'at', 'index', '1', ':\\colon', 'new', 'statement']
Associate 'rest' with symbol (Enter selection):

  '0': no association
  '1': re
  '2': rest (*new*)
  '3': Rest (*new*)
  '4': REST (*new*)

> 

*** Start of source buffer ***
 24:    for a_word in words:
 25:    first = a_word[0]
 26:    re = a_word[1: ]
 27:    <CURSOR>
*** End of source buffer ***
Saying: ['regular', 'expression', 'this', 'word', 'equals', 'single', 'quotes']
Associate 'regular expression this word' with symbol (Enter selection):

  '0': no association
  '1': regular_expression_this_word (*new*)
  '2': RegularExpressionThisWord (*new*)
  '3': regularExpressionThisWord (*new*)
  '4': REGULAR_EXPRESSION_THIS_WORD (*new*)
  '5': regularexpressionthisword (*new*)
  '6': REGULAREXPRESSIONTHISWORD (*new*)

> *** Start of source buffer ***
 24:    for a_word in words:
 25:    first = a_word[0]
 26:    re = a_word[1: ]
 27:    regular_expression_this_word = '<CURSOR>'

*** End of source buffer ***
Saying: ['open', 'bracket', 'jump', 'out', 'plus', 'string', 'dot', 'lower', 'with', 'arguments', 'first']
Associate 'lower' with symbol (Enter selection):

  '0': no association
  '1': lower (*new*)
  '2': Lower (*new*)
  '3': LOWER (*new*)

> *** Start of source buffer ***
 24:    for a_word in words:
 25:    first = a_word[0]
 26:    re = a_word[1: ]
 27:    regular_expression_this_word = '[' + string.lower(first<CURSOR>)

*** End of source buffer ***
Saying: ['jump', 'out', 'plus', 'string', 'dot', 'upper', 'with', 'arguments', 'first', 'new', 'statement']
Associate 'upper' with symbol (Enter selection):

  '0': no association
  '1': upper (*new*)
  '2': Upper (*new*)
  '3': UPPER (*new*)

> 

*** Start of source buffer ***
 25:    first = a_word[0]
 26:    re = a_word[1: ]
 27:    regular_expression_this_word = '[' + string.lower(first) + string.upper(first)
 28:    <CURSOR>
*** End of source buffer ***
Saying: ['if', 'statement', 'not', 'regular', 'expression', 'equal', 'to', 'empty', 'single', 'quotes', 'if', 'body']


Associate 'regular expression' with symbol (Enter selection):

  '0': no association
  '1': re
  '2': regular_expression (*new*)
  '3': RegularExpression (*new*)
  '4': regularExpression (*new*)
  '5': REGULAR_EXPRESSION (*new*)
  '6': regularexpression (*new*)
  '7': REGULAREXPRESSION (*new*)

> *** Start of source buffer ***
 26:    re = a_word[1: ]
 27:    regular_expression_this_word = '[' + string.lower(first) + string.upper(first)
 28:    if not re == '':
 29:    <CURSOR>
*** End of source buffer ***
Saying: ['regular', 'expression', 'equals', 'regular', 'expression', 'plus', 'single', 'quotes', 'back', 'slash', 'S.', 'asterisk', 'new', 'statement']
Associate 'regular expression' with symbol (Enter selection):

  '0': no association
  '1': re
  '2': regular_expression (*new*)
  '3': RegularExpression (*new*)
  '4': regularExpression (*new*)
  '5': REGULAR_EXPRESSION (*new*)
  '6': regularexpression (*new*)
  '7': REGULAREXPRESSION (*new*)

> Associate 'regular expression' with symbol (Enter selection):

  '0': no association
  '1': re
  '2': regular_expression (*new*)
  '3': RegularExpression (*new*)
  '4': regularExpression (*new*)
  '5': REGULAR_EXPRESSION (*new*)
  '6': regularexpression (*new*)
  '7': REGULAREXPRESSION (*new*)

> 

*** Start of source buffer ***
 27:    regular_expression_this_word = '[' + string.lower(first) + string.upper(first)
 28:    if not re == '':
 29:    re = re + '\s*'
 30:    <CURSOR>
*** End of source buffer ***
Saying: ['regular', 'expression', 'equals', 'regular', 'expression', 'plus', 'regular', 'expression', 'this', 'word', 'new', 'statement']
Associate 'regular expression' with symbol (Enter selection):

  '0': no association
  '1': re
  '2': regular_expression (*new*)
  '3': RegularExpression (*new*)
  '4': regularExpression (*new*)
  '5': REGULAR_EXPRESSION (*new*)
  '6': regularexpression (*new*)
  '7': REGULAREXPRESSION (*new*)

> Associate 'regular expression' with symbol (Enter selection):

  '0': no association
  '1': re
  '2': regular_expression (*new*)
  '3': RegularExpression (*new*)
  '4': regularExpression (*new*)
  '5': REGULAR_EXPRESSION (*new*)
  '6': regularexpression (*new*)
  '7': REGULAREXPRESSION (*new*)

> 

*** Start of source buffer ***
 28:    if not re == '':
 29:    re = re + '\s*'
 30:    re = re + regular_expression_this_word
 31:    <CURSOR>
*** End of source buffer ***
Saying: ['return', 'regular', 'expression']
Associate 'regular expression' with symbol (Enter selection):

  '0': no association
  '1': re
  '2': regular_expression (*new*)
  '3': RegularExpression (*new*)
  '4': regularExpression (*new*)
  '5': REGULAR_EXPRESSION (*new*)
  '6': regularexpression (*new*)
  '7': REGULAREXPRESSION (*new*)

> *** Start of source buffer ***
 28:    if not re == '':
 29:    re = re + '\s*'
 30:    re = re + regular_expression_this_word
 31:    return re<CURSOR>
*** End of source buffer ***

>>> Dictating Python when only standard symbols are known <<<

Compiling symbols for file 'e:\Projects\VoiceCode\VCode\Config\py_std_sym.py'
Compiling symbols for file 'e:\Projects\VoiceCode\VCode\Config\py_std_sym.py'
_cached_symbols_as_one_string is:
   
WARNING: source file 'D:/blah.py' doesn't exist.
*** Start of source buffer ***
<CURSOR>
*** End of source buffer ***
Saying: ['import', 'modules', 'O.', 'S.', ', \\comma', 'R.', 'E.', ', \\comma', 'string', ', \\comma', 'system', 'new', 'statement']
Associate 'O. S.' with symbol (Enter selection):

  '0': no association
  '1': os (*new*)
  '2': Os (*new*)
  '3': OS (*new*)

> Associate 'R. E.' with symbol (Enter selection):

  '0': no association
  '1': re (*new*)
  '2': Re (*new*)
  '3': RE (*new*)

> Associate 'string' with symbol (Enter selection):

  '0': no association
  '1': string (*new*)
  '2': String (*new*)
  '3': STRING (*new*)

> Associate 'system' with symbol (Enter selection):

  '0': no association
  '1': system (*new*)
  '2': System (*new*)
  '3': SYSTEM (*new*)

> 

*** Start of source buffer ***
  1:    import os, re, string, system
  2:    <CURSOR>
*** End of source buffer ***
Saying: ['import', 'modules', 'auto', 'test', ', \\comma', 'natural', 'link', ', \\comma', 'V.', 'C.', 'globals', 'new', 'statement']
Associate 'auto test' with symbol (Enter selection):

  '0': no association
  '1': auto_test (*new*)
  '2': AutoTest (*new*)
  '3': autoTest (*new*)
  '4': AUTO_TEST (*new*)
  '5': autotest (*new*)
  '6': AUTOTEST (*new*)

> Associate 'natural link' with symbol (Enter selection):

  '0': no association
  '1': natural_link (*new*)
  '2': NaturalLink (*new*)
  '3': naturalLink (*new*)
  '4': NATURAL_LINK (*new*)
  '5': naturallink (*new*)
  '6': NATURALLINK (*new*)

> Associate 'V. C. globals' with symbol (Enter selection):

  '0': no association
  '1': vc_globals (*new*)
  '2': VcGlobals (*new*)
  '3': vcGlobals (*new*)
  '4': VC_GLOBALS (*new*)
  '5': vcglobals (*new*)
  '6': VCGLOBALS (*new*)

> 

*** Start of source buffer ***
  1:    import os, re, string, system
  2:    import auto_test, natural_link, vc_globals
  3:    <CURSOR>
*** End of source buffer ***
Saying: ['from', 'module', 'actions', 'C.', 'C.', 'P.', 'P.', 'import', 'all', 'new', 'statement']
Associate 'actions C. C. P. P.' with symbol (Enter selection):

  '0': no association
  '1': actions_ccpp (*new*)
  '2': ActionsCcpp (*new*)
  '3': actionsCcpp (*new*)
  '4': ACTIONS_CCPP (*new*)
  '5': actionsccpp (*new*)
  '6': ACTIONSCCPP (*new*)

> Associate 'all' with symbol (Enter selection):

  '0': no association
  '1': all (*new*)
  '2': All (*new*)
  '3': ALL (*new*)

> 

*** Start of source buffer ***
  1:    import os, re, string, system
  2:    import auto_test, natural_link, vc_globals
  3:    from actions_ccppimport all
  4:    <CURSOR>
*** End of source buffer ***
Saying: ['from', 'module', 'application', 'state', 'import', 'symbols', 'application', 'state', 'new', 'statement']
Associate 'application state' with symbol (Enter selection):

  '0': no association
  '1': application_state (*new*)
  '2': ApplicationState (*new*)
  '3': applicationState (*new*)
  '4': APPLICATION_STATE (*new*)
  '5': applicationstate (*new*)
  '6': APPLICATIONSTATE (*new*)

> 

*** Start of source buffer ***
  2:    import auto_test, natural_link, vc_globals
  3:    from actions_ccppimport all
  4:    from application_state import application_state
  5:    <CURSOR>
*** End of source buffer ***
Saying: ['from', 'module', 'context', 'generic', 'import', 'symbols', 'context', 'C.', 'comma', 'context', 'python', 'new', 'statement']
Associate 'context generic' with symbol (Enter selection):

  '0': no association
  '1': context_generic (*new*)
  '2': ContextGeneric (*new*)
  '3': contextGeneric (*new*)
  '4': CONTEXT_GENERIC (*new*)
  '5': contextgeneric (*new*)
  '6': CONTEXTGENERIC (*new*)

> Associate 'context C.' with symbol (Enter selection):

  '0': no association
  '1': context_c (*new*)
  '2': ContextC (*new*)
  '3': contextC (*new*)
  '4': CONTEXT_C (*new*)
  '5': contextc (*new*)
  '6': CONTEXTC (*new*)

> Associate 'context python' with symbol (Enter selection):

  '0': no association
  '1': context_python (*new*)
  '2': ContextPython (*new*)
  '3': contextPython (*new*)
  '4': CONTEXT_PYTHON (*new*)
  '5': contextpython (*new*)
  '6': CONTEXTPYTHON (*new*)

> 

*** Start of source buffer ***
  3:    from actions_ccppimport all
  4:    from application_state import application_state
  5:    from context_generic import context_c, context_python
  6:    <CURSOR>
*** End of source buffer ***
Saying: ['from', 'module', 'context', 'sensitive', 'command', 'import', 'symbols', 'context', 'sensitive', 'command', 'new', 'statement']
Associate 'context sensitive command' with symbol (Enter selection):

  '0': no association
  '1': context_sensitive_command (*new*)
  '2': ContextSensitiveCommand (*new*)
  '3': contextSensitiveCommand (*new*)
  '4': CONTEXT_SENSITIVE_COMMAND (*new*)
  '5': contextsensitivecommand (*new*)
  '6': CONTEXTSENSITIVECOMMAND (*new*)

> 

*** Start of source buffer ***
  4:    from application_state import application_state
  5:    from context_generic import context_c, context_python
  6:    from context_sensitive_command import context_sensitive_command
  7:    <CURSOR>
*** End of source buffer ***
Saying: ['from', 'module', 'Ed', 'simulator', 'import', 'symbol', 'Ed', 'simulator', 'new', 'statement']
Associate 'Ed simulator' with symbol (Enter selection):

  '0': no association
  '1': ed_simulator (*new*)
  '2': EdSimulator (*new*)
  '3': edSimulator (*new*)
  '4': ED_SIMULATOR (*new*)
  '5': edsimulator (*new*)
  '6': EDSIMULATOR (*new*)

> 

*** Start of source buffer ***
  5:    from context_generic import context_c, context_python
  6:    from context_sensitive_command import context_sensitive_command
  7:    from ed_simulator import ed_simulator
  8:    <CURSOR>
*** End of source buffer ***
Saying: ['from', 'module', 'object', 'import', 'symbol', 'object', 'new', 'statement']
Associate 'object' with symbol (Enter selection):

  '0': no association
  '1': object (*new*)
  '2': Object (*new*)
  '3': OBJECT (*new*)

> 

*** Start of source buffer ***
  6:    from context_sensitive_command import context_sensitive_command
  7:    from ed_simulator import ed_simulator
  8:    from object import object
  9:    <CURSOR>
*** End of source buffer ***
Saying: ['import', 'modules', 'Ed', 'simulator', 'comma', 'symbol', 'dictionary', 'new', 'statement']
Associate 'symbol dictionary' with symbol (Enter selection):

  '0': no association
  '1': symbol_dictionary (*new*)
  '2': SymbolDictionary (*new*)
  '3': symbolDictionary (*new*)
  '4': SYMBOL_DICTIONARY (*new*)
  '5': symboldictionary (*new*)
  '6': SYMBOLDICTIONARY (*new*)

> 

*** Start of source buffer ***
  7:    from ed_simulator import ed_simulator
  8:    from object import object
  9:    import ed_simulator, symbol_dictionary
 10:    <CURSOR>
*** End of source buffer ***
Saying: ['import', 'module', 'S.', 'R.', 'interface', 'new', 'statement']
Associate 'S. R. interface' with symbol (Enter selection):

  '0': no association
  '1': sr_interface (*new*)
  '2': SrInterface (*new*)
  '3': srInterface (*new*)
  '4': SR_INTERFACE (*new*)
  '5': srinterface (*new*)
  '6': SRINTERFACE (*new*)

> 

*** Start of source buffer ***
  8:    from object import object
  9:    import ed_simulator, symbol_dictionary
 10:    import sr_interface
 11:    <CURSOR>
*** End of source buffer ***
Saying: ['define', 'class', 'command', 'interpreter', 'sub class\\sub class', 'of', 'object', 'class', 'body']


Associate 'command interpreter' with symbol (Enter selection):

  '0': no association
  '1': command_interpreter (*new*)
  '2': CommandInterpreter (*new*)
  '3': commandInterpreter (*new*)
  '4': COMMAND_INTERPRETER (*new*)
  '5': commandinterpreter (*new*)
  '6': COMMANDINTERPRETER (*new*)

> *** Start of source buffer ***
  9:    import ed_simulator, symbol_dictionary
 10:    import sr_interface
 11:    class command_interpreter(object):
 12:    <CURSOR>
*** End of source buffer ***
Saying: ['define', 'method', 'initialize', 'add', 'argument', 'on', 'application', 'equals', 'none', 'comma']


Associate 'initialize' with symbol (Enter selection):

  '0': no association
  '1': initialize (*new*)
  '2': Initialize (*new*)
  '3': INITIALIZE (*new*)

> Associate 'on application' with symbol (Enter selection):

  '0': no association
  '1': on_application (*new*)
  '2': OnApplication (*new*)
  '3': onApplication (*new*)
  '4': ON_APPLICATION (*new*)
  '5': onapplication (*new*)
  '6': ONAPPLICATION (*new*)

> Associate 'none' with symbol (Enter selection):

  '0': no association
  '1': none (*new*)
  '2': None (*new*)
  '3': NONE (*new*)

> *** Start of source buffer ***
  9:    import ed_simulator, symbol_dictionary
 10:    import sr_interface
 11:    class command_interpreter(object):
 12:    def initialize(self, on_application = none, <CURSOR>):
 14:    

*** End of source buffer ***
Saying: ['symbol', 'dictionary', 'pickle', 'file', 'equals', 'none', 'comma', 'double', 'asterisk', 'attributes', 'method', 'body']
Associate 'symbol_dictionary pickle file' with symbol (Enter selection):

  '0': no association
  '1': symbol_dictionary_pickle_file (*new*)
  '2': SymbolDictionaryPickleFile (*new*)
  '3': symbolDictionaryPickleFile (*new*)
  '4': SYMBOL_DICTIONARY_PICKLE_FILE (*new*)
  '5': symboldictionarypicklefile (*new*)
  '6': SYMBOLDICTIONARYPICKLEFILE (*new*)

> Associate 'attributes' with symbol (Enter selection):

  '0': no association
  '1': attributes (*new*)
  '2': Attributes (*new*)
  '3': ATTRIBUTES (*new*)

> *** Start of source buffer ***
 10:    import sr_interface
 11:    class command_interpreter(object):
 12:    def initialize(self, on_application = none, symbol_dictionary_pickle_file = none, **attributes):
 13:    <CURSOR>
*** End of source buffer ***
Saying: ['self', 'dot', 'declare', 'attributes', 'with', 'arguments', 'brace', 'pair']
Associate 'self' with symbol (Enter selection):

  '0': no association
  '1': self (*new*)
  '2': Self (*new*)
  '3': SELF (*new*)

> Associate 'declare attributes' with symbol (Enter selection):

  '0': no association
  '1': declare_attributes (*new*)
  '2': DeclareAttributes (*new*)
  '3': declareAttributes (*new*)
  '4': DECLARE_ATTRIBUTES (*new*)
  '5': declareattributes (*new*)
  '6': DECLAREATTRIBUTES (*new*)

> *** Start of source buffer ***
 10:    import sr_interface
 11:    class command_interpreter(object):
 12:    def initialize(self, on_application = none, symbol_dictionary_pickle_file = none, **attributes):
 13:    self.declare_attributes({<CURSOR>})

*** End of source buffer ***
Saying: ['single', 'quotes', 'un', 'translated', 'text', 'start', 'jump', 'out', ':\\colon', 'none', 'comma']
Associate 'un translated text start' with symbol (Enter selection):

  '0': no association
  '1': un_translated_text_start (*new*)
  '2': UnTranslatedTextStart (*new*)
  '3': unTranslatedTextStart (*new*)
  '4': UN_TRANSLATED_TEXT_START (*new*)
  '5': untranslatedtextstart (*new*)
  '6': UNTRANSLATEDTEXTSTART (*new*)

> *** Start of source buffer ***
 10:    import sr_interface
 11:    class command_interpreter(object):
 12:    def initialize(self, on_application = none, symbol_dictionary_pickle_file = none, **attributes):
 13:    self.declare_attributes({'un_translated_text_start': none, <CURSOR>})

*** End of source buffer ***
Saying: ['single', 'quotes', 'un', 'translated', 'text', 'end', 'jump', 'out', ':\\colon', 'none', 'new', 'statement']
Associate 'un translated text end' with symbol (Enter selection):

  '0': no association
  '1': un_translated_text_end (*new*)
  '2': UnTranslatedTextEnd (*new*)
  '3': unTranslatedTextEnd (*new*)
  '4': UN_TRANSLATED_TEXT_END (*new*)
  '5': untranslatedtextend (*new*)
  '6': UNTRANSLATEDTEXTEND (*new*)

> 

*** Start of source buffer ***
 11:    class command_interpreter(object):
 12:    def initialize(self, on_application = none, symbol_dictionary_pickle_file = none, **attributes):
 13:    self.declare_attributes({'un_translated_text_start': none, 'un_translated_text_end': none})
 14:    <CURSOR>
*** End of source buffer ***
Saying: ['self', 'dot', 'deep', 'construct', 'with', 'arguments', 'command', 'interpreter', 'comma', 'continue', 'statement']
Associate 'deep construct' with symbol (Enter selection):

  '0': no association
  '1': deep_construct (*new*)
  '2': DeepConstruct (*new*)
  '3': deepConstruct (*new*)
  '4': DEEP_CONSTRUCT (*new*)
  '5': deepconstruct (*new*)
  '6': DEEPCONSTRUCT (*new*)

> 

*** Start of source buffer ***
 12:    def initialize(self, on_application = none, symbol_dictionary_pickle_file = none, **attributes):
 13:    self.declare_attributes({'un_translated_text_start': none, 'un_translated_text_end': none})
 14:    self.deep_construct(command_interpreter, \
 15:    <CURSOR>)

*** End of source buffer ***
Saying: ['brace', 'pair', 'single', 'quotes', 'on', 'application', 'jump', 'out', ':\\colon', 'on', 'application', 'comma']
*** Start of source buffer ***
 12:    def initialize(self, on_application = none, symbol_dictionary_pickle_file = none, **attributes):
 13:    self.declare_attributes({'un_translated_text_start': none, 'un_translated_text_end': none})
 14:    self.deep_construct(command_interpreter, \
 15:    {'on_application': on_application, <CURSOR>})

*** End of source buffer ***
Saying: ['single', 'quotes', 'known', 'symbols', 'jump', 'out', ':\\colon', 'symbol', 'dictionary', 'dot', 'symbol', 'dictionary', 'without', 'arguments', 'comma', 'continue', 'statement']
Associate 'known symbols' with symbol (Enter selection):

  '0': no association
  '1': known_symbols (*new*)
  '2': KnownSymbols (*new*)
  '3': knownSymbols (*new*)
  '4': KNOWN_SYMBOLS (*new*)
  '5': knownsymbols (*new*)
  '6': KNOWNSYMBOLS (*new*)

> 

*** Start of source buffer ***
 13:    self.declare_attributes({'un_translated_text_start': none, 'un_translated_text_end': none})
 14:    self.deep_construct(command_interpreter, \
 15:    {'on_application': on_application, 'known_symbols': symbol_dictionary.symbol_dictionary(), \
 16:    <CURSOR>})

*** End of source buffer ***
Saying: ['single', 'quotes', 'language', 'specific', 'aliases', 'jump', 'out', ':\\colon', 'empty', 'dictionary', 'comma', 'continue', 'statement']
Associate 'language specific aliases' with symbol (Enter selection):

  '0': no association
  '1': language_specific_aliases (*new*)
  '2': LanguageSpecificAliases (*new*)
  '3': languageSpecificAliases (*new*)
  '4': LANGUAGE_SPECIFIC_ALIASES (*new*)
  '5': languagespecificaliases (*new*)
  '6': LANGUAGESPECIFICALIASES (*new*)

> 

*** Start of source buffer ***
 14:    self.deep_construct(command_interpreter, \
 15:    {'on_application': on_application, 'known_symbols': symbol_dictionary.symbol_dictionary(), \
 16:    'language_specific_aliases': {}, \
 17:    <CURSOR>})

*** End of source buffer ***
Saying: ['single', 'quotes', 'last', 'loaded', 'language', 'jump', 'out', ':\\colon', 'none', 'comma', 'continue', 'statement']
Associate 'last loaded language' with symbol (Enter selection):

  '0': no association
  '1': last_loaded_language (*new*)
  '2': LastLoadedLanguage (*new*)
  '3': lastLoadedLanguage (*new*)
  '4': LAST_LOADED_LANGUAGE (*new*)
  '5': lastloadedlanguage (*new*)
  '6': LASTLOADEDLANGUAGE (*new*)

> 

*** Start of source buffer ***
 15:    {'on_application': on_application, 'known_symbols': symbol_dictionary.symbol_dictionary(), \
 16:    'language_specific_aliases': {}, \
 17:    'last_loaded_language': none, \
 18:    <CURSOR>})

*** End of source buffer ***
Saying: ['single', 'quotes', 'symbol', 'dictionary', 'pickle', 'file', 'jump', 'out', ':\\colon', 'symbol', 'dictionary', 'pickle', 'file', 'jump', 'out', 'comma', 'continue', 'statement']


*** Start of source buffer ***
 16:    'language_specific_aliases': {}, \
 17:    'last_loaded_language': none, \
 18:    'symbol_dictionary_pickle_file': symbol_dictionary_pickle_file}, \
 19:    <CURSOR>)

*** End of source buffer ***
Saying: ['attributes', 'new', 'statement', 'new', 'statement']




*** Start of source buffer ***
 18:    'symbol_dictionary_pickle_file': symbol_dictionary_pickle_file}, \
 19:    attributes)
 20:    
 21:    <CURSOR>
*** End of source buffer ***
Saying: ['define', 'method', 'spoken', 'form', 'regular', 'expression', 'add', 'argument', 'spoken', 'form', 'method', 'body']


Associate 'spoken form regular expression' with symbol (Enter selection):

  '0': no association
  '1': spoken_form_regular_expression (*new*)
  '2': SpokenFormRegularExpression (*new*)
  '3': spokenFormRegularExpression (*new*)
  '4': SPOKEN_FORM_REGULAR_EXPRESSION (*new*)
  '5': spokenformregularexpression (*new*)
  '6': SPOKENFORMREGULAREXPRESSION (*new*)

> Associate 'spoken form' with symbol (Enter selection):

  '0': no association
  '1': spoken_form (*new*)
  '2': SpokenForm (*new*)
  '3': spokenForm (*new*)
  '4': SPOKEN_FORM (*new*)
  '5': spokenform (*new*)
  '6': SPOKENFORM (*new*)

> *** Start of source buffer ***
 19:    attributes)
 20:    
 21:    def spoken_form_regular_expression(self, spoken_form):
 22:    <CURSOR>
*** End of source buffer ***
Saying: ['words', 'equals', 'R.', 'E.', 'dot', 'split', 'with', 'arguments']
Associate 'words' with symbol (Enter selection):

  '0': no association
  '1': words (*new*)
  '2': Words (*new*)
  '3': WORDS (*new*)

> Associate 'R. E.' with symbol (Enter selection):

  '0': no association
  '1': re
  '2': Re (*new*)
  '3': RE (*new*)

> Associate 'split' with symbol (Enter selection):

  '0': no association
  '1': split (*new*)
  '2': Split (*new*)
  '3': SPLIT (*new*)

> *** Start of source buffer ***
 19:    attributes)
 20:    
 21:    def spoken_form_regular_expression(self, spoken_form):
 22:    words = re.split(<CURSOR>)

*** End of source buffer ***
Saying: ['single', 'quotes', 'back', 'slash', 'S.', 'plus', 'sign', 'jump', 'out', 'comma', 'spoken', 'form', 'new', 'statement']


*** Start of source buffer ***
 20:    
 21:    def spoken_form_regular_expression(self, spoken_form):
 22:    words = re.split('\s+', spoken_form)
 23:    <CURSOR>
*** End of source buffer ***
Saying: ['regular', 'expression', 'equals', 'empty', 'single', 'quotes', 'new', 'statement']
Associate 'regular expression' with symbol (Enter selection):

  '0': no association
  '1': re
  '2': regular_expression (*new*)
  '3': RegularExpression (*new*)
  '4': regularExpression (*new*)
  '5': REGULAR_EXPRESSION (*new*)
  '6': regularexpression (*new*)
  '7': REGULAREXPRESSION (*new*)

> 

*** Start of source buffer ***
 21:    def spoken_form_regular_expression(self, spoken_form):
 22:    words = re.split('\s+', spoken_form)
 23:    re = ''
 24:    <CURSOR>
*** End of source buffer ***
Saying: ['for', 'loop', 'a', 'word', 'in', 'list', 'words', 'loop', 'body']


Associate 'a word' with symbol (Enter selection):

  '0': no association
  '1': a_word (*new*)
  '2': AWord (*new*)
  '3': aWord (*new*)
  '4': A_WORD (*new*)
  '5': aword (*new*)
  '6': AWORD (*new*)

> *** Start of source buffer ***
 22:    words = re.split('\s+', spoken_form)
 23:    re = ''
 24:    for a_word in words:
 25:    <CURSOR>
*** End of source buffer ***
Saying: ['first', 'equals', 'a', 'word', 'at', 'index', '0', 'new', 'statement']
Associate 'first' with symbol (Enter selection):

  '0': no association
  '1': first (*new*)
  '2': First (*new*)
  '3': FIRST (*new*)

> 

*** Start of source buffer ***
 23:    re = ''
 24:    for a_word in words:
 25:    first = a_word[0]
 26:    <CURSOR>
*** End of source buffer ***
Saying: ['rest', 'equals', 'a', 'word', 'at', 'index', '1', ':\\colon', 'new', 'statement']
Associate 'rest' with symbol (Enter selection):

  '0': no association
  '1': re
  '2': rest (*new*)
  '3': Rest (*new*)
  '4': REST (*new*)

> 

*** Start of source buffer ***
 24:    for a_word in words:
 25:    first = a_word[0]
 26:    re = a_word[1: ]
 27:    <CURSOR>
*** End of source buffer ***
Saying: ['regular', 'expression', 'this', 'word', 'equals', 'single', 'quotes']
Associate 'regular expression this word' with symbol (Enter selection):

  '0': no association
  '1': regular_expression_this_word (*new*)
  '2': RegularExpressionThisWord (*new*)
  '3': regularExpressionThisWord (*new*)
  '4': REGULAR_EXPRESSION_THIS_WORD (*new*)
  '5': regularexpressionthisword (*new*)
  '6': REGULAREXPRESSIONTHISWORD (*new*)

> *** Start of source buffer ***
 24:    for a_word in words:
 25:    first = a_word[0]
 26:    re = a_word[1: ]
 27:    regular_expression_this_word = '<CURSOR>'

*** End of source buffer ***
Saying: ['open', 'bracket', 'jump', 'out', 'plus', 'string', 'dot', 'lower', 'with', 'arguments', 'first']
Associate 'lower' with symbol (Enter selection):

  '0': no association
  '1': lower (*new*)
  '2': Lower (*new*)
  '3': LOWER (*new*)

> *** Start of source buffer ***
 24:    for a_word in words:
 25:    first = a_word[0]
 26:    re = a_word[1: ]
 27:    regular_expression_this_word = '[' + string.lower(first<CURSOR>)

*** End of source buffer ***
Saying: ['jump', 'out', 'plus', 'string', 'dot', 'upper', 'with', 'arguments', 'first', 'new', 'statement']
Associate 'upper' with symbol (Enter selection):

  '0': no association
  '1': upper (*new*)
  '2': Upper (*new*)
  '3': UPPER (*new*)

> 

*** Start of source buffer ***
 25:    first = a_word[0]
 26:    re = a_word[1: ]
 27:    regular_expression_this_word = '[' + string.lower(first) + string.upper(first)
 28:    <CURSOR>
*** End of source buffer ***
Saying: ['if', 'statement', 'not', 'regular', 'expression', 'equal', 'to', 'empty', 'single', 'quotes', 'if', 'body']


Associate 'regular expression' with symbol (Enter selection):

  '0': no association
  '1': re
  '2': regular_expression (*new*)
  '3': RegularExpression (*new*)
  '4': regularExpression (*new*)
  '5': REGULAR_EXPRESSION (*new*)
  '6': regularexpression (*new*)
  '7': REGULAREXPRESSION (*new*)

> *** Start of source buffer ***
 26:    re = a_word[1: ]
 27:    regular_expression_this_word = '[' + string.lower(first) + string.upper(first)
 28:    if not re == '':
 29:    <CURSOR>
*** End of source buffer ***
Saying: ['regular', 'expression', 'equals', 'regular', 'expression', 'plus', 'single', 'quotes', 'back', 'slash', 'S.', 'asterisk', 'new', 'statement']
Associate 'regular expression' with symbol (Enter selection):

  '0': no association
  '1': re
  '2': regular_expression (*new*)
  '3': RegularExpression (*new*)
  '4': regularExpression (*new*)
  '5': REGULAR_EXPRESSION (*new*)
  '6': regularexpression (*new*)
  '7': REGULAREXPRESSION (*new*)

> Associate 'regular expression' with symbol (Enter selection):

  '0': no association
  '1': re
  '2': regular_expression (*new*)
  '3': RegularExpression (*new*)
  '4': regularExpression (*new*)
  '5': REGULAR_EXPRESSION (*new*)
  '6': regularexpression (*new*)
  '7': REGULAREXPRESSION (*new*)

> 

*** Start of source buffer ***
 27:    regular_expression_this_word = '[' + string.lower(first) + string.upper(first)
 28:    if not re == '':
 29:    re = re + '\s*'
 30:    <CURSOR>
*** End of source buffer ***
Saying: ['regular', 'expression', 'equals', 'regular', 'expression', 'plus', 'regular', 'expression', 'this', 'word', 'new', 'statement']
Associate 'regular expression' with symbol (Enter selection):

  '0': no association
  '1': re
  '2': regular_expression (*new*)
  '3': RegularExpression (*new*)
  '4': regularExpression (*new*)
  '5': REGULAR_EXPRESSION (*new*)
  '6': regularexpression (*new*)
  '7': REGULAREXPRESSION (*new*)

> Associate 'regular expression' with symbol (Enter selection):

  '0': no association
  '1': re
  '2': regular_expression (*new*)
  '3': RegularExpression (*new*)
  '4': regularExpression (*new*)
  '5': REGULAR_EXPRESSION (*new*)
  '6': regularexpression (*new*)
  '7': REGULAREXPRESSION (*new*)

> 

*** Start of source buffer ***
 28:    if not re == '':
 29:    re = re + '\s*'
 30:    re = re + regular_expression_this_word
 31:    <CURSOR>
*** End of source buffer ***
Saying: ['return', 'regular', 'expression']
Associate 'regular expression' with symbol (Enter selection):

  '0': no association
  '1': re
  '2': regular_expression (*new*)
  '3': RegularExpression (*new*)
  '4': regularExpression (*new*)
  '5': REGULAR_EXPRESSION (*new*)
  '6': regularexpression (*new*)
  '7': REGULAREXPRESSION (*new*)

> *** Start of source buffer ***
 28:    if not re == '':
 29:    re = re + '\s*'
 30:    re = re + regular_expression_this_word
 31:    return re<CURSOR>
*** End of source buffer ***


*******************************************************************************
* Name        : redundant_translation
* Description : testing redundant translation of LSAs and symbols at SR and Mediator level
*******************************************************************************

Compiling symbols for file 'e:\Projects\VoiceCode\VCode\Config\py_std_sym.py'
Compiling symbols for file 'e:\Projects\VoiceCode\VCode\Config\py_std_sym.py'


>>> Testing console command: open_file('blah.c')

WARNING: source file 'blah.c' doesn't exist.
*** Start of source buffer ***
<CURSOR>
*** End of source buffer ***


>>> Testing console command: compile_symbols(['e:\Projects\VoiceCode\VCode\Data\TestData\small_buff.c'])

Compiling symbols for file 'e:\Projects\VoiceCode\VCode\Data\TestData\small_buff.c'
>>> Known symbols are: 
API_function: ['api function']
f_name: ['f name']
f_name2: ['f name 2']
float: ['float']
horiz_pos: ['horiz pos', 'horiz position', 'horiz positionning', 'horizontal pos', 'horizontal position', 'horizontal positionning', 'horizontally pos', 'horizontally position', 'horizontally positionning']
move: ['move']
move_horiz: ['move horiz', 'move horizontal', 'move horizontally']
move_vert: ['move vert', 'move vertical', 'move vertically']
this_sym_has_an_other_abbrev: ['this sym has an other abbrev', 'this symbol has an other abbrev']
this_sym_is_unres: ['this sym is unres', 'this symbol is unres']
this_sym_is_unres_too: ['this sym is unres too', 'this symbol is unres too']
void: ['void']
x: ['x']
y: ['y']
_cached_symbols_as_one_string is:
    void  move  float  x  y  move_horiz  move_vert  horiz_pos  this_sym_is_unres  this_sym_is_unres_too  this_sym_has_an_other_abbrev  f_name  f_name2  API_function 


>>> Testing console command: say(['index', ' != \\not equal to', '0'], user_input='0
0
')
Associate 'index' with symbol (Enter selection):

  '0': no association
  '1': index (*new*)
  '2': Index (*new*)
  '3': INDEX (*new*)

> *** Start of source buffer ***
  1:    index != 0<CURSOR>
*** End of source buffer ***


>>> Testing console command: say(['index', 'not', 'equal', 'to', '0'], user_input='0
0
')
Associate 'index' with symbol (Enter selection):

  '0': no association
  '1': index (*new*)
  '2': Index (*new*)
  '3': INDEX (*new*)

> *** Start of source buffer ***
  1:    index != 0index != 0<CURSOR>
*** End of source buffer ***


>>> Testing console command: say(['move_horiz\\move horizontally'], user_input='0
0
')
*** Start of source buffer ***
  1:    index != 0index != 0move_horiz<CURSOR>
*** End of source buffer ***


>>> Testing console command: say(['move', 'horizontally'], user_input='0
0
')
*** Start of source buffer ***
  1:    index != 0index != 0move_horizmove_horiz<CURSOR>
*** End of source buffer ***
