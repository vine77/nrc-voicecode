Compiling symbols for file '%VCODE_HOME%\Config\py_std_sym.py'
universal instance named "EdSim(0)"


*******************************************************************************
* Name        : basic_correction
* Description : Testing basic correction infrastructure with ResMgr.
*******************************************************************************

Compiling symbols for file '%VCODE_HOME%\Config\py_std_sym.py'
Compiling symbols for file '%VCODE_HOME%\Config\py_std_sym.py'
WARNING: source file 'blah.py' doesn't exist.
*** Start of source buffer ***
  1: <CURSOR>

*** End of source buffer ***

***Testing initial state***


0 stored utterances, as expected


recent dictation is empty, as expected


***Some simple dictation***



>>> Testing console command: say(['class', 'clown', 'inherits', 'from', 'student'], user_input='0
0
')
-- DictWinGramNL.activate: blah.py received activate
-- DictWinGramNL.activate: not already active
-- DictWinGramNL.activate: activating, window = 0, exclusive=1
-- DictWinGramNL.gotResultsObject, results=%s: <ResObj object at e82330>


>>> Testing console command: say(['class', 'body'], user_input='')
-- DictWinGramNL.activate: blah.py received activate
-- ResMgrBasic.interpret_dictation: about to interpret
-- ResMgrStd._std_interp: standard interpretation
-- ResMgrStd._std_interp: about to call before
-- ResMgrStd._std_interp: about to call after
*** Start of source buffer ***
  1: <CURSOR>

*** End of source buffer ***
-- ResMgrBasic.store: storing an utterance (already have 0)


>>> Testing console command: say(['define', 'method', 'popularity', 'method', 'body'], user_input='0
')
-- DictWinGramNL.activate: blah.py received activate
-- ResMgrBasic.interpret_dictation: about to interpret
-- ResMgrStd._std_interp: standard interpretation
-- ResMgrStd._std_interp: about to call before
Associate 'popularity' with symbol (Enter selection):

  '0': no association
  '1': popularity (*new*)
  '2': Popularity (*new*)
  '3': POPULARITY (*new*)

> -- ResMgrStd._std_interp: about to call after
*** Start of source buffer ***
  1: def popularity(self):
  2:    <CURSOR>

*** End of source buffer ***
-- ResMgrBasic.store: storing an utterance (already have 1)


>>> Testing console command: say(['return', '8'], user_input='')
-- DictWinGramNL.activate: blah.py received activate
-- ResMgrBasic.interpret_dictation: about to interpret
-- ResMgrStd._std_interp: standard interpretation
-- ResMgrStd._std_interp: about to call before
-- ResMgrStd._std_interp: about to call after
*** Start of source buffer ***
  1: def popularity(self):
  2:    return 8<CURSOR>

*** End of source buffer ***
-- ResMgrBasic.store: storing an utterance (already have 2)

***Testing state***


WARNING: 3 stored utterances (expected 4)
-- ResMgrBasic.recent_dictation: safe depth = 3

WARNING: 3 recently dictated utterances (expected 4)
-- ResMgrBasic.recent_dictation: safe depth = 3

WARNING: check_recent found 3 stored utterances
(expected 4)

additional utterances were expected:

***Testing scratch that***

scratching 1

-- ResMgrBasic.scratch_recent: attempting to scratch n = 1
*** Start of source buffer ***
  1: def popularity(self):
  2:    return 8<CURSOR>

*** End of source buffer ***
*** Start of source buffer ***
  1: def popularity(self):
  2:    <CURSOR>

*** End of source buffer ***
scratch 1 succeeded as expected

WARNING: 2 stored utterances (expected 3)
-- ResMgrBasic.recent_dictation: safe depth = 2

WARNING: 2 recently dictated utterances (expected 3)
-- ResMgrBasic.recent_dictation: safe depth = 2

WARNING: check_recent found 2 stored utterances
(expected 3)

additional utterances were expected:

***Moving cursor manually***

*** Start of source buffer ***
  1: <CURSOR>def popularity(self):
  2:    

*** End of source buffer ***

***Testing scratch that following manual move***

scratching 1

-- ResMgrBasic.scratch_recent: attempting to scratch n = 1
*** Start of source buffer ***
  1: def popularity(self):
  2:    <CURSOR>

*** End of source buffer ***
*** Start of source buffer ***
  1: <CURSOR>

*** End of source buffer ***
scratch 1 succeeded as expected

WARNING: 1 stored utterances (expected 2)
-- ResMgrBasic.recent_dictation: safe depth = 1

WARNING: 1 recently dictated utterances (expected 2)
-- ResMgrBasic.recent_dictation: safe depth = 1

WARNING: check_recent found 1 stored utterances
(expected 2)

additional utterances were expected:


>>> Testing console command: say(['define', 'method', 'grades', 'method', 'body', 'return', 'B.'], user_input='0
2
')
-- DictWinGramNL.activate: blah.py received activate
-- ResMgrBasic.interpret_dictation: about to interpret
-- ResMgrStd._std_interp: standard interpretation
-- ResMgrStd._std_interp: about to call before
Associate 'grades' with symbol (Enter selection):

  '0': no association
  '1': grades (*new*)
  '2': Grades (*new*)
  '3': GRADES (*new*)

> Associate 'B.' with symbol (Enter selection):

  '0': no association
  '1': b (*new*)
  '2': B (*new*)

> -- ResMgrStd._std_interp: about to call after
*** Start of source buffer ***
  1: def grades(self):
  2:    return B<CURSOR>

*** End of source buffer ***
-- ResMgrBasic.store: storing an utterance (already have 1)

WARNING: 2 stored utterances (expected 3)
-- ResMgrBasic.recent_dictation: safe depth = 2

WARNING: 2 recently dictated utterances (expected 3)
-- ResMgrBasic.recent_dictation: safe depth = 2

WARNING: check_recent found 2 stored utterances
(expected 3)

additional utterances were expected:


>>> Testing console command: say(['select', 'clown'], user_input='None')
-- DictWinGramNL.activate: blah.py received activate
-- ResMgrBasic.interpret_dictation: about to interpret
-- ResMgrStd._std_interp: standard interpretation
-- ResMgrStd._std_interp: about to call before
Associate 'select clown' with symbol (Enter selection):

  '0': no association
  '1': select_clown (*new*)
  '2': SelectClown (*new*)
  '3': selectClown (*new*)
  '4': SELECT_CLOWN (*new*)
  '5': selectclown (*new*)
  '6': SELECTCLOWN (*new*)

> -- ResMgrStd._std_interp: about to call after
*** Start of source buffer ***
  1: def grades(self):
  2:    return Bselect clown<CURSOR>

*** End of source buffer ***
-- ResMgrBasic.store: storing an utterance (already have 2)

***Manually changing text

*** Start of source buffer ***
  1: def grades(self):
  2:    return Bselect clownpresident<CURSOR>

*** End of source buffer ***

***Testing scratch that following manual change***

scratching 1

-- ResMgrBasic.scratch_recent: attempting to scratch n = 1
scratch 1 failed as expected
WARNING: source file 'blahblah.py' doesn't exist.
*** Start of source buffer ***
  1: <CURSOR>

*** End of source buffer ***


>>> Testing console command: say(['class', 'cloud', 'inherits', 'from', 'student'], user_input='0
0
')
-- DictWinGramNL.deactivate: blah.py received deactivate
-- DictWinGramNL.deactivate: was active
-- DictWinGramNL.activate: blahblah.py received activate
-- DictWinGramNL.activate: not already active
-- DictWinGramNL.activate: activating, window = 0, exclusive=1
-- DictWinGramNL.gotResultsObject, results=%s: <ResObj object at e823a8>


>>> Testing console command: say(['class', 'body'], user_input='')
-- DictWinGramNL.deactivate: blah.py received deactivate
-- DictWinGramNL.activate: blahblah.py received activate
-- ResMgrBasic.interpret_dictation: about to interpret
-- ResMgrStd._std_interp: standard interpretation
-- ResMgrStd._std_interp: about to call before
-- ResMgrStd._std_interp: about to call after
*** Start of source buffer ***
  1: <CURSOR>

*** End of source buffer ***
-- ResMgrBasic.store: storing an utterance (already have 0)


>>> Testing console command: say(['fine', 'method', 'popularity', 'method', 'body'], user_input='0
')
-- DictWinGramNL.deactivate: blah.py received deactivate
-- DictWinGramNL.activate: blahblah.py received activate
-- ResMgrBasic.interpret_dictation: about to interpret
-- ResMgrStd._std_interp: standard interpretation
-- ResMgrStd._std_interp: about to call before
Associate 'fine method popularity' with symbol (Enter selection):

  '0': no association
  '1': fine_method_popularity (*new*)
  '2': FineMethodPopularity (*new*)
  '3': fineMethodPopularity (*new*)
  '4': FINE_METHOD_POPULARITY (*new*)
  '5': finemethodpopularity (*new*)
  '6': FINEMETHODPOPULARITY (*new*)

> -- ResMgrStd._std_interp: about to call after
*** Start of source buffer ***
  1: fine method popularity<CURSOR>

*** End of source buffer ***
-- ResMgrBasic.store: storing an utterance (already have 1)


>>> Testing console command: say(['return', '8'], user_input='')
-- DictWinGramNL.deactivate: blah.py received deactivate
-- DictWinGramNL.activate: blahblah.py received activate
-- ResMgrBasic.interpret_dictation: about to interpret
-- ResMgrStd._std_interp: standard interpretation
-- ResMgrStd._std_interp: about to call before
-- ResMgrStd._std_interp: about to call after
*** Start of source buffer ***
  1: fine method popularityreturn 8<CURSOR>

*** End of source buffer ***
-- ResMgrBasic.store: storing an utterance (already have 2)

***Testing state***


WARNING: 3 stored utterances (expected 4)
-- ResMgrBasic.recent_dictation: safe depth = 3

WARNING: 3 recently dictated utterances (expected 4)
-- ResMgrBasic.recent_dictation: safe depth = 3

WARNING: check_recent found 3 stored utterances
(expected 4)

additional utterances were expected:

***Testing correction of recent utterance***

-- ResMgrBasic.recent_dictation: safe depth = 3
detecting changes
utterance 2: change = {'fine': 'define'}
word fine being replaced with define
utterance 2 was changed 
utterance 2 was corrected
about to reinterpret
-- ResMgrBasic.reinterpret_recent: max changed = 2
-- ResMgrBasic.reinterpret_recent: max changed and stored = 2

-- ResMgrBasic.reinterpret_recent: safe depth = 3
-- ResMgrBasic.reinterpret_recent: so popping 2
*** Start of source buffer ***
  1: fine method popularityreturn 8<CURSOR>

*** End of source buffer ***
*** Start of source buffer ***
  1: fine method popularity<CURSOR>

*** End of source buffer ***
*** Start of source buffer ***
  1: <CURSOR>

*** End of source buffer ***
-- ResMgrBasic.reinterpret_recent: about to reinterpret [<sr_interface.SpokenUtteranceNL instance at 133aa28>, <sr_interface.SpokenUtteranceNL instance at 10f1040>]
-- ResMgrBasic.reinterpret_recent: reinterpreting 2
-- ResMgrBasic.reinterpret_recent: spoken_forms ['define', 'method', 'popularity', 'method', 'body']
-- ResMgrBasic.interpret_dictation: about to interpret
-- ResMgrStd._std_interp: standard interpretation
-- ResMgrStd._std_interp: about to call before
Associate 'popularity' with symbol (Enter selection):

  '0': no association
  '1': popularity (*new*)
  '2': Popularity (*new*)
  '3': POPULARITY (*new*)

> -- ResMgrStd._std_interp: about to call after
*** Start of source buffer ***
  1: def popularity(self):
  2:    <CURSOR>

*** End of source buffer ***
-- ResMgrBasic.store: storing an utterance (already have 1)
-- ResMgrBasic.reinterpret_recent: reinterpreting 1
-- ResMgrBasic.reinterpret_recent: spoken_forms ['return', '8']
-- ResMgrBasic.interpret_dictation: about to interpret
-- ResMgrStd._std_interp: standard interpretation
-- ResMgrStd._std_interp: about to call before
-- ResMgrStd._std_interp: about to call after
*** Start of source buffer ***
  1: def popularity(self):
  2:    return 8<CURSOR>

*** End of source buffer ***
-- ResMgrBasic.store: storing an utterance (already have 2)

all utterances from 2 to the present
were reinterpreted, as expected


***Testing state***


WARNING: 3 stored utterances (expected 4)
-- ResMgrBasic.recent_dictation: safe depth = 3

WARNING: 3 recently dictated utterances (expected 4)
-- ResMgrBasic.recent_dictation: safe depth = 3

WARNING: check_recent found 3 stored utterances
(expected 4)

additional utterances were expected:

***Testing correction of another recent utterance***

-- ResMgrBasic.recent_dictation: safe depth = 3

can't correct error 4 utterances ago
because stored_utterances only goes back 3


***Testing state***


WARNING: 3 stored utterances (expected 4)
-- ResMgrBasic.recent_dictation: safe depth = 3

WARNING: 3 recently dictated utterances (expected 4)
-- ResMgrBasic.recent_dictation: safe depth = 3

WARNING: check_recent found 3 stored utterances
(expected 4)

additional utterances were expected:


>>> Testing console command: say(['new', 'line'], user_input='')
-- DictWinGramNL.deactivate: blah.py received deactivate
-- DictWinGramNL.activate: blahblah.py received activate
-- ResMgrBasic.interpret_dictation: about to interpret
-- ResMgrStd._std_interp: standard interpretation
-- ResMgrStd._std_interp: about to call before
-- ResMgrStd._std_interp: about to call after
*** Start of source buffer ***
  1: def popularity(self):
  2:    return 8
  3:    <CURSOR>

*** End of source buffer ***
-- ResMgrBasic.store: storing an utterance (already have 3)


>>> Testing console command: say(['back indent'], user_input='')
-- DictWinGramNL.deactivate: blah.py received deactivate
-- DictWinGramNL.activate: blahblah.py received activate
-- ResMgrBasic.interpret_dictation: about to interpret
-- ResMgrStd._std_interp: standard interpretation
-- ResMgrStd._std_interp: about to call before
-- ResMgrStd._std_interp: about to call after
*** Start of source buffer ***
  1: def popularity(self):
  2:    return 8
  3: <CURSOR>

*** End of source buffer ***
-- ResMgrBasic.store: storing an utterance (already have 4)


>>> Testing console command: say(['excess', 'equals', '0'], user_input='0
')
-- DictWinGramNL.deactivate: blah.py received deactivate
-- DictWinGramNL.activate: blahblah.py received activate
-- ResMgrBasic.interpret_dictation: about to interpret
-- ResMgrStd._std_interp: standard interpretation
-- ResMgrStd._std_interp: about to call before
Associate 'excess' with symbol (Enter selection):

  '0': no association
  '1': excess (*new*)
  '2': Excess (*new*)
  '3': EXCESS (*new*)

> -- ResMgrStd._std_interp: about to call after
*** Start of source buffer ***
  1: def popularity(self):
  2:    return 8
  3: excess = 0<CURSOR>

*** End of source buffer ***
-- ResMgrBasic.store: storing an utterance (already have 5)

***Manually changing text

*** Start of source buffer ***
  1: def popularity(self):
  2:    return 8
  3: excess<CURSOR>

*** End of source buffer ***

***Testing state***


WARNING: 6 stored utterances (expected 7)
-- ResMgrBasic.recent_dictation: safe depth = 0

WARNING: 6 recently dictated utterances (expected 7)
-- ResMgrBasic.recent_dictation: safe depth = 0

WARNING: check_recent found 6 stored utterances
(expected 7)

additional utterances were expected:

***Testing failed correction of a recent utterance***

-- ResMgrBasic.recent_dictation: safe depth = 0
detecting changes
utterance 0: change = {'excess': 'success'}

reinterpretation failed, as expected


***Fixing error manually***

*** Start of source buffer ***
  1: def popularity(self):
  2:    return 8
  3: <CURSOR>

*** End of source buffer ***

***Testing state***


WARNING: 6 stored utterances (expected 7)
-- ResMgrBasic.recent_dictation: safe depth = 0

WARNING: 6 recently dictated utterances (expected 7)
-- ResMgrBasic.recent_dictation: safe depth = 0

WARNING: check_recent found 6 stored utterances
(expected 7)

additional utterances were expected:


>>> Testing console command: say(['excess', 'equals', '1', 'new', 'line'], user_input='0
')
-- DictWinGramNL.deactivate: blah.py received deactivate
-- DictWinGramNL.activate: blahblah.py received activate
-- ResMgrBasic.interpret_dictation: about to interpret
-- ResMgrStd._std_interp: standard interpretation
-- ResMgrStd._std_interp: about to call before
Associate 'excess' with symbol (Enter selection):

  '0': no association
  '1': excess (*new*)
  '2': Excess (*new*)
  '3': EXCESS (*new*)

> -- ResMgrStd._std_interp: about to call after
*** Start of source buffer ***
  1: def popularity(self):
  2:    return 8
  3: excess = 1
  4: <CURSOR>

*** End of source buffer ***
-- ResMgrBasic.store: storing an utterance (already have 6)


>>> Testing console command: say(['back indent'], user_input='')
-- DictWinGramNL.deactivate: blah.py received deactivate
-- DictWinGramNL.activate: blahblah.py received activate
-- ResMgrBasic.interpret_dictation: about to interpret
-- ResMgrStd._std_interp: standard interpretation
-- ResMgrStd._std_interp: about to call before
-- ResMgrStd._std_interp: about to call after
*** Start of source buffer ***
  1: def popularity(self):
  2:    return 8
  3: excess = 1
  4: <CURSOR>

*** End of source buffer ***
-- ResMgrBasic.store: storing an utterance (already have 7)


>>> Testing console command: say(['results', 'at', 'index', '0', 'jump', 'out', 'equals', '0'], user_input='0
')
-- DictWinGramNL.deactivate: blah.py received deactivate
-- DictWinGramNL.activate: blahblah.py received activate
-- ResMgrBasic.interpret_dictation: about to interpret
-- ResMgrStd._std_interp: standard interpretation
-- ResMgrStd._std_interp: about to call before
Associate 'results' with symbol (Enter selection):

  '0': no association
  '1': results (*new*)
  '2': Results (*new*)
  '3': RESULTS (*new*)

> -- ResMgrStd._std_interp: about to call after
*** Start of source buffer ***
  1: def popularity(self):
  2:    return 8
  3: excess = 1
  4: results[0] = 0<CURSOR>

*** End of source buffer ***
-- ResMgrBasic.store: storing an utterance (already have 8)

***Testing state***


WARNING: 9 stored utterances (expected 10)
-- ResMgrBasic.recent_dictation: safe depth = 3

WARNING: 9 recently dictated utterances (expected 10)
-- ResMgrBasic.recent_dictation: safe depth = 3

WARNING: check_recent found 9 stored utterances
(expected 10)

additional utterances were expected:

***Testing scratch that***

scratching 1

-- ResMgrBasic.scratch_recent: attempting to scratch n = 1
*** Start of source buffer ***
  1: def popularity(self):
  2:    return 8
  3: excess = 1
  4: results[0] = 0<CURSOR>

*** End of source buffer ***
*** Start of source buffer ***
  1: def popularity(self):
  2:    return 8
  3: excess = 1
  4: <CURSOR>

*** End of source buffer ***
scratch 1 succeeded as expected

***Testing state***


WARNING: 8 stored utterances (expected 9)
-- ResMgrBasic.recent_dictation: safe depth = 2

WARNING: 8 recently dictated utterances (expected 9)
-- ResMgrBasic.recent_dictation: safe depth = 2

WARNING: check_recent found 8 stored utterances
(expected 9)

additional utterances were expected:

***Testing correction after scratch that***

-- ResMgrBasic.recent_dictation: safe depth = 2
detecting changes
utterance 2: change = {'excess': 'access'}
word excess being replaced with access
utterance 2 was changed 
utterance 2 was corrected
about to reinterpret
-- ResMgrBasic.reinterpret_recent: max changed = 2
-- ResMgrBasic.reinterpret_recent: max changed and stored = 2

-- ResMgrBasic.reinterpret_recent: safe depth = 2
-- ResMgrBasic.reinterpret_recent: so popping 2
*** Start of source buffer ***
  1: def popularity(self):
  2:    return 8
  3: excess = 1
  4: <CURSOR>

*** End of source buffer ***
*** Start of source buffer ***
  1: def popularity(self):
  2:    return 8
  3: excess = 1
  4: <CURSOR>

*** End of source buffer ***
*** Start of source buffer ***
  1: def popularity(self):
  2:    return 8
  3: <CURSOR>

*** End of source buffer ***
-- ResMgrBasic.reinterpret_recent: about to reinterpret [<sr_interface.SpokenUtteranceNL instance at 135aad8>, <sr_interface.SpokenUtteranceNL instance at 1359148>]
-- ResMgrBasic.reinterpret_recent: reinterpreting 2
-- ResMgrBasic.reinterpret_recent: spoken_forms ['access', 'equals', '1', 'new', 'line']
-- ResMgrBasic.interpret_dictation: about to interpret
-- ResMgrStd._std_interp: standard interpretation
-- ResMgrStd._std_interp: about to call before
Associate 'access' with symbol (Enter selection):

  '0': no association
  '1': access (*new*)
  '2': Access (*new*)
  '3': ACCESS (*new*)

> -- ResMgrStd._std_interp: about to call after
*** Start of source buffer ***
  1: def popularity(self):
  2:    return 8
  3: access = 1
  4: <CURSOR>

*** End of source buffer ***
-- ResMgrBasic.store: storing an utterance (already have 6)
-- ResMgrBasic.reinterpret_recent: reinterpreting 1
-- ResMgrBasic.reinterpret_recent: spoken_forms ['back indent']
-- ResMgrBasic.interpret_dictation: about to interpret
-- ResMgrStd._std_interp: standard interpretation
-- ResMgrStd._std_interp: about to call before
-- ResMgrStd._std_interp: about to call after
*** Start of source buffer ***
  1: def popularity(self):
  2:    return 8
  3: access = 1
  4: <CURSOR>

*** End of source buffer ***
-- ResMgrBasic.store: storing an utterance (already have 7)

all utterances from 2 to the present
were reinterpreted, as expected


***Testing state***


WARNING: 8 stored utterances (expected 9)
-- ResMgrBasic.recent_dictation: safe depth = 2

WARNING: 8 recently dictated utterances (expected 9)
-- ResMgrBasic.recent_dictation: safe depth = 2

WARNING: check_recent found 8 stored utterances
(expected 9)

additional utterances were expected:



-----------------------------------------------
Test suite completed in:  526.768000007 secs
-----------------------------------------------
-- DictWinGramNL.deactivate: blah.py received deactivate
-- DictWinGramNL.deactivate: blahblah.py received deactivate
-- DictWinGramNL.deactivate: was active
Compiling symbols for file '%VCODE_HOME%\Config\py_std_sym.py'
